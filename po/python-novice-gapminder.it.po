# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# MARTINO SORBARO <martino.sorbaro@posteo.net>, 2020, 2021.
#
# Translators:
# Martino Sorbaro <martino.sorbaro@posteo.net>, 2020, 2021
#
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: 2020-05-24 19:14+0000\n"
"Last-Translator: Martino Sorbaro <martino.sorbaro@posteo.net>, 2021\n"
"Language-Team: Italian (https://www.transifex.com/carpentries-i18n/teams/98915/it/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: it\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# Front Matter
#: lc-open-refine/CODE_OF_CONDUCT.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Codice di Condotta dei Partecipanti al Progetto\"\n"
"---"

#: lc-open-refine/CODE_OF_CONDUCT.md:5
msgid ""
"As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""
"In qualità di partecipanti e organizzatori di questo progetto,\n"
"promettiamo di seguire il [Codice di Condotta Carpentries][coc]."

#: lc-open-refine/CODE_OF_CONDUCT.md:8
msgid ""
"Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""
"Casi di comportamento offensivo, molesto, o altrimenti inaccettabile\n"
"possono essere segnalati seguendo le [linee guida][coc-reporting]."

#: lc-open-refine/CODE_OF_CONDUCT.md:11
msgid "{% include links.md %}"
msgstr "{% include links.md %}"

# Front Matter
#: lc-open-refine/LICENSE.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"---"
msgstr ""

# header
#: lc-open-refine/LICENSE.md:6
msgid "## Instructional Material"
msgstr "## Materiale didattico"

#: lc-open-refine/LICENSE.md:8
msgid ""
"All Software Carpentry, Data Carpentry, and Library Carpentry instructional material is made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""

#: lc-open-refine/LICENSE.md:13
msgid "You are free:"
msgstr "Tu sei libero di:"

# unordered list
#: lc-open-refine/LICENSE.md:15
msgid ""
"* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""
"* **Condividere**---riprodurre, distribuire, comunicare al pubblico, esporre"
" in pubblico, rappresentare, eseguire e recitare questo materiale con "
"qualsiasi mezzo e formato"

# unordered list
#: lc-open-refine/LICENSE.md:16
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""
"* **Modificare** --- remixare, trasformare il materiale e basarti su di esso"
" per le tue opere"

#: lc-open-refine/LICENSE.md:18
msgid "for any purpose, even commercially."
msgstr "per qualsiasi fine, anche commerciale."

#: lc-open-refine/LICENSE.md:20
msgid ""
"The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""
"Il licenziante non può revocare questi diritti fintanto che tu rispetti i "
"termini della licenza."

#: lc-open-refine/LICENSE.md:23
msgid "Under the following terms:"
msgstr "Alle seguenti condizioni:"

# unordered list
#: lc-open-refine/LICENSE.md:25
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr ""
"* **Attribuzione**---Devi riconoscere una menzione di paternità adeguata "
"(menzionando che"

#: lc-open-refine/LICENSE.md:26
msgid ""
"  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  http://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""
"il tuo lavoro deriva da lavoro protetto da Copyright © Software Carpentry e, dove possibile,\n"
"linkare a http://software-carpentry.org/), fornire un [link alla licenza][cc-by-human] e indicare\n"
"se sono state effettuate delle modifiche. Puoi fare ciò in qualsiasi maniera ragionevole possibile,\n"
"ma non con modalità tali da suggerire che il licenziante avalli te o il tuo utilizzo del materiale. "

#: lc-open-refine/LICENSE.md:33
msgid ""
"**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""
"**Divieto di restrizioni aggiuntive**---Non puoi applicare termini legali o misure tecnologiche che\n"
"impongano ad altri soggetti dei vincoli giuridici su quanto la licenza consente loro di fare."

#: lc-open-refine/LICENSE.md:37
msgid "Notices:"
msgstr "Note:"

# unordered list
#: lc-open-refine/LICENSE.md:39
msgid "* You do not have to comply with the license for elements of the"
msgstr ""
"*  Non sei tenuto a rispettare i termini della licenza per quelle componenti"
" del"

#: lc-open-refine/LICENSE.md:40
msgid ""
"  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""
" materiale che siano in pubblico dominio o nei casi in cui il tuo utilizzo sia consentito\n"
"da una eccezione o limitazione prevista dalla legge.\n"
"* Non sono fornite garanzie. La licenza può non conferirti tutte le autorizzazioni necessarie\n"
"per l'utilizzo che ti prefiggi. Ad esempio, diritti di terzi come i diritti all'immagine,alla riservatezza\n"
"e i diritti morali potrebbero restringere gli usi che ti prefiggi sul materiale."

# header
#: lc-open-refine/LICENSE.md:47
msgid "## Software"
msgstr "## Software"

#: lc-open-refine/LICENSE.md:49
msgid ""
"Except where otherwise noted, the example programs and other software\n"
"provided by Software, Data and Library Carpentry are made available under the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""

#: lc-open-refine/LICENSE.md:54
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"

#: lc-open-refine/LICENSE.md:62
msgid ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."

#: lc-open-refine/LICENSE.md:65
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."

# header
#: lc-open-refine/LICENSE.md:73
msgid "## Trademark"
msgstr "## Marchi"

#: lc-open-refine/LICENSE.md:75
msgid ""
"\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""
"\"Software Carpentry\" e \"Data Carpentry\" e i rispettivi loghi\n"
"sono marchi registrati di [Community Initiatives][CI]."

#: lc-open-refine/LICENSE.md:78
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/deed.it\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode.it\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"

# Front Matter
#: python-novice-gapminder/_episodes/01-run-quit.md:1
msgid ""
"---\n"
"title: \"Running and Quitting\"\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I run Python programs?\"\n"
"objectives:\n"
"- \"Launch the JupyterLab server.\" \n"
"- \"Create a new Python script.\" \n"
"- \"Create a Jupyter notebook.\"\n"
"- \"Shutdown the JupyterLab server.\"\n"
"- \"Understand the difference between a Python script and a Jupyter notebook.\"\n"
"- \"Create Markdown cells in a notebook.\"\n"
"- \"Create and run Python cells in a notebook.\"\n"
"keypoints:\n"
"- \"Python scripts are plain text files.\"\n"
"- \"Use the Jupyter Notebook for editing and running Python.\"\n"
"- \"The Notebook has Command and Edit modes.\"\n"
"- \"Use the keyboard and mouse to select and edit cells.\"\n"
"- \"The Notebook will turn Markdown into pretty-printed documentation.\"\n"
"- \"Markdown does most of what HTML does.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Lanciare e chiudere Python\"\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"Come lanciare un programma in Python?\"\n"
"objectives:\n"
"- \"Lanciare il server JupyterLab.\" \n"
"- \"Creare un nuovo script Python.\" \n"
"- \"Creare un Jupyter notebook.\"\n"
"- \"Spegnere il server JupyterLab.\"\n"
"- \"Capire la differenza tra un programma Python e un Jupyter notebook.\"\n"
"- \"Creare celle Markdown in un Jupyter notebook.\"\n"
"- \"Creare ed eseguire celle Python in un notebook.\"\n"
"keypoints:\n"
"- \"Gli script in Python sono file di testo semplice.\"\n"
"- \"Usare il Jupyter Notebook per scrivere ed eseguire codice Python.\"\n"
"- \"Il Notebook ha le modalità Comando e Modifica.\"\n"
"- \"Usare la tastiera e il mouse per selezionare e modificare celle.\"\n"
"- \"Il Notebook può convertire codice Markdown in una documentazione curata.\"\n"
"- \"Il Markdown è in grado di fare la maggior parte di ciò che si può fare con l'HTML.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:24
msgid "## Getting Started with JupyterLab"
msgstr "## Iniziare a usare JupyterLab"

#: python-novice-gapminder/_episodes/01-run-quit.md:26
msgid ""
"While many software developers will often use an integrated development environment (IDE) or a \n"
"text editor to create and edit their Python programs we will be using [JupyterLab][jupyterlab] \n"
"during this lesson. "
msgstr ""
"Molti sviluppatori di software usano un ambiente di sviluppo integrato\n"
"(IDE, integrated development environment) oppure un editor di testo per creare e modificare i loro programmi in Python.\n"
"In questa lezione, noi useremo [JupyterLab][jupyterlab]."

#: python-novice-gapminder/_episodes/01-run-quit.md:30
msgid ""
"JupyterLab is an application with a web-based user interface from [Project Jupyter][jupyter] that \n"
"enables one to work with documents and activities such as Jupyter notebooks, text editors, terminals,\n"
"and even custom components in a flexible, integrated, and extensible manner. JupyterLab requires a\n"
"reasonably up-to-date browser (ideally a current version of Chrome, Safari, or Firefox); Internet\n"
"Explorer versions 9 and below are *not* supported."
msgstr ""
"JupyterLab è un'applicazione con un'interfaccia utente basata sul browser web, creata dal [Project Jupyter][jupyter],\n"
"che ci permette di lavorare con documenti e strumenti come Jupyter notebook, editor di testo, terminali, e anche componenti personalizzate,\n"
"in modo flessibile, integrato, ed espandibile. JupyterLab richiede un browser relativamente aggiornato (se possibile, una versione recente di Chrome, Safari o Firefox);\n"
"Internet Explorer 9 e precedenti *non* sono supportati."

#: python-novice-gapminder/_episodes/01-run-quit.md:36
msgid ""
"JupyterLab is included as part of the Anaconda Python distribution. If you have not already \n"
"installed the Anaconda Python distribution, see [the setup instructions]({{ page.root }}/setup/) \n"
"for installation instructions."
msgstr ""
"JupyterLab è già incluso nella distribuzione di Python chiamata Anaconda. Se non hai già installato la\n"
"distribuzione Anaconda Python, leggi le [istruzioni di setup] ({{ page.root }}/setup/) per sapere come installarla."

#: python-novice-gapminder/_episodes/01-run-quit.md:40
msgid ""
"Even though JupyterLab is a web-based application, JupyterLab runs locally on your machine and \n"
"does not require an internet connection.\n"
"*   The JupyterLab server sends messages to your web browser.\n"
"*   The JupyterLab server does the work and the web browser renders the result.\n"
"*   You will type code into the browser and see the result when the web page talks to the \n"
"    JupyterLab server."
msgstr ""
"Sebbene JupyterLab sia un'applicazione a cui si accede dal browser web, JupyterLab è un software\n"
"che gira localmente, sul tuo calcolatore, e non richiede una connessione a internet.\n"
"* Il server JupyterLab invia comunicazioni al tuo browser web.\n"
"* Il server JupyterLab esegue il lavoro, e il browser visualizza il risultato.\n"
"* Quando scriverai codice nel browser, vedrai il risultato non appena la pagina web comunica con il server JupyterLab."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:47
msgid "> ## JupyterLab? What about Jupyter notebooks?"
msgstr "> ## JupyterLab? E allora i Jupyter notebook cosa sono?"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:48
#: python-novice-gapminder/_episodes/01-run-quit.md:52
#: python-novice-gapminder/_episodes/07-reading-tabular.md:368
#: python-novice-gapminder/_episodes/08-data-frames.md:370
#: python-novice-gapminder/_episodes/09-plotting.md:130
#: python-novice-gapminder/_episodes/09-plotting.md:278
#: python-novice-gapminder/_episodes/09-plotting.md:288
msgid "> "
msgstr "> "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:49
msgid ""
"> JupyterLab is the [next stage in the evolution of the Jupyter "
"Notebook](https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html#overview)."
" If you have prior "
msgstr ""
"> JupyterLab è [lo stadio evolutivo successivo al Jupyter "
"Notebook](https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html#overview)."
" Se hai già avuto"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:50
msgid ""
"> experience working with Jupyter notebooks, then you will have a a good "
"idea of what to expect "
msgstr ""
"> occasione di lavorare con il Jupyter notebook, allora hai già un'idea di "
"cosa aspettarti"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:51
msgid "> from JupyterLab. "
msgstr "> da JupyterLab. "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:53
msgid ""
"> Experienced users of Jupyter notebooks interested in a more detailed "
"discussion of the similarities and differences"
msgstr ""
"> Chi ha già una buona conoscenza del Jupyter notebook ed è interessato in "
"una discussione più approfondita sulle somiglianze e differenze"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:54
msgid ""
"> between the JupyterLab and Jupyter notebook user interfaces can find more "
"information in the "
msgstr ""
"> tra le interfacce utente di JupyterLab e del Jupyter notebook, può trovare"
" maggiori informazioni nella"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:55
msgid "> [JupyterLab user interface documentation][jupyterlab-ui]."
msgstr "> [documentazione dell'interfaccia utente JupyterLab][jupyterlab-ui]."

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:56
#: python-novice-gapminder/_episodes/01-run-quit.md:182
#: python-novice-gapminder/_episodes/01-run-quit.md:226
#: python-novice-gapminder/_episodes/02-variables.md:106
#: python-novice-gapminder/_episodes/06-libraries.md:35
#: python-novice-gapminder/_episodes/07-reading-tabular.md:72
#: python-novice-gapminder/_episodes/09-plotting.md:153
#: python-novice-gapminder/_episodes/09-plotting.md:312
#: python-novice-gapminder/_episodes/09-plotting.md:320
#: python-novice-gapminder/_episodes/13-conditionals.md:251
#: python-novice-gapminder/_episodes/13-conditionals.md:427
#: python-novice-gapminder/_episodes/18-style.md:99
#: python-novice-gapminder/_extras/design.md:14
#: python-novice-gapminder/index.md:21
msgid "{: .callout}"
msgstr "{: .callout}"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:58
msgid "## Starting JupyterLab"
msgstr "## Lanciare JupyterLab"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:60
msgid "### Mac OS X"
msgstr "### Mac OS X"

#: python-novice-gapminder/_episodes/01-run-quit.md:61
msgid ""
"To start the JupyterLab server you will need to access the command line through the Terminal. \n"
"There are two ways to open Terminal on Mac."
msgstr ""
"Per far partire il server JupyterLab, è necessario avere accesso alla linea di comando, attraverso il Terminale.\n"
"Ci sono due modi per aprire il Terminale sul Mac."

# ordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:64
msgid ""
"1. In your Applications folder, open Utilities and double-click on Terminal"
msgstr ""
"1. Nella cartella Applicazioni, apri Utilities/Utilità, e fai doppio clic su"
" Terminale."

# ordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:65
msgid ""
"2. Press <kbd>Command</kbd> + <kbd>spacebar</kbd> to launch Spotlight. Type "
"`Terminal` and then "
msgstr ""
"2. Press <kbd>Comando</kbd> + <kbd>barra spaziatrice</kbd> per aprire "
"Spotlight. Digita `Terminale` e"

#: python-novice-gapminder/_episodes/01-run-quit.md:66
msgid "double-click the search result or hit <kbd>Enter</kbd>"
msgstr ""
"e fai doppio clic sul risultato della ricerca, o premi <kbd>Invio</kbd>"

#: python-novice-gapminder/_episodes/01-run-quit.md:68
msgid ""
"After you have launched Terminal, type the command to launch the JupyterLab "
"server."
msgstr ""
"Una volta aperto il terminale, scrivi il comando che fa partire il server "
"JupyterLab."

# code block
#: python-novice-gapminder/_episodes/01-run-quit.md:70
#: python-novice-gapminder/_episodes/01-run-quit.md:82
#: python-novice-gapminder/_episodes/01-run-quit.md:505
msgid ""
"~~~\n"
"$ jupyter lab\n"
"~~~"
msgstr ""
"~~~\n"
"$ jupyter lab\n"
"~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:73
#: python-novice-gapminder/_episodes/01-run-quit.md:85
msgid "{: .bash}"
msgstr "{: .bash}"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:75
msgid "### Windows Users"
msgstr "### Per utenti Windows"

#: python-novice-gapminder/_episodes/01-run-quit.md:76
msgid ""
"To start the JupyterLab server you will need to access the open Anaconda "
"Prompt."
msgstr ""
"Per far partire il server JupyterLab, è necessario aprire Anaconda Prompt."

#: python-novice-gapminder/_episodes/01-run-quit.md:78
msgid ""
"Press <kbd>Windows Logo Key</kbd> and search for `Anaconda Prompt`, click "
"the result or press enter."
msgstr ""
"Premi <kbd>Tasto Windows</kbd> e cerca `Anaconda Prompt`, clicca sul "
"risultato o premi Invio."

#: python-novice-gapminder/_episodes/01-run-quit.md:80
msgid "After you have launched the Anaconda Prompt, type the command:"
msgstr "Dopo aver aperto Anaconda Prompt, scrivi il comando:"

#: python-novice-gapminder/_episodes/01-run-quit.md:87
msgid ""
"Below is a screenshot of a similar JupyterLab landing page to the one that should open in your \n"
"default web browser after starting the JupyterLab server on wither Mac OS X or Windows."
msgstr ""
"Qui sotto, uno screenshot della pagina iniziale di JupyterLab, simile a quella che dovrebbe aprirsi sul\n"
"tuo browser predefinito dopo aver lanciato il server JupyterLab, sia su Mac OS X sia su Windows."

#: python-novice-gapminder/_episodes/01-run-quit.md:90
msgid ""
"<p align='center'>\n"
"  <img alt=\"JupyterLab landing page\" src=\"../fig/0_jupyterlab_landing_page.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"  <img alt=\"JupyterLab landing page\" src=\"../fig/0_jupyterlab_landing_page.png\" width=\"750\"/>\n"
"</p>"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:94
msgid "## The JupyterLab Interface"
msgstr "## L'interfaccia JupyterLab"

#: python-novice-gapminder/_episodes/01-run-quit.md:96
msgid ""
"JupyterLab has many features found in traditional integrated development environments (IDEs) but \n"
"is focused on providing flexible building blocks for interactive, exploratory computing."
msgstr ""
"JupyterLab ha molte caratteristiche simili a quelle degli ambienti di sviluppo integrato (IDE) più tradizionali,\n"
"ma è specializzato nel costruire moduli adattabili, per programmi interattivi ed esplorativi."

#: python-novice-gapminder/_episodes/01-run-quit.md:99
msgid ""
"The [JupyterLab Interface](https://jupyterlab.readthedocs.io/en/stable/user/interface.html) \n"
"consists of the Menu Bar, a collapsable Left Side Bar, and the Main Work Area which contains tabs \n"
"of documents and activities."
msgstr ""
"L'[interfaccia JupyterLab](https://jupyterlab.readthedocs.io/en/stable/user/interface.html) consiste in una\n"
"barra del menù, una barra laterale sinistra (che può essere nascosta), e nell'area di lavoro principale, che\n"
"contiene diverse schede con documenti e attività. "

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:103
msgid "### Menu Bar"
msgstr "### Barra del menù"

#: python-novice-gapminder/_episodes/01-run-quit.md:105
msgid ""
"The Menu Bar at the top of JupyterLab has the top-level menus that expose various actions \n"
"available in JupyterLab along with their keyboard shortcuts (where applicable). The following \n"
"menus are included by default."
msgstr ""
"La barra del menù nella parte alta di JupyterLab ha menù principali che mostrano le varie azioni\n"
"disponibili in JupyterLab, insieme alle loro scorciatoie da tastiera (laddove esistono). I menù\n"
"seguenti sono predefiniti."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:109
msgid ""
"*   **File:** Actions related to files and directories such as *New*, "
"*Open*, *Close*, *Save*, etc. The *File* menu also includes the *Quit* "
"action used to shutdown the JupyterLab server."
msgstr ""
"*   **File:** Azioni relative ai file e alle cartelle, come *New* (nuovo), "
"*Open* (apri), *Close* (chiudi), *Save* (salva), ecc. Il menù *File* "
"contiene anche l'azione *Quit* (esci), usata per spegnere il server "
"JupyterLab."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:110
msgid ""
"*   **Edit:** Actions related to editing documents and other activities such"
" as *Undo*, *Cut*, *Copy*, *Paste*, etc."
msgstr ""
"*   **Edit:** Azioni relative alla modifica dei documenti, e altre simili, "
"come *Undo* (annulla), *Cut* (taglia), *Copy* (copia), *Paste* (incolla), "
"ecc."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:111
msgid "*   **View:** Actions that alter the appearance of JupyterLab."
msgstr "*   **View** (vista): azioni che modificano l'aspetto di JupyterLab. "

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:112
msgid ""
"*   **Run:** Actions for running code in different activities such as "
"notebooks and code consoles (discussed below)."
msgstr ""
"*   **Run:** Azioni per eseguire il codice nelle diverse \"attività\", come "
"i notebook e le console (spiegate più sotto)."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:113
msgid ""
"*   **Kernel:** Actions for managing kernels which, as mentioned above, are "
"separate processes for running code."
msgstr ""
"*   **Kernel:** Azioni per la gestione dei kernel, che, come detto sopra, "
"sono processi tra loro separati che eseguono il codice."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:114
msgid ""
"*   **Tabs:** A list of the open documents and activities in the dock panel."
msgstr ""
"*   **Tabs:** La lista dei documenti e delle attività aperte nel pannello "
"dock."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:115
msgid ""
"*   **Settings:** Common JupyterLab settings can be configured using this "
"menu. There is also an *Advanced Settings Editor* option in the dropdown "
"menu that provides more fine-grained control of JupyterLab settings and "
"configuration options."
msgstr ""
"*   **Settings:** le impostazioni più comuni di JupyterLab possono essere "
"configurate usando questo menù. C'è anche un'opzione \"Advanced Settings "
"Editor\" nel menù a tendina, che serve per un controllo più preciso delle "
"impostazioni e configurazioni di JupyterLab."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:116
msgid "*   **Help:** A list of JupyterLab and kernel help links."
msgstr "*   **Help:** Una lista di link di aiuto su JupyterLab e sui kernel."

#: python-novice-gapminder/_episodes/01-run-quit.md:118
msgid "A screenshot of the default Menu Bar is provided below."
msgstr "Qui sotto, uno screenshot della barra dei menù predefinita."

#: python-novice-gapminder/_episodes/01-run-quit.md:120
msgid ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Menu Bar\" src=\"../fig/0_jupyterlab_menu_bar.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Menu Bar\" src=\"../fig/0_jupyterlab_menu_bar.png\" width=\"750\"/>\n"
"</p>"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:124
msgid "### Left Sidebar"
msgstr "### Barra laterale sinistra"

#: python-novice-gapminder/_episodes/01-run-quit.md:126
msgid ""
"The left sidebar contains a number of commonly-used tabs, such as a file browser (showing the \n"
"contents of the directory in which the JupyterLab server was launched!), a list of running kernels \n"
"and terminals, the command palette, and a list of open tabs in the main work area. A screenshot of \n"
"the default Left Side Bar is provided below."
msgstr ""
"La barra laterale sinistra contiene diverse schede usate di frequente, come il navigfatore dei file\n"
"(che mostra i contenuti della cartella in cui il server JupyterLab è stato lanciato), una lista dei kernel e\n"
"dei terminali attualmente attivi, la palette dei comandi, e una lista delle schede aperte nell'area di lavoro\n"
"principale. Qui sotto è mostrato uno screenshot della barra laterale sinistra predefinita."

#: python-novice-gapminder/_episodes/01-run-quit.md:131
msgid ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Left Side Bar\" src=\"../fig/0_jupyterlab_left_side_bar.png\" width=\"250\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Left Side Bar\" src=\"../fig/0_jupyterlab_left_side_bar.png\" width=\"250\"/>\n"
"</p>"

#: python-novice-gapminder/_episodes/01-run-quit.md:135
msgid ""
"The left sidebar can be collapsed or expanded by selecting “Show Left Sidebar” in the View menu or \n"
"by clicking on the active sidebar tab."
msgstr ""
"La barra laterale sinistra può essere nascosta o mostrata selezionando \"Show Left Sidebar\" nel menù View\n"
"o cliccando sull'icona della scheda attiva al momento."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:138
msgid "### Main Work Area"
msgstr "### Area di lavoro principale"

#: python-novice-gapminder/_episodes/01-run-quit.md:140
msgid ""
"The main work area in JupyterLab enables you to arrange documents (notebooks, text files, etc.) \n"
"and other activities (terminals, code consoles, etc.) into panels of tabs that can be resized or \n"
"subdivided. A screenshot of the default Menu Bar is provided below."
msgstr ""
"L'area di lavoro principale di JupyterLab consente di gestire i documenti (notebook, file di testo, ecc.)\n"
"e le altre attività (i terminali, le console del codice, ecc.), sistemandoli in pannelli di schede che possono\n"
"essere ridimensionati o suddivisi. Qui sotto è mostrato uno screenshot della barra del menù predefinita."

#: python-novice-gapminder/_episodes/01-run-quit.md:144
msgid ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Main Work Area\" src=\"../fig/0_jupyterlab_main_work_area.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Main Work Area\" src=\"../fig/0_jupyterlab_main_work_area.png\" width=\"750\"/>\n"
"</p>"

#: python-novice-gapminder/_episodes/01-run-quit.md:148
msgid ""
"Drag a tab to the center of a tab panel to move the tab to the panel. Subdivide a tab panel by \n"
"dragging a tab to the left, right, top, or bottom of the panel. The work area has a single current \n"
"activity. The tab for the current activity is marked with a colored top border (blue by default)."
msgstr ""
"Per spostare una scheda in un pannello, trascina la scheda verso il centro di un pannello di schede.\n"
"Per suddividere un pannello di schede, trascina una scheda alla sinistra, alla destra, o sopra o sotto al\n"
"pannello. L'area di lavoro ha sempre una sola attività corrente. La scheda corrispondente a questa attività\n"
"è identificato da un bordo superiore colorato (blu è il colore predefinito)."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:152
msgid "## Creating a Python script"
msgstr "## Creare uno script in Python"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:154
msgid ""
"*   To start writing a new Python program click the Text File icon under the"
" *Other* header in the Launcher tab of the Main Work Area."
msgstr ""
"*   Per iniziare a scrivere un nuovo programma in Python, clicca sull'icona "
"Text File (file di testo) sotto l'intestazione *Other* (altro), nella scheda"
" Launcher dell'area di lavoro principale."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:155
msgid ""
"    *   You can also create a new plain text file by selecting the *New -> "
"Text File* from the *File* menu in the Menu Bar."
msgstr ""
"    *   In alternativa, si può anche creare un nuovo file di testo "
"selezionando *New -> Text File* dal menù  *File* nella barra dei menù."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:156
msgid ""
"*   To convert this plain text file to a Python program, select the *Save "
"File As* action from the *File* menu in the Menu Bar and give your new text "
"file a name that ends with the `.py` extension."
msgstr ""
"*   Per convertire questo file di testo semplice in un programma Python, "
"seleziona l'azione *Save File As* (salva come) dal menù *File* nella barra "
"dei menù, e dai al tuo nuovo file di testo un nome che termina con "
"l'estensione `.py`."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:157
msgid ""
"    *   The `.py` extension lets everyone (including the operating system) "
"know that this text file is a Python program."
msgstr ""
"    *   L'estensione `.py` rende noto a tutti (incluso il sistema operativo)"
" che questo file di testo è un programma in Python."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:158
msgid "    *   This is convention, not a requirement."
msgstr "    *   Questa non è una condizione necessaria, ma una convenzione."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:160
msgid "## Creating a Jupyter Notebook"
msgstr "## Creare un Jupyter Notebook"

#: python-novice-gapminder/_episodes/01-run-quit.md:162
msgid ""
"To open a new notebook click the Python 3 icon under the *Notebook* header in the Launcher tab in \n"
"the main work area. You can also create a new notebook by selecting *New -> Notebook* from the *File* menu in the Menu Bar."
msgstr ""
"Per aprire un nuovo notebook, clicca sull'icona Python 3 sotto l'intestazione *Notebook* della scheda\n"
"Launcher nell'area di lavoro principale. Si può creare un notebook anche selezionando *New -> Notebook* dal menù *File* nella barra dei menù."

#: python-novice-gapminder/_episodes/01-run-quit.md:165
msgid "Additional notes on Jupyter notebooks."
msgstr "Altre informazioni sui Jupyter notebook."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:167
msgid ""
"  *   Notebook files have the extension `.ipynb` to distinguish them from "
"plain-text Python programs."
msgstr ""
"  *   I notebook sono file con l'estensione `.ipynb`, in modo che si possano"
" distinguere dai programmi Python in formato testo semplice."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:168
msgid ""
"  *   Notebooks can be exported as Python scripts that can be run from the "
"command line."
msgstr ""
"  *   I notebook possono essere esportati in script Python che possono poi "
"essere eseguiti da linea di comando."

#: python-novice-gapminder/_episodes/01-run-quit.md:170
msgid ""
"Below is a screenshot of a Jupyter notebook running inside JupyterLab. If you are interested in \n"
"more details, then see the [official notebook documentation][jupyterlab-notebook-docs]."
msgstr ""
"Qui sotto, è mostrato uno screenshot di un Jupyter notebook attivo all'interno di JupyterLab. Se ti\n"
"interessano altri dettagli, vedi la [documentazione ufficiale dei notebook][jupyterlab-notebook-docs]."

#: python-novice-gapminder/_episodes/01-run-quit.md:173
msgid ""
"<p align='center'>\n"
"    <img alt=\"Example Jupyter Notebook\" src=\"../fig/0_jupyterlab_notebook_screenshot.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"Example Jupyter Notebook\" src=\"../fig/0_jupyterlab_notebook_screenshot.png\" width=\"750\"/>\n"
"</p>"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:177
msgid "> ## How It's Stored"
msgstr "> ## Come funziona il formato notebook"

#: python-novice-gapminder/_episodes/01-run-quit.md:178
msgid ""
">\n"
"> *   The notebook file is stored in a format called JSON.\n"
"> *   Just like a webpage, what's saved looks different from what you see in your browser.\n"
"> *   But this format allows Jupyter to mix source code, text, and images, all in one file."
msgstr ""
">\n"
"> *   I file notebook sono salvati in un formato chiamato JSON.\n"
"> *   Proprio come per una pagina web, ciò che è salvato ha un aspetto diverso da ciò che è mostrato nel browser.\n"
"> *   Tuttavia, questo formato permette a Jupyter di mescolare codice sorgente, testo e immagini in uno stesso file."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:184
msgid "> ## Arranging Documents into Panels of Tabs"
msgstr "> ## Disporre documenti in pannelli di schede"

#: python-novice-gapminder/_episodes/01-run-quit.md:185
msgid ""
">\n"
"> In the JupyterLab Main Work Area you can arrange documents into panels of tabs. Here is an \n"
"> example from the [official documentation][jupyterlab].\n"
"> \n"
"> <p align='center'>\n"
">    <img alt=\"Multi-panel JupyterLab\" src=\"../fig/0_multipanel_jupyterlab_screenshot.png\" width=\"750\"/>\n"
"> </p>\n"
">\n"
"> First, create a text file, Python console, and terminal window and arrange then into three \n"
"> panels in the main work area. Next, create a notebook, terminal window, and text file and \n"
"> arrange then into three panels in the main work area. Finally, create your own combination of \n"
"> panels and tabs. What combination of panels and tabs do you think will be most useful for your \n"
"> workflow?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > After creating the necessary tabs, you can drag one of the tabs to the center of a panel to \n"
"> > move the tab to the panel; next you can subdivide a tab panel by dragging a tab to the left, \n"
"> > right, top, or bottom of the panel."
msgstr ""
">\n"
"> Nell'area di lavoro principale di JupyterLab, si possono disporre i documenti in pannelli di schede.\n"
"> Ecco un esempio dalla [documentazione ufficiale][jupyterlab].\n"
"> \n"
"> <p align='center'>\n"
">    <img alt=\"Multi-panel JupyterLab\" src=\"../fig/0_multipanel_jupyterlab_screenshot.png\" width=\"750\"/>\n"
"> </p>\n"
">\n"
"> Innanzitutto, crea un file di testo, una console Python e una finestra di terminale, e sistemale in tre\n"
"> pannelli nell'area di lavoro principale. Poi, crea un notebook, una finestra di terminale e un file di\n"
"> testo, e sistemali in tre pannelli nell'area di lavoro principale. Infine, crea una combinazione a scelta\n"
"> di pannelli e schede. Qual è la combinazione di pannelli e schede che pensi ti sarà più utile per il\n"
"> tuo flusso di lavoro?\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > Dopo aver creato le schede necessarie, puoi trascinarne una al centro di un pannello per spostare\n"
"> > la scheda nel pannello; poi, puoi suddividere un pannello trascinando una scheda verso sinistra,\n"
"> > verso destra, verso l'alto o verso il basso all'interno del pannello."

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:204
#: python-novice-gapminder/_episodes/01-run-quit.md:255
#: python-novice-gapminder/_episodes/01-run-quit.md:419
#: python-novice-gapminder/_episodes/01-run-quit.md:441
#: python-novice-gapminder/_episodes/01-run-quit.md:471
#: python-novice-gapminder/_episodes/01-run-quit.md:497
#: python-novice-gapminder/_episodes/02-variables.md:295
#: python-novice-gapminder/_episodes/02-variables.md:313
#: python-novice-gapminder/_episodes/02-variables.md:332
#: python-novice-gapminder/_episodes/02-variables.md:352
#: python-novice-gapminder/_episodes/03-types-conversion.md:227
#: python-novice-gapminder/_episodes/03-types-conversion.md:248
#: python-novice-gapminder/_episodes/03-types-conversion.md:273
#: python-novice-gapminder/_episodes/03-types-conversion.md:327
#: python-novice-gapminder/_episodes/03-types-conversion.md:398
#: python-novice-gapminder/_episodes/03-types-conversion.md:423
#: python-novice-gapminder/_episodes/03-types-conversion.md:460
#: python-novice-gapminder/_episodes/04-built-in.md:258
#: python-novice-gapminder/_episodes/04-built-in.md:311
#: python-novice-gapminder/_episodes/04-built-in.md:323
#: python-novice-gapminder/_episodes/04-built-in.md:336
#: python-novice-gapminder/_episodes/06-libraries.md:149
#: python-novice-gapminder/_episodes/06-libraries.md:206
#: python-novice-gapminder/_episodes/06-libraries.md:237
#: python-novice-gapminder/_episodes/06-libraries.md:255
#: python-novice-gapminder/_episodes/06-libraries.md:294
#: python-novice-gapminder/_episodes/06-libraries.md:326
#: python-novice-gapminder/_episodes/06-libraries.md:356
#: python-novice-gapminder/_episodes/06-libraries.md:377
#: python-novice-gapminder/_episodes/07-reading-tabular.md:240
#: python-novice-gapminder/_episodes/07-reading-tabular.md:335
#: python-novice-gapminder/_episodes/07-reading-tabular.md:364
#: python-novice-gapminder/_episodes/07-reading-tabular.md:387
#: python-novice-gapminder/_episodes/08-data-frames.md:355
#: python-novice-gapminder/_episodes/08-data-frames.md:393
#: python-novice-gapminder/_episodes/08-data-frames.md:449
#: python-novice-gapminder/_episodes/08-data-frames.md:470
#: python-novice-gapminder/_episodes/08-data-frames.md:510
#: python-novice-gapminder/_episodes/08-data-frames.md:557
#: python-novice-gapminder/_episodes/09-plotting.md:199
#: python-novice-gapminder/_episodes/09-plotting.md:221
#: python-novice-gapminder/_episodes/09-plotting.md:241
#: python-novice-gapminder/_episodes/09-plotting.md:274
#: python-novice-gapminder/_episodes/11-lists.md:235
#: python-novice-gapminder/_episodes/11-lists.md:248
#: python-novice-gapminder/_episodes/11-lists.md:274
#: python-novice-gapminder/_episodes/11-lists.md:303
#: python-novice-gapminder/_episodes/11-lists.md:332
#: python-novice-gapminder/_episodes/11-lists.md:352
#: python-novice-gapminder/_episodes/11-lists.md:390
#: python-novice-gapminder/_episodes/11-lists.md:431
#: python-novice-gapminder/_episodes/12-for-loops.md:186
#: python-novice-gapminder/_episodes/12-for-loops.md:211
#: python-novice-gapminder/_episodes/12-for-loops.md:236
#: python-novice-gapminder/_episodes/12-for-loops.md:260
#: python-novice-gapminder/_episodes/12-for-loops.md:278
#: python-novice-gapminder/_episodes/12-for-loops.md:298
#: python-novice-gapminder/_episodes/12-for-loops.md:313
#: python-novice-gapminder/_episodes/12-for-loops.md:343
#: python-novice-gapminder/_episodes/12-for-loops.md:381
#: python-novice-gapminder/_episodes/12-for-loops.md:403
#: python-novice-gapminder/_episodes/13-conditionals.md:273
#: python-novice-gapminder/_episodes/13-conditionals.md:311
#: python-novice-gapminder/_episodes/13-conditionals.md:338
#: python-novice-gapminder/_episodes/13-conditionals.md:375
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:122
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:154
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:184
#: python-novice-gapminder/_episodes/16-writing-functions.md:172
#: python-novice-gapminder/_episodes/16-writing-functions.md:198
#: python-novice-gapminder/_episodes/16-writing-functions.md:238
#: python-novice-gapminder/_episodes/16-writing-functions.md:265
#: python-novice-gapminder/_episodes/16-writing-functions.md:300
#: python-novice-gapminder/_episodes/16-writing-functions.md:331
#: python-novice-gapminder/_episodes/16-writing-functions.md:402
#: python-novice-gapminder/_episodes/16-writing-functions.md:497
#: python-novice-gapminder/_episodes/16-writing-functions.md:543
#: python-novice-gapminder/_episodes/18-style.md:153
#: python-novice-gapminder/_episodes/18-style.md:232
msgid "> {: .solution}"
msgstr "> {: .solution}"

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:205
#: python-novice-gapminder/_episodes/01-run-quit.md:256
#: python-novice-gapminder/_episodes/01-run-quit.md:420
#: python-novice-gapminder/_episodes/01-run-quit.md:442
#: python-novice-gapminder/_episodes/01-run-quit.md:472
#: python-novice-gapminder/_episodes/01-run-quit.md:498
#: python-novice-gapminder/_episodes/01-run-quit.md:512
#: python-novice-gapminder/_episodes/02-variables.md:235
#: python-novice-gapminder/_episodes/02-variables.md:262
#: python-novice-gapminder/_episodes/02-variables.md:296
#: python-novice-gapminder/_episodes/02-variables.md:314
#: python-novice-gapminder/_episodes/02-variables.md:333
#: python-novice-gapminder/_episodes/02-variables.md:353
#: python-novice-gapminder/_episodes/03-types-conversion.md:228
#: python-novice-gapminder/_episodes/03-types-conversion.md:249
#: python-novice-gapminder/_episodes/03-types-conversion.md:274
#: python-novice-gapminder/_episodes/03-types-conversion.md:328
#: python-novice-gapminder/_episodes/03-types-conversion.md:399
#: python-novice-gapminder/_episodes/03-types-conversion.md:424
#: python-novice-gapminder/_episodes/03-types-conversion.md:461
#: python-novice-gapminder/_episodes/04-built-in.md:259
#: python-novice-gapminder/_episodes/04-built-in.md:312
#: python-novice-gapminder/_episodes/04-built-in.md:324
#: python-novice-gapminder/_episodes/04-built-in.md:337
#: python-novice-gapminder/_episodes/06-libraries.md:150
#: python-novice-gapminder/_episodes/06-libraries.md:207
#: python-novice-gapminder/_episodes/06-libraries.md:238
#: python-novice-gapminder/_episodes/06-libraries.md:256
#: python-novice-gapminder/_episodes/06-libraries.md:295
#: python-novice-gapminder/_episodes/06-libraries.md:327
#: python-novice-gapminder/_episodes/06-libraries.md:357
#: python-novice-gapminder/_episodes/06-libraries.md:378
#: python-novice-gapminder/_episodes/07-reading-tabular.md:241
#: python-novice-gapminder/_episodes/07-reading-tabular.md:336
#: python-novice-gapminder/_episodes/07-reading-tabular.md:365
#: python-novice-gapminder/_episodes/07-reading-tabular.md:388
#: python-novice-gapminder/_episodes/08-data-frames.md:342
#: python-novice-gapminder/_episodes/08-data-frames.md:356
#: python-novice-gapminder/_episodes/08-data-frames.md:369
#: python-novice-gapminder/_episodes/08-data-frames.md:394
#: python-novice-gapminder/_episodes/08-data-frames.md:409
#: python-novice-gapminder/_episodes/08-data-frames.md:450
#: python-novice-gapminder/_episodes/08-data-frames.md:463
#: python-novice-gapminder/_episodes/08-data-frames.md:471
#: python-novice-gapminder/_episodes/08-data-frames.md:483
#: python-novice-gapminder/_episodes/08-data-frames.md:511
#: python-novice-gapminder/_episodes/08-data-frames.md:549
#: python-novice-gapminder/_episodes/08-data-frames.md:558
#: python-novice-gapminder/_episodes/08-data-frames.md:567
#: python-novice-gapminder/_episodes/09-plotting.md:200
#: python-novice-gapminder/_episodes/09-plotting.md:242
#: python-novice-gapminder/_episodes/09-plotting.md:275
#: python-novice-gapminder/_episodes/11-lists.md:236
#: python-novice-gapminder/_episodes/11-lists.md:249
#: python-novice-gapminder/_episodes/11-lists.md:275
#: python-novice-gapminder/_episodes/11-lists.md:304
#: python-novice-gapminder/_episodes/11-lists.md:333
#: python-novice-gapminder/_episodes/11-lists.md:353
#: python-novice-gapminder/_episodes/11-lists.md:391
#: python-novice-gapminder/_episodes/11-lists.md:432
#: python-novice-gapminder/_episodes/12-for-loops.md:187
#: python-novice-gapminder/_episodes/12-for-loops.md:212
#: python-novice-gapminder/_episodes/12-for-loops.md:237
#: python-novice-gapminder/_episodes/12-for-loops.md:314
#: python-novice-gapminder/_episodes/12-for-loops.md:344
#: python-novice-gapminder/_episodes/12-for-loops.md:382
#: python-novice-gapminder/_episodes/12-for-loops.md:404
#: python-novice-gapminder/_episodes/13-conditionals.md:274
#: python-novice-gapminder/_episodes/13-conditionals.md:312
#: python-novice-gapminder/_episodes/13-conditionals.md:339
#: python-novice-gapminder/_episodes/13-conditionals.md:376
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:123
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:155
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:185
#: python-novice-gapminder/_episodes/16-writing-functions.md:173
#: python-novice-gapminder/_episodes/16-writing-functions.md:199
#: python-novice-gapminder/_episodes/16-writing-functions.md:239
#: python-novice-gapminder/_episodes/16-writing-functions.md:266
#: python-novice-gapminder/_episodes/16-writing-functions.md:301
#: python-novice-gapminder/_episodes/16-writing-functions.md:332
#: python-novice-gapminder/_episodes/16-writing-functions.md:403
#: python-novice-gapminder/_episodes/16-writing-functions.md:498
#: python-novice-gapminder/_episodes/16-writing-functions.md:544
#: python-novice-gapminder/_episodes/17-scope.md:74
#: python-novice-gapminder/_episodes/17-scope.md:109
#: python-novice-gapminder/_episodes/18-style.md:126
#: python-novice-gapminder/_episodes/18-style.md:154
#: python-novice-gapminder/_episodes/18-style.md:233
msgid "{: .challenge}"
msgstr "{: .challenge}"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:207
msgid "## Use the Jupyter Notebook for editing and running Python."
msgstr "## Usare il Jupyter Notebook per scrivere e eseguire codice Python."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:209
msgid ""
"*   While it's common to write Python scripts using a text editor, we are "
"going to use the [Jupyter Notebook][jupyter] for the remainder of this "
"workshop."
msgstr ""
"*   Sebbene sia comune scrivere script in Python usando un editor di testo, "
"per questo corso useremo [Jupyter Notebook][jupyter] da qui in avanti."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:210
msgid "*   This has several advantages:"
msgstr "*   Ci sono diversi vantaggi:"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:211
msgid "    *   You can easily type, edit, and copy and paste blocks of code."
msgstr ""
"* È facile digitare, modificare, copiare e incollare blocchi di codice."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:212
msgid ""
"    *   Tab complete allows you to easily access the names of things you are"
" using"
msgstr ""
"* L'autocompletamento (premendo il tasto *tab*) permette di visualizzare "
"facilmente i nomi degli elementi in uso"

#: python-novice-gapminder/_episodes/01-run-quit.md:213
msgid ""
"        and learn more about them.\n"
"    *   It allows you to annotate your code with links, different sized text, bullets, etc.\n"
"        to make it more accessible to you and your collaborators.\n"
"    *   It allows you to display figures next to the code that produces them\n"
"        to tell a complete story of the analysis.\n"
"*   Each notebook contains one or more cells that contain code, text, or images."
msgstr ""
"        e di saperne di più.\n"
"    *   Permette di annotare il codice con link, testo di dimensioni diverse, elenchi puntati, ecc.\n"
"        per renderlo più facilmente comprensibile a te e ai tuoi collaboratori.\n"
"    *   Ti permette di mostrare le figure insieme al codice che le genera,\n"
"        così da dare una narrazione completa delle tue analisi.\n"
"*   Ogni notebook contiene una o più celle con codice, testo o immagini."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:220
msgid "> ## Code vs. Text"
msgstr "> ## Distinguere codice e testo"

#: python-novice-gapminder/_episodes/01-run-quit.md:221
msgid ""
">\n"
"> Jupyter mixes code and text in different types of blocks, called cells. We often use the term\n"
"> \"code\" to mean \"the source code of software written in a language such as Python\".\n"
"> A \"code cell\" in a Notebook is a cell that contains software;\n"
"> a \"text cell\" is one that contains ordinary prose written for human beings."
msgstr ""
">\n"
"> Jupyter mescola codice e testo in blocchi di tipo diverso, chiamate celle. In genere, usiamo il termine\n"
"> \"codice\" nel senso di \"codice sorgente di un software, scritto in un linguaggio come Python\".\n"
"> Una \"cella di codice\" (\"code cell\") in un Notebook è una cella che contiene software;\n"
"> una \"cella di testo\" (\"text cell\"), al contrario, contiene prosa ordinaria, scritta per essere letta da umani."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:228
msgid "## The Notebook has Command and Edit modes."
msgstr "## Il Notebook ha le modalità Comando e Modifica."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:230
msgid ""
"*   If you press <kbd>Esc</kbd> and <kbd>Return</kbd> alternately, the outer"
" border of your code cell will change from gray to blue."
msgstr ""
"*   Premendo <kbd>Esc</kbd> e <kbd>Invio</kbd> in alternanza, il bordo "
"esterno di una cella di codice cambia da grigio a blu."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:231
msgid ""
"*   These are the **Command** (gray) and **Edit** (blue) modes of your "
"notebook."
msgstr ""
"*   Queste sono le modalità **Comando** (grigio) e **Modifica** (blu) del "
"notebook."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:232
msgid ""
"*   Command mode allows you to edit notebook-level features, and Edit mode "
"changes the content of cells."
msgstr ""
"*   La modalità Comando consente di agire su proprietà globali del notebook,"
" mentre la modalità Modifica cambia i contenuti della cella."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:233
msgid "*   When in Command mode (esc/gray),"
msgstr "*   Quando in modalità Comando (esc/grigio),"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:234
msgid ""
"    *   The <kbd>b</kbd> key will make a new cell below the currently "
"selected cell."
msgstr ""
"    *   Il tasto <kbd>b</kbd>crea una nuova cella al di sotto di quella "
"attualmente selezionata. "

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:235
msgid "    *   The <kbd>a</kbd> key will make one above."
msgstr "    *   Il tasto <kbd>a</kbd> ne crea una al di sopra."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:236
msgid "    *   The <kbd>x</kbd> key will delete the current cell."
msgstr "    *   Il tasto <kbd>x</kbd> elimina la cella selezionata."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:237
msgid ""
"    *   The <kbd>z</kbd> key will undo your last cell operation (which could"
" be a deletion, creation, etc)."
msgstr ""
"    *   Il tasto <kbd>z</kbd> annulla la tua ultima operazione sulle celle "
"(come l'eliminazione o creazione di una cella, ecc.)."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:238
msgid ""
"*   All actions can be done using the menus, but there are lots of keyboard "
"shortcuts to speed things up."
msgstr ""
"*   Tutte queste azioni possono essere svolte anche usando i menù, ma ci "
"sono molte scorciatoie da tastiera per rendere le operazioni più rapide."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:240
msgid "> ## Command Vs. Edit"
msgstr "> ## La differenza tra modalità Comando e Modifica"

#: python-novice-gapminder/_episodes/01-run-quit.md:241
msgid ""
">\n"
"> In the Jupyter notebook page are you currently in Command or Edit mode?  \n"
"> Switch between the modes. \n"
"> Use the shortcuts to generate a new cell. \n"
"> Use the shortcuts to delete a cell.\n"
"> Use the shortcuts to undo the last cell operation you performed.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Command mode has a grey border and Edit mode has a blue border. \n"
"> > Use <kbd>Esc</kbd> and <kbd>Return</kbd> to switch between modes. \n"
"> > You need to be in Command mode (Press <kbd>Esc</kbd> if your cell is blue).  Type <kbd>b</kbd> or <kbd>a</kbd>.\n"
"> > You need to be in Command mode (Press <kbd>Esc</kbd> if your cell is blue).  Type <kbd>x</kbd>.\n"
"> > You need to be in Command mode (Press <kbd>Esc</kbd> if your cell is blue).  Type <kbd>z</kbd>."
msgstr ""
">\n"
"> Nella tua pagina Jupyter Notebook, ti trovi in modalità Comando o Modifica, al momento?\n"
"> Passa da una modalità all'altra. \n"
"> Usa le scorciatoie da tastiera per creare una nuova cella. \n"
"> Usa le scorciatoie per eliminare una cella.\n"
"> Usa le scorciatorie per annullare la tua ultima operazione.\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > La modalità Comando ha un contorno grigio, mentre Modifica ha un contorno blu.\n"
"> > Usa <kbd>Esc</kbd> e <kbd>Invio</kbd> per passare da una all'altra. \n"
"> > Assicurati di essere in modalità Comando (Premi <kbd>Esc</kbd> se la cella è blu).  Digita <kbd>b</kbd> oppure <kbd>a</kbd>.\n"
"> > Assicurati di essere in modalità Comando (Premi 3Esc3 se la cella è blu).  Digita <kbd>x</kbd>.\n"
"> > Assicurati di essere in modalità Comando (Premi 3Esc3 se la cella è blu).  Digita <kbd>z</kbd>."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:258
msgid "### Use the keyboard and mouse to select and edit cells."
msgstr "### Usare tastiera e mouse per selezionare e modificare celle."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:260
msgid ""
"*   Pressing the <kbd>Return</kbd> key turns the border blue and engages "
"Edit mode, which allows "
msgstr ""
"*   Premendo<kbd>Invio</kbd>, il bordo della cella diventa blu, e la "
"modalità Modifica è attiva, permettendo"

#: python-novice-gapminder/_episodes/01-run-quit.md:261
msgid ""
"    you to type within the cell.\n"
"*   Because we want to be able to write many lines of code in a single cell,\n"
"    pressing the <kbd>Return</kbd> key when in Edit mode (blue) moves the cursor to the next line \n"
"    in the cell just like in a text editor.\n"
"*   We need some other way to tell the Notebook we want to run what's in the cell.\n"
"*   Pressing <kbd>Shift</kbd>+<kbd>Return</kbd> together will execute the contents of the cell.\n"
"*   Notice that the <kbd>Return</kbd> and <kbd>Shift</kbd> keys on the right of the keyboard are \n"
"    right next to each other."
msgstr ""
"    di scrivere all'interno della cella.\n"
"*   Poiché vogliamo poter scrivere più di una riga di codice in ogni cella,\n"
"    premere il tasto <kbd>Invio</kbd> in modalità Modifica muove il cursore alla riga sucessiva \n"
"    all'interno della cella, come in un editor di testo.\n"
"*   Per comunicare al Notebook che vogliamo eseguire il codice presente nella cella, dobbiamo usare un altro metodo.\n"
"*   Premendo <kbd>Shift</kbd>+<kbd>Invio</kbd>insieme, il computer esegue il contenuto della cella. \n"
"*   Notare che il tasto <kbd>Invio</kbd> e il tasto <kbd>Shift</kbd> di destra sono uno accanto all'altro\n"
"    sulla tastiera."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:270
msgid "### The Notebook will turn Markdown into pretty-printed documentation."
msgstr ""
"### Il Notebook converte codice Markdown in documentazione graficamente "
"curata."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:272
msgid "*   Notebooks can also render [Markdown][markdown]."
msgstr "*   Il notebook può anche visualizzare [Markdown][markdown]."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:273
msgid "    *   A simple plain-text format for writing lists, links, "
msgstr "    *   Un formato di testo semplice, usato per scrivere liste, link,"

#: python-novice-gapminder/_episodes/01-run-quit.md:274
msgid ""
"        and other things that might go into a web page.\n"
"    *   Equivalently, a subset of HTML that looks like what you'd send in an old-fashioned email.\n"
"*   Turn the current cell into a Markdown cell by entering the Command mode (<kbd>Esc</kbd>/gray) \n"
"    and press the <kbd>M</kbd> key.\n"
"*   `In [ ]:` will disappear to show it is no longer a code cell and you will be able to write in \n"
"    Markdown.\n"
"*   Turn the current cell into a Code cell by entering the Command mode (<kbd>Esc</kbd>/gray) and \n"
"    press the <kbd>y</kbd> key."
msgstr ""
"        e altri elementi come in una pagina web.\n"
"    *   In altre parole, un sottoinsieme dell'HTML simile a quello che si può mandare in una cara, vecchia, email.\n"
"*   Per trasformare la cella selezionata in una cella Markdown, entra in modalità Comando\n"
"     (<kbd>Esc</kbd>/grigio) e premi il tasto <kbd>M</kbd> .\n"
"*   `In [ ]:` scompare, indicando che non è più una cella di codice, e si può usare per scrivere Markdown.\n"
"*   Per trasformare la cella selezionata in una cella di codice, entra in modalità Comando\n"
"     (<kbd>Esc</kbd>/grigio) e premi il tasto <kbd>Y</kbd> ."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:283
msgid "### Markdown does most of what HTML does."
msgstr "### Il Markdown permette di fare molte cose tipiche dell'HTML."

#: python-novice-gapminder/_episodes/01-run-quit.md:285
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*   Use asterisks\n"
"*   to create\n"
"*   bullet lists.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*   Use asterisks\n"
"*   to create\n"
"*   bullet lists.\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*   Usa degli asterischi\n"
"*   per creare\n"
"*   elenchi puntati.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*   Usa degli asterischi\n"
"*   per creare\n"
"*   elenchi puntati.\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:300
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"1.  Use numbers\n"
"1.  to create\n"
"1.  numbered lists.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"1.  Use numbers\n"
"1.  to create\n"
"1.  numbered lists.\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"1.  Usa dei numeri\n"
"1.  per creare\n"
"1.  elenchi numerati.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"1.  Usa dei numeri\n"
"1.  per creare\n"
"1.  elenchi numerati.\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:315
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*  You can use indents\n"
"\t*  To create sublists \n"
"\t*  of the same type\n"
"*  Or sublists\n"
"\t1. Of different\n"
"\t1. types\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*  You can use indents\n"
"\t*  To create sublists\n"
"\t*  of the same type\n"
"*  Or sublists\n"
"\t1. Of different\n"
"\t1. types\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*  Usa l'indentazione\n"
"\t*  Per creare sotto-elenchi \n"
"\t*  dello stesso tipo\n"
"*  Oppure\n"
"\t1. Di un altro\n"
"\t1. tipo\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"* Usa l'indentazione\n"
"* Per creare sotto-elenchi \n"
"\t* dello stesso tipo\n"
"* Oppure\n"
"\t1. Di un altro\n"
"\t1. tipo\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:336
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"# A Level-1 Heading\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"# A Level-1 Heading\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"# Un titolo di primo livello\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"# Un titolo di primo livello\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:347
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"## A Level-2 Heading (etc.)\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"## A Level-2 Heading (etc.)\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"## Un titolo di secondo livello (ecc.)\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"## Un titolo di secondo livello (ecc.)\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:358
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"Line breaks\n"
"don't matter."
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"La presenza di ritorni a capo\n"
"non ha importanza."

#: python-novice-gapminder/_episodes/01-run-quit.md:364
msgid ""
"But blank lines\n"
"create new paragraphs.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"Line breaks\n"
"don't matter."
msgstr ""
"Ma righe lasciate vuote\n"
"danno luogo a un nuovo paragrafo.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"La presenza di ritorni a capo\n"
"non ha importanza."

#: python-novice-gapminder/_episodes/01-run-quit.md:372
msgid ""
"But blank lines\n"
"create new paragraphs.\n"
"  </div>\n"
"</div>"
msgstr ""
"Ma righe lasciate vuote\n"
"danno luogo a un nuovo paragrafo.\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:377
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"[Create links](http://software-carpentry.org) with `[...](...)`.\n"
"Or use [named links][data_carpentry]."
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"Per [creare link](http://software-carpentry.org) si scrive `[...](...)`.\n"
"O si possono usare [link nominali][data_carpentry]."

#: python-novice-gapminder/_episodes/01-run-quit.md:383
msgid ""
"[data_carpentry]: http://datacarpentry.org\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"[Create links](http://software-carpentry.org) with `[...](...)`.\n"
"Or use [named links][data_carpentry]."
msgstr ""
"[data_carpentry]: http://datacarpentry.org\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"Per [creare link](http://software-carpentry.org) si scrive `[...](...)`.\n"
"O si possono usare [link nominali][data_carpentry]."

#: python-novice-gapminder/_episodes/01-run-quit.md:390
msgid ""
"[data_carpentry]: http://datacarpentry.org\n"
"  </div>\n"
"</div>"
msgstr ""
"[data_carpentry]: http://datacarpentry.org\n"
"  </div>\n"
"</div>"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:394
msgid "> ## Creating Lists in Markdown"
msgstr "> ## Creare elenchi in Markdown"

#: python-novice-gapminder/_episodes/01-run-quit.md:395
msgid ""
">\n"
"> Create a nested list in a Markdown cell in a notebook that looks like this:\n"
">\n"
"> 1.  Get funding.\n"
"> 2.  Do work.\n"
">     *   Design experiment.\n"
">     *   Collect data.\n"
">     *   Analyze.\n"
"> 3.  Write up.\n"
"> 4.  Publish.\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > This challenge integrates both the numbered list and bullet list. \n"
"> > Note that the bullet list is indented 2 spaces so that it is inline with the items of the numbered list.\n"
"> > ~~~\n"
"> > 1.  Get funding.\n"
"> > 2.  Do work.\n"
"> >     *   Design experiment.\n"
"> >     *   Collect data.\n"
"> >     *   Analyze.\n"
"> > 3.  Write up.\n"
"> > 4.  Publish.\n"
"> > ~~~"
msgstr ""
">\n"
"> Crea una lista in Markdown con questo aspetto:\n"
">\n"
"> 1.  Ottenere finanziamenti.\n"
"> 2.  Lavorare.\n"
">     *   Progettare gli esperimenti.\n"
">     *   Raccogliere dati.\n"
">     *   Analizzarli.\n"
"> 3.  Scrivere il resoconto.\n"
"> 4.  Pubblicare.\n"
"> \n"
"> > ## Soluzione\n"
"> >\n"
"> > Questo esercizio contiene sia elenchi puntati sia numerati. \n"
"> > Notare che l'elenco puntato è indentato di due spazi in modo da essere allineato con gli elementi dell'elenco numerato.\n"
"> > ~~~\n"
"> > 1. Ottenere finanziamenti.\n"
"> > 2. Lavorare.\n"
"> > * Progettare gli esperimenti.\n"
"> > * Raccogliere dati.\n"
"> > * Analizzarli.\n"
"> > 3. Scrivere il resoconto.\n"
"> > 4. Pubblicare.\n"
"> > ~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:422
msgid "> ## More Math"
msgstr "> ## Ancora matematica"

#: python-novice-gapminder/_episodes/01-run-quit.md:423
msgid ""
">\n"
"> What is displayed when a Python cell in a notebook\n"
"> that contains several calculations is executed?\n"
"> For example, what happens when this cell is executed?\n"
">\n"
"> ~~~\n"
"> 7 * 3\n"
"> 2 + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > Python returns the output of the last calculation.\n"
"> > ~~~\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Quando si esegue una cella di codice Python che contiene\n"
"> diversi calcoli, cosa viene mostrato come risultato?\n"
"> Per esempio, cosa succede quando eseguiamo questa cella?\n"
">\n"
"> ~~~\n"
"> 7 * 3\n"
"> 2 + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Soluzione\n"
"> >\n"
"> > Python ci mostra solo il risultato dell'ultimo calcolo.\n"
"> > ~~~\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:444
msgid "> ## Change an Existing Cell from Code to Markdown"
msgstr "> ## Cambiare una cella esistente da Codice a Markdown"

#: python-novice-gapminder/_episodes/01-run-quit.md:445
msgid ""
">\n"
"> What happens if you write some Python in a code cell\n"
"> and then you switch it to a Markdown cell?\n"
"> For example,\n"
"> put the following in a code cell:\n"
">\n"
"> ~~~\n"
"> x = 6 * 7 + 12\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> And then run it with <kbd>Shift</kbd>+<kbd>Return</kbd> to be sure that it works as a code cell.\n"
"> Now go back to the cell and use <kbd>Esc</kbd> then <kbd>m</kbd> to switch the cell to Markdown\n"
"> and \"run\" it with <kbd>Shift</kbd>+<kbd>Return</kbd>.\n"
"> What happened and how might this be useful?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > The Python code gets treated like Markdown text.\n"
"> > The lines appear as if they are part of one contiguous paragraph.\n"
"> > This could be useful to temporarily turn on and off cells in notebooks that get used for multiple purposes. \n"
"> > ~~~\n"
"> > x = 6 * 7 + 12 print(x)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Cosa succede se si scrive Python in una cella di codice,\n"
"> e poi la si cambia in una cella Markdown?\n"
"> Per esempio,\n"
"> scrivi il codice seguente in una cella di codice:\n"
">\n"
"> ~~~\n"
"> x = 6 * 7 + 12\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Poi eseguila con <kbd>Shift</kbd>+<kbd>Invio</kbd> per accertarti che funzioni come cella di codice.\n"
"> Ora, torna indietro e usa <kbd>Esc</kbd> seguito da <kbd>m</kbd> per convertirla in una cella Markdown\n"
"> e \"eseguila\" con <kbd>Shift</kbd>+<kbd>Invio</kbd>.\n"
"> Cosa è successo? In che modo il risultato può essere utile?\n"
"> \n"
"> > ## Soluzione\n"
"> >\n"
"> > Il codice Python viene trattato come testo Markdown.\n"
"> > Le righe appaiono come un paragrafo unico.\n"
"> > Può essere utile per \"attivare\" e \"disattivare\" alcune celle, in notebook che sono usati per scopi diversi.\n"
"> > ~~~\n"
"> > x = 6 * 7 + 12 print(x)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:474
msgid "> ## Equations"
msgstr "> ## Equazioni"

#: python-novice-gapminder/_episodes/01-run-quit.md:475
msgid ""
">\n"
"> Standard Markdown (such as we're using for these notes) won't render equations,\n"
"> but the Notebook will.\n"
"> Create a new Markdown cell\n"
"> and enter the following:\n"
">\n"
"> ~~~\n"
"> $\\sum_{i=1}^{N} 2^{-i} \\approx 1$\n"
"> ~~~\n"
">\n"
"> (It's probably easier to copy and paste.)\n"
"> What does it display?\n"
"> What do you think the underscore, `_`, circumflex, `^`, and dollar sign, `$`, do?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > The notebook shows the equation as it would be rendered from LaTeX equation syntax.\n"
"> > The dollar sign, `$`, is used to tell Markdown that the text in between is a LaTeX equation.\n"
"> > If you're not familiar with LaTeX,  underscore, `_`, is used for subscripts and circumflex, `^`, is used for superscripts.\n"
"> > A pair of curly braces, `{` and `}`, is used to group text together so that the statement `i=1` becomes the subscript and `N` becomes the superscript.\n"
"> > Similarly, `-i` is in curly braces to make the whole statement the superscript for `2`.\n"
"> > `\\sum` and `\\approx` are LaTeX commands for \"sum over\" and \"approximate\" symbols. "
msgstr ""
">\n"
"> Standard Markdown (l'implementazione di Markdown usata in queste note) non è in grado di visualizzare equazioni,\n"
"> ma il notebook può.\n"
"> Crea una nuova cella Markdown\n"
"> e inserisci quanto segue:\n"
">\n"
"> ~~~\n"
"> $\\sum_{i=1}^{N} 2^{-i} \\approx 1$\n"
"> ~~~\n"
">\n"
"> (Potrebbe essere più comodo copiare e incollare.)\n"
"> Che cosa mostra?\n"
"> A cosa pensi servano il trattino basso, `_`, l'accento circonflesso, `^` e il simbolo del dollaro, `$`?\n"
"> \n"
"> > ## Soluzione\n"
"> >\n"
"> > Il notebook ci mostra l'equazione interpretata come sintassi di equazione LaTeX.\n"
"> > Il simbolo del dollaro, `$`, si usa per dire all'interprete Markdown che il contenuto è un'equazione LaTeX.\n"
"> > Se non conosci LaTeX,  il trattino basso, `_`, si usa per i pedici, e il circonflesso, `^`, si usa per gli apici.\n"
"> > Una coppia di parentesi graffe, `{` and `}`, si usa per raggruppare elementi assieme, in modo che `i=1` sia tutto un pedice, e `N` sia l'apice.\n"
"> > Analogamente, `-i` è in parentesi graffe in modo che tutta l'espressione sia l'esponente di `2`.\n"
"> > `\\sum` e `\\approx` sono comandi LaTeX per i simboli di sommatoria e di \"approssimativamente\". "

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:500
msgid "## Closing JupyterLab"
msgstr "## Chiudere JupyterLab"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:502
msgid ""
"*   From the Menu Bar select the \"File\" menu and the choose \"Quit\" at "
"the bottom of the dropdown menu. You will be prompted to confirm that you "
"wish to shutdown the JupyterLab server (don't forget to save your work!). "
"Click \"Confirm\" to shutdown the JupyterLab server."
msgstr ""
"*   Dalla barra dei menù, seleziona il menù \"File\" e scegli \"Quit\" "
"(esci) in fondo al menù a comparsa. Ti verrà chiesto di confermare che vuoi "
"spegnere il server JupyterLab (non dimenticare di salvare il lavoro fatto!)."
" Clicca su \"Confirm\" (conferma) per spegnere il server JupyterLab."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:503
msgid ""
"*   To restart the JupyterLab server you will need to re-run the following "
"command from a shell."
msgstr ""
"*   Per riaccendere un server JupyterLab, sarà necessario dare nuovamente il"
" comando seguente in una shell."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:509
msgid "> ## Closing JupyerLab"
msgstr "> ## Chiudere JupyterLab"

#: python-novice-gapminder/_episodes/01-run-quit.md:510
msgid ""
">\n"
"> Practice closing and restarting the JupyterLab server."
msgstr ""
">\n"
"> Esercitati a chiudere e riaprire il server JupyterLab."

#: python-novice-gapminder/_episodes/01-run-quit.md:513
msgid ""
"[anaconda]: https://docs.continuum.io/anaconda/install\n"
"[jupyterlab-ui]: https://jupyterlab.readthedocs.io/en/stable/user/interface.html\n"
"[jupyterlab-notebook-docs]: https://jupyterlab.readthedocs.io/en/stable/user/notebook.html\n"
"[markdown]: https://en.wikipedia.org/wiki/Markdown"
msgstr ""
"[anaconda]: https://docs.continuum.io/anaconda/install\n"
"[jupyterlab-ui]: https://jupyterlab.readthedocs.io/en/stable/user/interface.html\n"
"[jupyterlab-notebook-docs]: https://jupyterlab.readthedocs.io/en/stable/user/notebook.html\n"
"[markdown]: https://en.wikipedia.org/wiki/Markdown"

# Front Matter
#: python-novice-gapminder/_episodes/02-variables.md:1
msgid ""
"---\n"
"title: \"Variables and Assignment\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I store data in programs?\"\n"
"objectives:\n"
"- \"Write programs that assign scalar values to variables and perform calculations with those values.\"\n"
"- \"Correctly trace value changes in programs that use scalar assignment.\"\n"
"keypoints:\n"
"- \"Use variables to store values.\"\n"
"- \"Use `print` to display values.\"\n"
"- \"Variables persist between cells.\"\n"
"- \"Variables must be created before they are used.\"\n"
"- \"Variables can be used in calculations.\"\n"
"- \"Use an index to get a single character from a string.\"\n"
"- \"Use a slice to get a substring.\"\n"
"- \"Use the built-in function `len` to find the length of a string.\"\n"
"- \"Python is case-sensitive.\"\n"
"- \"Use meaningful variable names.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Variabili e valori\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Come vengono registrati i dati nei programmi?\"\n"
"objectives:\n"
"- \"Scrivere programmi che assegnano valori numerici alle variabili, e li usano per fare calcoli.\"\n"
"- \"Saper tenere traccia di come cambiano i valori delle variabili in programmi che assegnano valori numerici.\"\n"
"keypoints:\n"
"- \"Usare le variabili per tenere valori in memoria.\"\n"
"- \"Usare `print` per visualizzare i valori.\"\n"
"- \"Le variabili restano accessibili da una cella all'altra.\"\n"
"- \"Le variabili devono essere definite prima di essere usate.\"\n"
"- \"Le variabili si possono usare per fare calcoli.\"\n"
"- \"Usare un indice per estrarre un singolo carattere da una stringa.\"\n"
"- \"Usare una slice per estrarre una sotto-stringa.\"\n"
"- \"Usare la funzione predefinita `len` per sapere la lunghezza di una stringa.\"\n"
"- \"Python distingue tra maiuscole e minuscole.\"\n"
"- \"Usare nomi sensati per le variabili.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/02-variables.md:22
msgid "## Use variables to store values."
msgstr "## Usare le variabili per tenere valori in memoria"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:24
msgid "*   **Variables** are names for values."
msgstr "*   Le **variabili** sono nomi associati a valori."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:25
msgid ""
"*   In Python the `=` symbol assigns the value on the right to the name on "
"the left."
msgstr ""
"*   In Python, il simbolo `=` assegna il valore sulla destra al nome sulla "
"sinistra."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:26
msgid "*   The variable is created when a value is assigned to it."
msgstr "*   La variabile viene creata non appena le è assegnato un valore."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:27
msgid "*   Here, Python assigns an age to a variable `age`"
msgstr "*   Qui, Python assegna un'età alla variabile `anni`"

#: python-novice-gapminder/_episodes/02-variables.md:28
msgid "    and a name in quotes to a variable `first_name`."
msgstr "    e un nome, posto tra virgolette, a una variabile chiamata `nome`."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:30
msgid ""
"~~~\n"
"age = 42\n"
"first_name = 'Ahmed'\n"
"~~~"
msgstr ""
"~~~\n"
"anni = 42\n"
"nome = 'Ahmed'\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:34
#: python-novice-gapminder/_episodes/02-variables.md:201
#: python-novice-gapminder/_episodes/04-built-in.md:34
#: python-novice-gapminder/_episodes/09-plotting.md:27
#: python-novice-gapminder/_episodes/09-plotting.md:39
#: python-novice-gapminder/_episodes/09-plotting.md:67
#: python-novice-gapminder/_episodes/09-plotting.md:79
#: python-novice-gapminder/_episodes/09-plotting.md:91
#: python-novice-gapminder/_episodes/09-plotting.md:107
#: python-novice-gapminder/_episodes/09-plotting.md:127
#: python-novice-gapminder/_episodes/09-plotting.md:163
#: python-novice-gapminder/_episodes/11-lists.md:150
#: python-novice-gapminder/_episodes/12-for-loops.md:34
#: python-novice-gapminder/_episodes/12-for-loops.md:43
#: python-novice-gapminder/_episodes/12-for-loops.md:60
#: python-novice-gapminder/_episodes/12-for-loops.md:111
#: python-novice-gapminder/_episodes/16-writing-functions.md:43
#: python-novice-gapminder/_episodes/16-writing-functions.md:111
#: python-novice-gapminder/_episodes/17-scope.md:31
#: python-novice-gapminder/_episodes/18-style.md:56
#: python-novice-gapminder/reference.md:104
#: python-novice-gapminder/reference.md:127
#: python-novice-gapminder/reference.md:152
#: python-novice-gapminder/reference.md:167
#: python-novice-gapminder/reference.md:181
msgid "{: .language-python}"
msgstr "{: .language-python}"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:36
msgid "*   Variable names"
msgstr "*   I nomi delle variabili"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:37
msgid ""
"    * can **only** contain letters, digits, and underscore `_` (typically "
"used to separate words in long variable names)"
msgstr ""
"    * possono **soltanto** contenere lettere, cifre, e il trattino basso `_`"
" (generalmente usato per separare le parole in nomi lunghi)"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:38
msgid "    * cannot start with a digit"
msgstr "    * non possono iniziare con una cifra"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:39
msgid ""
"    * are **case sensitive** (age, Age and AGE are three different "
"variables)"
msgstr ""
"    * distinguono tra **minuscole e maiuscole** (anni, Anni e ANNI sono tre "
"variabili differenti)"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:40
msgid ""
"*   Variable names that start with underscores like `__alistairs_real_age` "
"have a special meaning"
msgstr ""
"*   Le variabili con nomi che iniziano con un trattino basso, come "
"`__vera_eta_di_alistair` hanno un significato speciale"

#: python-novice-gapminder/_episodes/02-variables.md:41
msgid "    so we won't do that until we understand the convention."
msgstr ""
"    perciò, non li useremo finché non avremo spiegato questa convenzione."

# header
#: python-novice-gapminder/_episodes/02-variables.md:43
msgid "## Use `print` to display values."
msgstr "## Usare `print` per visualizzare valori"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:45
msgid ""
"*   Python has a built-in function called `print` that prints things as "
"text."
msgstr ""
"*   Python ha una funzione predefinita chiamata `print` (stampa) che "
"visualizza i valori in forma di testo."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:46
msgid "*   Call the function (i.e., tell Python to run it) by using its name."
msgstr ""
"*   Chiama la funzione (cioè, di' a Python di eseguirla) usandone il nome."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:47
msgid ""
"*   Provide values to the function (i.e., the things to print) in "
"parentheses."
msgstr ""
"*   Passa valori alla funzione (cioè gli oggetti da stampare) mettendoli tra"
" parentesi."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:48
msgid ""
"*   To add a string to the printout, wrap the string in single or double "
"quotes."
msgstr ""
"*   Per aggiungere una stringa ai valori stampati, mettila tra virgolette "
"singole o doppie."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:49
msgid "*   The values passed to the function are called **arguments**"
msgstr "*   I valori passati alla funzione si chiamano **argomenti**"

# code block
#: python-novice-gapminder/_episodes/02-variables.md:51
msgid ""
"~~~\n"
"print(first_name, 'is', age, 'years old')\n"
"~~~"
msgstr ""
"~~~\n"
"print(nome, 'ha', anni, 'anni')\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:54
msgid ""
"{: .language-python}\n"
"~~~\n"
"Ahmed is 42 years old\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Ahmed ha 42 anni\n"
"~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/02-variables.md:58
#: python-novice-gapminder/_episodes/02-variables.md:121
#: python-novice-gapminder/_episodes/02-variables.md:144
#: python-novice-gapminder/_episodes/02-variables.md:169
#: python-novice-gapminder/_episodes/02-variables.md:180
#: python-novice-gapminder/_episodes/03-types-conversion.md:44
#: python-novice-gapminder/_episodes/03-types-conversion.md:54
#: python-novice-gapminder/_episodes/03-types-conversion.md:67
#: python-novice-gapminder/_episodes/03-types-conversion.md:95
#: python-novice-gapminder/_episodes/03-types-conversion.md:108
#: python-novice-gapminder/_episodes/03-types-conversion.md:121
#: python-novice-gapminder/_episodes/03-types-conversion.md:169
#: python-novice-gapminder/_episodes/03-types-conversion.md:185
#: python-novice-gapminder/_episodes/03-types-conversion.md:204
#: python-novice-gapminder/_episodes/04-built-in.md:58
#: python-novice-gapminder/_episodes/04-built-in.md:76
#: python-novice-gapminder/_episodes/04-built-in.md:109
#: python-novice-gapminder/_episodes/04-built-in.md:120
#: python-novice-gapminder/_episodes/04-built-in.md:139
#: python-novice-gapminder/_episodes/04-built-in.md:236
#: python-novice-gapminder/_episodes/06-libraries.md:56
#: python-novice-gapminder/_episodes/06-libraries.md:94
#: python-novice-gapminder/_episodes/06-libraries.md:110
#: python-novice-gapminder/_episodes/06-libraries.md:126
#: python-novice-gapminder/_episodes/07-reading-tabular.md:54
#: python-novice-gapminder/_episodes/07-reading-tabular.md:101
#: python-novice-gapminder/_episodes/07-reading-tabular.md:128
#: python-novice-gapminder/_episodes/07-reading-tabular.md:153
#: python-novice-gapminder/_episodes/07-reading-tabular.md:180
#: python-novice-gapminder/_episodes/07-reading-tabular.md:221
#: python-novice-gapminder/_episodes/08-data-frames.md:55
#: python-novice-gapminder/_episodes/08-data-frames.md:69
#: python-novice-gapminder/_episodes/08-data-frames.md:93
#: python-novice-gapminder/_episodes/08-data-frames.md:112
#: python-novice-gapminder/_episodes/08-data-frames.md:132
#: python-novice-gapminder/_episodes/08-data-frames.md:156
#: python-novice-gapminder/_episodes/08-data-frames.md:168
#: python-novice-gapminder/_episodes/08-data-frames.md:203
#: python-novice-gapminder/_episodes/08-data-frames.md:223
#: python-novice-gapminder/_episodes/08-data-frames.md:243
#: python-novice-gapminder/_episodes/08-data-frames.md:298
#: python-novice-gapminder/_episodes/08-data-frames.md:326
#: python-novice-gapminder/_episodes/11-lists.md:41
#: python-novice-gapminder/_episodes/11-lists.md:56
#: python-novice-gapminder/_episodes/11-lists.md:70
#: python-novice-gapminder/_episodes/11-lists.md:88
#: python-novice-gapminder/_episodes/11-lists.md:113
#: python-novice-gapminder/_episodes/11-lists.md:134
#: python-novice-gapminder/_episodes/11-lists.md:166
#: python-novice-gapminder/_episodes/11-lists.md:201
#: python-novice-gapminder/_episodes/12-for-loops.md:52
#: python-novice-gapminder/_episodes/12-for-loops.md:131
#: python-novice-gapminder/_episodes/12-for-loops.md:153
#: python-novice-gapminder/_episodes/12-for-loops.md:172
#: python-novice-gapminder/_episodes/13-conditionals.md:39
#: python-novice-gapminder/_episodes/13-conditionals.md:57
#: python-novice-gapminder/_episodes/13-conditionals.md:80
#: python-novice-gapminder/_episodes/13-conditionals.md:107
#: python-novice-gapminder/_episodes/13-conditionals.md:127
#: python-novice-gapminder/_episodes/13-conditionals.md:143
#: python-novice-gapminder/_episodes/13-conditionals.md:173
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:49
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:73
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:82
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:103
#: python-novice-gapminder/_episodes/16-writing-functions.md:58
#: python-novice-gapminder/_episodes/16-writing-functions.md:80
#: python-novice-gapminder/_episodes/16-writing-functions.md:91
#: python-novice-gapminder/_episodes/16-writing-functions.md:121
#: python-novice-gapminder/_episodes/16-writing-functions.md:130
#: python-novice-gapminder/_episodes/16-writing-functions.md:144
#: python-novice-gapminder/_episodes/17-scope.md:50
#: python-novice-gapminder/_episodes/18-style.md:84
msgid "{: .output}"
msgstr "{: .output}"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:60
msgid ""
"*   `print` automatically puts a single space between items to separate "
"them."
msgstr ""
"*   `print` inserisce automaticamente un singolo spazio tra i diversi "
"oggetti, per separarli."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:61
msgid "*   And wraps around to a new line at the end."
msgstr "*   E va automaticamente a capo alla fine."

# header
#: python-novice-gapminder/_episodes/02-variables.md:63
msgid "## Variables must be created before they are used."
msgstr "## Le variabili devono essere definite prima di essere usate."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:65
msgid ""
"*   If a variable doesn't exist yet, or if the name has been mis-spelled,"
msgstr ""
"*   Se una variabile non esiste ancora, o se il nome è stato scritto "
"sbagliato,"

#: python-novice-gapminder/_episodes/02-variables.md:66
msgid ""
"    Python reports an error. (Unlike some languages, which \"guess\" a "
"default value.)"
msgstr ""
"    Python restituisce un errore. (A differenza di altri linguaggi, che "
"cercano di \"indovinare\" un valore predefinito.)"

# code block
#: python-novice-gapminder/_episodes/02-variables.md:68
msgid ""
"~~~\n"
"print(last_name)\n"
"~~~"
msgstr ""
"~~~\n"
"print(cognome)\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:71
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-1-c1fbb4e96102> in <module>()\n"
"----> 1 print(last_name)"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-1-c1fbb4e96102> in <module>()\n"
"----> 1 print(cognome)"

#: python-novice-gapminder/_episodes/02-variables.md:78
msgid ""
"NameError: name 'last_name' is not defined\n"
"~~~"
msgstr ""
"NameError: name 'cognome' is not defined\n"
"~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/02-variables.md:80
#: python-novice-gapminder/_episodes/03-types-conversion.md:81
#: python-novice-gapminder/_episodes/03-types-conversion.md:137
#: python-novice-gapminder/_episodes/03-types-conversion.md:155
#: python-novice-gapminder/_episodes/04-built-in.md:95
#: python-novice-gapminder/_episodes/04-built-in.md:156
#: python-novice-gapminder/_episodes/04-built-in.md:169
#: python-novice-gapminder/_episodes/04-built-in.md:183
#: python-novice-gapminder/_episodes/04-built-in.md:209
#: python-novice-gapminder/_episodes/11-lists.md:183
#: python-novice-gapminder/_episodes/12-for-loops.md:81
#: python-novice-gapminder/_episodes/12-for-loops.md:96
#: python-novice-gapminder/_episodes/17-scope.md:57
msgid "{: .error}"
msgstr "{: .error}"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:82
msgid "*   The last line of an error message is usually the most informative."
msgstr ""
"*   L'ultima riga dei messaggi di errore è di solito quella più utile."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:83
msgid ""
"*   We will look at error messages in detail [later]({{ page.root "
"}}/15-scope/#reading-error-messages)."
msgstr ""
"*   Ci occuperemo dei messaggi d'errore più in dettaglio [più avanti]({{ "
"page.root }}/15-scope/#reading-error-messages)."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:85
msgid "> ## Variables Persist Between Cells"
msgstr "> ## Le variabili restano accessibili da una cella all'altra"

#: python-novice-gapminder/_episodes/02-variables.md:86
msgid ""
">\n"
"> Be aware that it is the *order* of execution of cells that is important in a Jupyter notebook, not the order\n"
"> in which they appear. Python will remember *all* the code that was run previously, including any variables you have\n"
"> defined, irrespective of the order in the notebook. Therefore if you define variables lower down the notebook and then\n"
"> (re)run cells further up, those defined further down will still be present. As an example, create two cells with the\n"
"> following content, in this order:\n"
">\n"
"> ~~~\n"
"> print(myval)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> myval = 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> If you execute this in order, the first cell will give an error. However, if you run the first cell *after* the second\n"
"> cell it will print out `1`. To prevent confusion, it can be helpful to use the `Kernel` -> `Restart & Run All` option which\n"
"> clears the interpreter and runs everything from a clean slate going top to bottom."
msgstr ""
">\n"
"> Notate che ciò che è importante usando il Jupyter notebook è l'*ordine di esecuzione* delle celle, non l'ordine \n"
"> in cui compaiono. Python tiene a mente *tutto* il codice che è stato eseguito in precedenza, incluse le variabili che sono state definite,\n"
"> indipendentemente dall'ordine in cui sono scritte nel notebook. Per cui, se definisci una variabile più in basso\n"
"> e poi esegui o riesegui celle più in alto, quelle definite in basso esisteranno ancora. Per esempio, crea due celle con il seguente contenuto, nell'ordine:\n"
">\n"
"> ~~~\n"
"> print(mio_valore)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> mio_valore = 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Se esegui le due celle in ordine, la prima darà un errore. Però, se esegui la prima cella *dopo* la seconda,\n"
"> stamperà `1`. Per evitare confusione, può essere utile usare l'opzione `Kernel` -> `Restart & Run All` (riavvia e esegui tutto), che\n"
"> ripulisce l'interprete e esegue tutte le celle dall'alto in basso ripartendo da zero."

# header
#: python-novice-gapminder/_episodes/02-variables.md:108
msgid "## Variables can be used in calculations."
msgstr "## Le variabili si possono usare per fare calcoli."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:110
msgid "*   We can use variables in calculations just as if they were values."
msgstr "*   Possiamo usare variabili nei calcoli come se fossero numeri."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:111
msgid "    *   Remember, we assigned the value `42` to `age` a few lines ago."
msgstr ""
"    *   Ricorda che, poche righe più in su, abbiamo assegnato il valore `42`"
" alla variabile `anni`."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:113
msgid ""
"~~~\n"
"age = age + 3\n"
"print('Age in three years:', age)\n"
"~~~"
msgstr ""
"~~~\n"
"anni = anni + 3\n"
"print('Età tra tre anni:', anni)\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:117
msgid ""
"{: .language-python}\n"
"~~~\n"
"Age in three years: 45\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Età tra tre anni: 45\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/02-variables.md:123
msgid "## Use an index to get a single character from a string."
msgstr "## Usare un indice per estrarre un singolo carattere da una stringa."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:125
msgid ""
"*   The characters (individual letters, numbers, and so on) in a string are"
msgstr ""
"*   I caratteri (le singole lettere, numeri, eccetera) che formano una "
"stringa"

#: python-novice-gapminder/_episodes/02-variables.md:126
msgid ""
"    ordered. For example, the string `'AB'` is not the same as `'BA'`. Because of\n"
"    this ordering, we can treat the string as a list of characters.\n"
"*   Each position in the string (first, second, etc.) is given a number. This\n"
"    number is called an **index** or sometimes a subscript.\n"
"*   Indices are numbered from 0.\n"
"*   Use the position's index in square brackets to get the character at that\n"
"    position."
msgstr ""
"    sono ordinati. Per esempio, la stringa `'AB'` non è la stessa cosa di `'BA'`. A causa di questo\n"
"    ordinamento, possiamo trattare la stringa come una lista di caratteri.\n"
"*   Ogni posizione nella stringa (prima, seconda, ecc.) corrisponde a un numero. Questo\n"
"    numero è detto **indice**.\n"
"*   Gli indici sono contati a partire da 0.\n"
"*   Per ottenere il carattere corrispondente a una certa posizione, si usa il relativo indice tra parentesi quadre."

#: python-novice-gapminder/_episodes/02-variables.md:134
msgid "![an illustration of indexing](../fig/2_indexing.svg)"
msgstr "![un esempio di indicizzazione](../fig/2_indexing.svg)"

# code block
#: python-novice-gapminder/_episodes/02-variables.md:136
msgid ""
"~~~\n"
"atom_name = 'helium'\n"
"print(atom_name[0])\n"
"~~~"
msgstr ""
"~~~\n"
"nome_atomo = 'elio'\n"
"print(nome_atomo[0])\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:140
msgid ""
"{: .language-python}\n"
"~~~\n"
"h\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"e\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/02-variables.md:146
msgid "## Use a slice to get a substring."
msgstr "## Usare una slice per estrarre una sotto-stringa."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:148
msgid ""
"*   A part of a string is called a **substring**. A substring can be as "
"short as a"
msgstr ""
"*   Una parte di una stringa si chiama **sotto-stringa** (substring). Una "
"sotto-stringa può essere formata anche solo da"

#: python-novice-gapminder/_episodes/02-variables.md:149
msgid ""
"    single character.\n"
"*   An item in a list is called an element. Whenever we treat a string as if it\n"
"    were a list, the string's elements are its individual characters.\n"
"*   A slice is a part of a string (or, more generally, any list-like thing).\n"
"*   We take a slice by using `[start:stop]`, where `start` is replaced with the\n"
"    index of the first element we want and `stop` is replaced with the index of\n"
"    the element just after the last element we want.\n"
"*   Mathematically, you might say that a slice selects `[start:stop)`.\n"
"*   The difference between `stop` and `start` is the slice's length.\n"
"*   Taking a slice does not change the contents of the original string. Instead,\n"
"    the slice is a copy of part of the original string."
msgstr ""
"    un carattere singolo.\n"
"*   Un membro di una lista è detto elemento della lista. Quando trattiamo una stringa\n"
"    come fosse una lista, gli elementi della stringa sono i suoi singoli caratteri.\n"
"*   Una *slice* (fetta) è una parte di una stringa (o, più in generale, di qualsiasi cosa analoga a una lista).\n"
"*   Si estrae una slice (o si \"affetta\" una lista) scrivendo `[inizio:fine]`, dove `inizio` è sostituito dall'\n"
"    indice del primo elemento che vogliamo, e `fine` è sostituito dall'indice dell'elemento immediatamente\n"
"    successivo all'ultimo elemento che vogliamo.\n"
"*   Matematicamente, possiamo dire che la slice seleziona l'intervallo `[inizio, fine)`.\n"
"*   La differenza tra `fine` e `inizio` è la lunghezza della slice.\n"
"*   Estrarre una slice non cambia i contenuti della stringa originale. Al contrario,\n"
"    la slice è una copia di parte della stringa originale."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:161
msgid ""
"~~~\n"
"atom_name = 'sodium'\n"
"print(atom_name[0:3])\n"
"~~~"
msgstr ""
"~~~\n"
"nome_atomo = 'sodio'\n"
"print(nome_atomo[0:3])\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:165
msgid ""
"{: .language-python}\n"
"~~~\n"
"sod\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"sod\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/02-variables.md:171
msgid "## Use the built-in function `len` to find the length of a string."
msgstr ""
"## Usare la funzione predefinita `len` per sapere la lunghezza di una "
"stringa."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:173
msgid ""
"~~~\n"
"print(len('helium'))\n"
"~~~"
msgstr ""
"~~~\n"
"print(len('elio'))\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:176
msgid ""
"{: .language-python}\n"
"~~~\n"
"6\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"4\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:182
msgid "*   Nested functions are evaluated from the inside out,"
msgstr ""
"*   Le funzioni eseguite una dentro l'altra sono chiamate dall'interno "
"all'esterno."

#: python-novice-gapminder/_episodes/02-variables.md:183
msgid "     like in mathematics."
msgstr "     come in matematica."

# header
#: python-novice-gapminder/_episodes/02-variables.md:185
msgid "## Python is case-sensitive."
msgstr "## Python distingue tra maiuscole e minuscole"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:187
msgid "*   Python thinks that upper- and lower-case letters are different,"
msgstr "*   Python nota la differenza tra lettere maiuscole e minuscole,"

#: python-novice-gapminder/_episodes/02-variables.md:188
msgid ""
"    so `Name` and `name` are different variables.\n"
"*   There are conventions for using upper-case letters at the start of variable names so we will use lower-case letters for now."
msgstr ""
"    perciò `Nome` and `nome` sono due variabili diverse.\n"
"*   Poiché ci sono convenzioni sull'uso delle lettere maiuscole all'inizio dei nomi di variabili, per ora useremo le lettere minuscole."

# header
#: python-novice-gapminder/_episodes/02-variables.md:191
msgid "## Use meaningful variable names."
msgstr "## Usare nomi sensati per le variabili."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:193
msgid ""
"*   Python doesn't care what you call variables as long as they obey the "
"rules"
msgstr ""
"*   Dal punto di vista di Python, non è importante il nome dato alle "
"variabili, purché seguano le regole dette"

#: python-novice-gapminder/_episodes/02-variables.md:194
msgid "    (alphanumeric characters and the underscore)."
msgstr "    (caratteri alfanumerici e trattino basso)."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:196
msgid ""
"~~~\n"
"flabadab = 42\n"
"ewr_422_yY = 'Ahmed'\n"
"print(ewr_422_yY, 'is', flabadab, 'years old')\n"
"~~~"
msgstr ""
"~~~\n"
"flabadab = 42\n"
"ewr_422_yY = 'Ahmed'\n"
"print(ewr_422_yY, 'ha', flabadab, 'anni')\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:203
msgid ""
"*   Use meaningful variable names to help other people understand what the "
"program does."
msgstr ""
"*   Usa nomi di variabili dal significato chiaro, in modo da aiutare gli "
"altri a capire cosa faccia il tuo programma."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:204
msgid "*   The most important \"other person\" is your future self."
msgstr "*   Tra questi \"altri\", il più importante è te stesso nel futuro."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:206
msgid "> ## Swapping Values"
msgstr "> ## Scambiare valori"

#: python-novice-gapminder/_episodes/02-variables.md:207
msgid ""
">\n"
"> Fill the table showing the values of the variables in this program\n"
"> *after* each statement is executed.\n"
">\n"
"> ~~~\n"
"> # Command  # Value of x   # Value of y   # Value of swap #\n"
"> x = 1.0    #              #              #               #\n"
"> y = 3.0    #              #              #               #\n"
"> swap = x   #              #              #               #\n"
"> x = y      #              #              #               #\n"
"> y = swap   #              #              #               #\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > # Command  # Value of x   # Value of y   # Value of swap #\n"
"> > x = 1.0    # 1.0          # not defined  # not defined   #\n"
"> > y = 3.0    # 1.0          # 3.0          # not defined   #\n"
"> > swap = x   # 1.0          # 3.0          # 1.0           #\n"
"> > x = y      # 3.0          # 3.0          # 1.0           #\n"
"> > y = swap   # 3.0          # 1.0          # 1.0           #\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > These three lines exchange the values in `x` and `y` using the `swap`\n"
"> > variable for temporary storage. This is a fairly common programming idiom."
msgstr ""
">\n"
"> Completa la tabella indicando i valori delle variabili in questo programma\n"
"> *dopo* l'esecuzione di ogni istruzione.\n"
">\n"
"> ~~~\n"
"> # Comando  # Valore di x   # Valore di y   # Valore di scambio #\n"
"> x = 1.0     #              #              #               #\n"
"> y = 3.0     #              #              #               #\n"
"> scambio = x #              #              #               #\n"
"> x = y       #              #              #               #\n"
"> y = scambio #              #              #               #\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Soluzione\n"
"> >\n"
"> > ~~~\n"
"> > # Comando # Valore di x # Valore di y # Valore di scambio #\n"
"> > x = 1.0     # 1.0          # non definito # non definito  #\n"
"> > y = 3.0     # 1.0          # 3.0          # non definito  #\n"
"> > scambio = x # 1.0          # 3.0          # 1.0           #\n"
"> > x = y       # 3.0          # 3.0          # 1.0           #\n"
"> > y = scambio # 3.0          # 1.0          # 1.0           #\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > Queste tre righe scambiano i valori di `x` e `y` usando la variabile `scambio`\n"
"> > come memoria temporanea. È un metodo abbastanza comune in programmazione."

# SC/DC Template label
#: python-novice-gapminder/_episodes/02-variables.md:234
#: python-novice-gapminder/_episodes/02-variables.md:261
msgid ">{: .solution}"
msgstr ">{: .solution}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:237
msgid "> ## Predicting Values"
msgstr "> ## Prevedere i valori"

#: python-novice-gapminder/_episodes/02-variables.md:238
msgid ""
">\n"
"> What is the final value of `position` in the program below?\n"
"> (Try to predict the value without running the program,\n"
"> then check your prediction.)\n"
">\n"
"> ~~~\n"
"> initial = 'left'\n"
"> position = initial\n"
"> initial = 'right'\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > 'left'\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
">> The `initial` variable is assigned the value `'left'`.\n"
"> > In the second line, the `position` variable also receives\n"
">> the string value `'left'`. In third line, the `initial` variable is given the\n"
">> value `'right'`, but the `position` variable retains its string value\n"
">> of `'left'`."
msgstr ""
">\n"
"> Qual è il valore finale di `posizione` nel programma seguente?\n"
"> (Prova a prevedere il valore senza eseguire il programma,\n"
"> poi verifica la tua previsione.)\n"
">\n"
"> ~~~\n"
"> inizio = 'sinistra'\n"
"> posizione = inizio\n"
"> inizio = 'destra'\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > 'sinistra'\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
">> Alla variabile `inizio` è assegnato il valore `'sinistra'`.\n"
"> > Nella seconda riga, la variabile `posizione` riceve anch'essa il valore\n"
">> `'sinistra'`. Nella terza riga, alla variabile `inizio` è assegnato il\n"
">> valore `'destra'`, ma la variabile `posizione` mantiene il valore\n"
">> di `'sinistra'`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:264
msgid "> ## Challenge"
msgstr "> ## Sfida"

#: python-novice-gapminder/_episodes/02-variables.md:265
msgid ""
">\n"
"> If you assign `a = 123`,\n"
"> what happens if you try to get the second digit of `a` via `a[1]`?\n"
">\n"
"> > ## Solution\n"
"> > Numbers are not strings or sequences and Python will raise an error if you try to perform an index operation on a\n"
"> > number. In the [next lesson on types and type conversion]({{ page.root }}/03-types-conversion/#convert-numbers-and-strings)\n"
"> > we will learn more about types and how to convert between different types. If you want the Nth digit of a number you\n"
"> > can convert it into a string using the `str` built-in function and then perform an index operation on that string.\n"
"> >\n"
"> > ~~~\n"
"> > a = 123\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > TypeError: 'int' object is not subscriptable\n"
"> > ~~~\n"
"> > {: .error}\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > a = str(123)\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 2\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Se definisci `a = 123`,\n"
"> cosa succede se provi a ottenere la seconda cifra di `a` usando `a[1]`?\n"
">\n"
"> > ## Soluzione\n"
"> > I numeri non sono né stringhe né sequenze e Python darà un errore se cerchi di fare un'operazione con gli indici\n"
"> > su un numero. Nella prossima lezione su [tipi e conversioni di tipo]({{ page.root }}/03-types-conversion/#convert-numbers-and-strings)\n"
"> > impareremo altri concetti sui tipi e su come convertire da un tipo ad un altro. Se ti serve l'N-esima cifra di un numero,\n"
"> > puoi convertirlo in una stringa usando la funzione predefinita `str` e poi fare l'operazione con gli indici sulla stringa risultante.\n"
"> >\n"
"> > ~~~\n"
"> > a = 123\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > TypeError: 'int' object is not subscriptable\n"
"> > ~~~\n"
"> > {: .error}\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > a = str(123)\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 2\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:298
msgid "> ## Choosing a Name"
msgstr "> ## Scegliere un nome"

#: python-novice-gapminder/_episodes/02-variables.md:299
msgid ""
">\n"
"> Which is a better variable name, `m`, `min`, or `minutes`?\n"
"> Why?\n"
"> Hint: think about which code you would rather inherit\n"
"> from someone who is leaving the lab:\n"
">\n"
"> 1. `ts = m * 60 + s`\n"
"> 2. `tot_sec = min * 60 + sec`\n"
"> 3. `total_seconds = minutes * 60 + seconds`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > `minutes` is better because `min` might mean something like \"minimum\"\n"
"> > (and actually is an existing built-in function in Python that we will cover later)."
msgstr ""
">\n"
"> Quale di questi è un nome migliore per una variabile, `m`, `min`, o `minuti`?\n"
"> Perché?\n"
"> Suggerimento: pensa a quale codice tra i seguenti preferiresti ricevere in eredità\n"
"> da qualcuno che sta lasciando a te il suo lavoro:\n"
">\n"
"> 1. `ts = m * 60 + s`\n"
"> 2. `tot_sec = min * 60 + sec`\n"
"> 3. `total_seconds = minutes * 60 + seconds`\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > `minuti` è meglio, perché `min` potrebbe indicare qualcosa come \"minimo\"\n"
"> > (e infatti è una funzione predefinita esistente in Python, che tratteremo più avanti)."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:316
msgid "> ## Slicing practice"
msgstr "> ## Pratica con le slice"

#: python-novice-gapminder/_episodes/02-variables.md:317
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> atom_name = 'carbon'\n"
"> print('atom_name[1:3] is:', atom_name[1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > atom_name[1:3] is: ar\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Che cosa stampa il seguente programma?\n"
">\n"
"> ~~~\n"
"> nome_atomo = 'carbonio'\n"
"> print('nome_atomo[1:3] è:', nome_atomo[1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > ~~~\n"
"> > nome_atomo[1:3] è: ar\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:335
msgid "> ## Slicing concepts"
msgstr "> ## Concetti sulle slice"

#: python-novice-gapminder/_episodes/02-variables.md:336
msgid ""
">\n"
"> 1.  What does `thing[low:high]` do?\n"
"> 2.  What does `thing[low:]` (without a value after the colon) do?\n"
"> 3.  What does `thing[:high]` (without a value before the colon) do?\n"
"> 4.  What does `thing[:]` (just a colon) do?\n"
"> 5.  What does `thing[number:some-negative-number]` do?\n"
"> 6.  What happens when you choose a `high` value which is out of range? (i.e., try `atom_name[0:15]`) \n"
">\n"
"> > ## Solutions\n"
"> >\n"
"> > 1. `thing[low:high]` returns a slice from `low` to the value before `high`\n"
"> > 2. `thing[low:]` returns a slice from `low` all the way to the end of `thing`\n"
"> > 3. `thing[:high]` returns a slice from the beginning of `thing` to the value before `high`\n"
"> > 4. `thing[:]` returns all of `thing`\n"
"> > 5. `thing[number:some-negative-number]` returns a slice from `number` to `some-negative-number` values from the end of `thing`\n"
"> > 6. If a part of the slice is out of range, the operation does not fail. `atom_name[0:15]` gives the same result as `atom_name[0:]`."
msgstr ""
">\n"
"> 1.  Cosa fa `qualcosa[inizio:fine]`?\n"
"> 2.  Cosa fa `qualcosa[inizio:]` (senza un valore dopo i due punti)?\n"
"> 3.  Cosa fa `qualcosa[:fine]` (senza un valore prima dei due punti)?\n"
"> 4.  Cosa fa `qualcosa[:]` (solo i due punti)?\n"
"> 5.  Cosa fa `qualcosa[numero:un-numero-negativo]`?\n"
"> 6.  Cosa succede quando scegli un valore di `fine` che è fuori dai limiti? (per esempio, prova `nome_atomo[0:15]`) \n"
">\n"
"> > ## Soluzioni\n"
"> >\n"
"> > 1. `qualcosa[inizio:fine]` restituisce una \"fetta\" da `inizio` fino al valore precedente a `fine`\n"
"> > 2. `qualcosa[inizio:]` restituisce una fetta da `low` fino alla fine di `qualcosa`\n"
"> > 3. `qualcosa[:fine]` restituisce una fetta dal principio di `qualcosa` fino al valore precedente a `fine`\n"
"> > 4. `qualcosa[:]` restituisce interamente `qualcosa`\n"
"> > 5. `qualcosa[numero:un-numero-negativo]` restituisce una fetta da `numero` fino a `un-numero-negativo` valori contati dalla fine di `qualcosa`.\n"
"> > 6. Se una parte della slice è fuori dai limiti, l'operazione non fallisce. `nome_atomo[0:15]` dà lo stesso risultato di `nome_atomo[0:]`."

# Front Matter
#: python-novice-gapminder/_episodes/03-types-conversion.md:1
msgid ""
"---\n"
"title: \"Data Types and Type Conversion\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"What kinds of data do programs store?\"\n"
"- \"How can I convert one type to another?\"\n"
"objectives:\n"
"- \"Explain key differences between integers and floating point numbers.\"\n"
"- \"Explain key differences between numbers and character strings.\"\n"
"- \"Use built-in functions to convert between integers, floating point numbers, and strings.\"\n"
"keypoints:\n"
"- \"Every value has a type.\"\n"
"- \"Use the built-in function `type` to find the type of a value.\"\n"
"- \"Types control what operations can be done on values.\"\n"
"- \"Strings can be added and multiplied.\"\n"
"- \"Strings have a length (but numbers don't).\"\n"
"- \"Must convert numbers to strings or vice versa when operating on them.\"\n"
"- \"Can mix integers and floats freely in operations.\"\n"
"- \"Variables only change value when something is assigned to them.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Tipi di dati e conversioni di tipo\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Quali tipi di dati si possono memorizzare in un programma?\"\n"
"- \"Come si possono convertire dati da un tipo a un altro?\"\n"
"objectives:\n"
"- \"Spiegare le principali differenze tra gli interi e i numeri a virgola mobile.\"\n"
"- \"Spiegare le principali differenze tra numeri e stringhe di caratteri.\"\n"
"- \"Usare funzioni predefinite per convertire tra interi, numeri a virgola mobile e stringhe.\"\n"
"keypoints:\n"
"- \"Ogni valore ha un tipo.\"\n"
"- \"Per scoprire il tipo di una variabile, si usa la funzione predefinita `type`.\"\n"
"- \"In base al tipo, le operazioni che si possono fare su un valore sono diverse.\"\n"
"- \"Le stringhe possono essere sommate e moltiplicate.\"\n"
"- \"Le stringhe hanno una lunghezza, i numeri no.\"\n"
"- \"Lavorando su stringhe e numeri, è necessario convertire stringhe in numeri o viceversa.\"\n"
"- \"Gli interi e i numeri a virgola mobile possono essere usati insieme liberamente in operazioni matematiche.\"\n"
"- \"Le variabili possono cambiare valore solo quando un nuovo valore viene loro assegnato.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:22
msgid "## Every value has a type."
msgstr "## Tutti i valori hanno un tipo."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:24
msgid "*   Every value in a program has a specific type."
msgstr "*   In un programma, ogni valore è di uno specifico tipo."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:25
msgid ""
"*   Integer (`int`): represents positive or negative whole numbers like 3 or"
" -512."
msgstr ""
"*   Intero (integer, `int`): rappresenta numeri interi positivi o negativi, "
"come 3 or -512."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:26
msgid ""
"*   Floating point number (`float`): represents real numbers like 3.14159 or"
" -2.5."
msgstr ""
"*   Numero a virgola mobile (`float`): rappresenta numeri reali come 3.14159"
" o -2.5. Notare che il separatore decimale è il punto, `.`, come nell'uso "
"anglofono, e non la virgola, `,`, come si usa generalmente in italiano."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:27
msgid "*   Character string (usually called \"string\", `str`): text."
msgstr ""
"*   Stringa di caratteri (normalmente chiamata \"string\" o \"stringa\", "
"`str`): del testo."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:28
msgid ""
"    *   Written in either single quotes or double quotes (as long as they "
"match)."
msgstr ""
"    *   Può essere scritta o in virgolette alte singole o in virgolette alte"
" doppie (purché l'uso sia coerente)."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:29
msgid "    *   The quote marks aren't printed when the string is displayed."
msgstr ""
"    *   Le virgolette non vengono stampate quando la stringa viene "
"visualizzata."

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:31
msgid "## Use the built-in function `type` to find the type of a value."
msgstr ""
"## Per scoprire il tipo di una variabile, si usa la funzione predefinita "
"`type`."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:33
msgid ""
"*   Use the built-in function `type` to find out what type a value has."
msgstr ""
"*   Per scoprire qual è il tipo corrispondente a un valore, usa la funzione "
"predefinita `type`."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:34
msgid "*   Works on variables as well."
msgstr "*   Funziona anche sulle variabili."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:35
msgid ""
"    *   But remember: the *value* has the type --- the *variable* is just a "
"label."
msgstr ""
"    *   Ma non dimenticare che è il *valore* ad avere quel tipo; la "
"*variabile* è solo un'etichetta."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:37
msgid ""
"~~~\n"
"print(type(52))\n"
"~~~"
msgstr ""
"~~~\n"
"print(type(52))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:40
msgid ""
"{: .language-python}\n"
"~~~\n"
"<class 'int'>\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"<class 'int'>\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:46
msgid ""
"~~~\n"
"fitness = 'average'\n"
"print(type(fitness))\n"
"~~~"
msgstr ""
"~~~\n"
"fitness = 'average'\n"
"print(type(fitness))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:50
msgid ""
"{: .language-python}\n"
"~~~\n"
"<class 'str'>\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"<class 'str'>\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:56
msgid ""
"## Types control what operations (or methods) can be performed on a given "
"value."
msgstr ""
"## In base al tipo, le operazioni che si possono fare su un valore sono "
"diverse."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:58
msgid "*   A value's type determines what the program can do to it."
msgstr ""
"*   È il tipo di un valore a determinare che cosa il programma può fare con "
"quel valore."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:60
msgid ""
"~~~\n"
"print(5 - 3)\n"
"~~~"
msgstr ""
"~~~\n"
"print(5 - 3)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:63
msgid ""
"{: .language-python}\n"
"~~~\n"
"2\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"2\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:69
msgid ""
"~~~\n"
"print('hello' - 'h')\n"
"~~~"
msgstr ""
"~~~\n"
"print('ciao' - 'c')\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:72
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-2-67f5626a1e07> in <module>()\n"
"----> 1 print('hello' - 'h')"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-2-67f5626a1e07> in <module>()\n"
"----> 1 print('ciao' - 'c')"

#: python-novice-gapminder/_episodes/03-types-conversion.md:79
msgid ""
"TypeError: unsupported operand type(s) for -: 'str' and 'str'\n"
"~~~"
msgstr ""
"TypeError: unsupported operand type(s) for -: 'str' and 'str'\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:83
msgid "## You can use the \"+\" and \"*\" operators on strings."
msgstr "## Si possono usare gli operatori \"+\" e \"*\" anche sulle stringhe."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:85
msgid "*   \"Adding\" character strings concatenates them."
msgstr "*   Il simbolo di addizione concatena le stringhe l'una all'altra."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:87
msgid ""
"~~~\n"
"full_name = 'Ahmed' + ' ' + 'Walsh'\n"
"print(full_name)\n"
"~~~"
msgstr ""
"~~~\n"
"nome = 'Ahmed' + ' ' + 'Walsh'\n"
"print(nome)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:91
msgid ""
"{: .language-python}\n"
"~~~\n"
"Ahmed Walsh\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Ahmed Walsh\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:97
msgid ""
"*   Multiplying a character string by an integer _N_ creates a new string "
"that consists of that character string repeated  _N_ times."
msgstr ""
"*   Moltiplicare una stringa di caratteri per un numero intero _N_ crea una "
"nuova stringa che consiste di quella stringa di caratteri ripetuta _N_ "
"volte."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:98
msgid "    *   Since multiplication is repeated addition."
msgstr "    *   Poiché la moltiplicazione è un'addizione ripetuta."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:100
msgid ""
"~~~\n"
"separator = '=' * 10\n"
"print(separator)\n"
"~~~"
msgstr ""
"~~~\n"
"separatore = '=' * 10\n"
"print(separatore)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:104
msgid ""
"{: .language-python}\n"
"~~~\n"
"==========\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"==========\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:110
msgid "## Strings have a length (but numbers don't)."
msgstr "## Le stringhe hanno una lunghezza, i numeri no."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:112
msgid ""
"*   The built-in function `len` counts the number of characters in a string."
msgstr ""
"*   La funzione predefinita `len` conta il numero di caratteri in una "
"stringa"

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:114
msgid ""
"~~~\n"
"print(len(full_name))\n"
"~~~"
msgstr ""
"~~~\n"
"print(len(nome))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:117
msgid ""
"{: .language-python}\n"
"~~~\n"
"11\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"11\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:123
msgid "*   But numbers don't have a length (not even zero)."
msgstr "*   Ma i numeri non hanno una lunghezza (nemmeno zero)."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:125
msgid ""
"~~~\n"
"print(len(52))\n"
"~~~"
msgstr ""
"~~~\n"
"print(len(52))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:128
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-3-f769e8e8097d> in <module>()\n"
"----> 1 print(len(52))"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-3-f769e8e8097d> in <module>()\n"
"----> 1 print(len(52))"

#: python-novice-gapminder/_episodes/03-types-conversion.md:135
msgid ""
"TypeError: object of type 'int' has no len()\n"
"~~~"
msgstr ""
"TypeError: object of type 'int' has no len()\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:139
msgid ""
"## <a name='convert-numbers-and-strings'></a> Must convert numbers to "
"strings or vice versa when operating on them."
msgstr ""
"## <a name='convert-numbers-and-strings'></a> Lavorando su stringhe e "
"numeri, è necessario convertire stringhe in numeri o viceversa."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:141
msgid "*   Cannot add numbers and strings."
msgstr "*   Non è possibile sommare numeri e stringhe insieme."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:143
msgid ""
"~~~\n"
"print(1 + '2')\n"
"~~~"
msgstr ""
"~~~\n"
"print(1 + '2')\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:146
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-4-fe4f54a023c6> in <module>()\n"
"----> 1 print(1 + '2')"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-4-fe4f54a023c6> in <module>()\n"
"----> 1 print(1 + '2')"

#: python-novice-gapminder/_episodes/03-types-conversion.md:153
msgid ""
"TypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
"~~~"
msgstr ""
"TypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:157
msgid ""
"*   Not allowed because it's ambiguous: should `1 + '2'` be `3` or `'12'`?"
msgstr ""
"*   Non è permesso in quanto ambiguo: `1 + '2'` dovrebbe risultare in `3` o "
"in `'12'`?"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:158
msgid ""
"*   Some types can be converted to other types by using the type name as a "
"function."
msgstr ""
"*   Alcuni tipi possono essere convertiti in altri usando il nome del tipo "
"come una funzione."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:160
msgid ""
"~~~\n"
"print(1 + int('2'))\n"
"print(str(1) + '2')\n"
"~~~"
msgstr ""
"~~~\n"
"print(1 + int('2'))\n"
"print(str(1) + '2')\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:164
msgid ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"12\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"12\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:171
msgid "## Can mix integers and floats freely in operations."
msgstr ""
"## Gli interi e i numeri a virgola mobile possono essere usati insieme "
"liberamente in operazioni matematiche."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:173
msgid "*   Integers and floating-point numbers can be mixed in arithmetic."
msgstr ""
"*   Gli interi e i float (numeri a virgola mobile) possono essere mescolati "
"nelle operazioni aritmetiche."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:174
msgid ""
"    *   Python 3 automatically converts integers to floats as needed. "
"(Integer division in Python 2 will return an integer, the *floor* of the "
"division.)"
msgstr ""
"    *   Python 3 converte automaticamente gli interi in float quando è "
"necessario. (La divisione tra interi in Python 2 ritornava un intero, il "
"quoziente intero approssimato per difetto.)"

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:176
msgid ""
"~~~\n"
"print('half is', 1 / 2.0)\n"
"print('three squared is', 3.0 ** 2)\n"
"~~~"
msgstr ""
"~~~\n"
"print('un mezzo è', 1 / 2.0)\n"
"print('tre al quadrato è', 3.0 ** 2)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:180
msgid ""
"{: .language-python}\n"
"~~~\n"
"half is 0.5\n"
"three squared is 9.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"un mezzo è 0.5\n"
"tre al quadrato è 9.0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:187
msgid "## Variables only change value when something is assigned to them."
msgstr ""
"## Le variabili possono cambiare valore solo quando un nuovo valore viene "
"loro assegnato"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:189
msgid "*   If we make one cell in a spreadsheet depend on another,"
msgstr ""
"*   In un foglio di calcolo, se facciamo dipendere una cella da un'altra,"

#: python-novice-gapminder/_episodes/03-types-conversion.md:190
msgid ""
"    and update the latter,\n"
"    the former updates automatically.\n"
"*   This does **not** happen in programming languages."
msgstr ""
"    e modifichiamo il contenuto di quest'ultima,\n"
"    la prima si aggiorna automaticamente.\n"
"*   Questo **non** succede nei linguaggi di programmazione."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:194
msgid ""
"~~~\n"
"first = 1\n"
"second = 5 * first\n"
"first = 2\n"
"print('first is', first, 'and second is', second)\n"
"~~~"
msgstr ""
"~~~\n"
"prima = 1\n"
"seconda = 5 * prima\n"
"prima = 2\n"
"print('la prima è', prima, 'e la seconda è', seconda)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:200
msgid ""
"{: .language-python}\n"
"~~~\n"
"first is 2 and second is 5\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"la prima è 2 e la seconda è 5\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:206
msgid ""
"*   The computer reads the value of `first` when doing the multiplication,"
msgstr ""
"*   Nel fare la moltiplicazione, il computer legge il valore di `prima`,"

#: python-novice-gapminder/_episodes/03-types-conversion.md:207
msgid ""
"    creates a new value, and assigns it to `second`.\n"
"*   After that, `second` does not remember where it came from."
msgstr ""
"    crea un nuovo valore, e lo assegna a `seconda`.\n"
"*   Dopodiché, `seconda` non si ricorda la propria origine."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:210
msgid "> ## Fractions"
msgstr "> ## Frazioni"

#: python-novice-gapminder/_episodes/03-types-conversion.md:211
msgid ""
">\n"
"> What type of value is 3.4?\n"
"> How can you find out?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > It is a floating-point number (often abbreviated \"float\").\n"
"> >\n"
"> > ~~~\n"
"> > print(type(3.4))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Di che tipo è il valore 3.4?\n"
"> Come si può scoprire?\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > È un numero a virgola mobile (floating point number, spesso abbreviato \"float\").\n"
"> >\n"
"> > ~~~\n"
"> > print(type(3.4))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:230
msgid "> ## Automatic Type Conversion"
msgstr "> ## Conversione di tipo automatica"

#: python-novice-gapminder/_episodes/03-types-conversion.md:231
msgid ""
">\n"
"> What type of value is 3.25 + 4?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > It is a float:\n"
"> > integers are automatically converted to floats as necessary.\n"
"> >\n"
"> > ~~~\n"
"> > result = 3.25 + 4\n"
"> > print(result, 'is', type(result))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 7.25 is <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Di che tipo è il valore 3.25 + 4?\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > È un float:\n"
"> > gli interi sono automaticamente convertiti in float quando necessario.\n"
"> >\n"
"> > ~~~\n"
"> > risultato = 3.25 + 4\n"
"> > print(risultato, 'è un', type(risultato))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 7.25 è un <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:251
msgid "> ## Choose a Type"
msgstr "> ## Scegliere un tipo"

#: python-novice-gapminder/_episodes/03-types-conversion.md:252
msgid ""
">\n"
"> What type of value (integer, floating point number, or character string)\n"
"> would you use to represent each of the following?  Try to come up with more than one good answer for each problem.  For example, in  # 1, when would counting days with a floating point variable make more sense than using an integer?  \n"
">\n"
"> 1. Number of days since the start of the year.\n"
"> 2. Time elapsed from the start of the year until now in days.\n"
"> 3. Serial number of a piece of lab equipment.\n"
"> 4. A lab specimen's age\n"
"> 5. Current population of a city.\n"
"> 6. Average population of a city over time.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answers to the questions are:\n"
"> > 1. Integer, since the number of days would lie between 1 and 365. \n"
"> > 2. Floating point, since fractional days are required\n"
"> > 3. Character string if serial number contains letters and numbers, otherwise integer if the serial number consists only of numerals\n"
"> > 4. This will vary! How do you define a specimen's age? whole days since collection (integer)? date and time (string)?\n"
"> > 5. Choose floating point to represent population as large aggregates (eg millions), or integer to represent population in units of individuals.\n"
"> > 6. Floating point number, since an average is likely to have a fractional part.\n"
"> > {: .output}"
msgstr ""
">\n"
"> Che tipo di valore (intero, numero a virgola mobile, o stringa di caratteri)\n"
"> useresti per rappresentare gli esempi che seguono? Prova a cercare più di una risposta valida\n"
"> per ogni problema. Per esempio, nel n. 1, in quali casi avrebbe più senso contare i giorni con una\n"
"> variabile a virgola mobile rispetto a un intero?\n"
">\n"
"> 1. Il numero dei giorni passati dall'inizio dell'anno.\n"
"> 2. Il tempo passato dall'inizio dell'anno ad oggi, espresso in giorni.\n"
"> 3. Il numero di serie di uno strumento di laboratorio.\n"
"> 4. L'età di un campione da laboratorio.\n"
"> 5. L'attuale popolazione di una città.\n"
"> 6. La popolazione media di una città nel tempo.\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > Le risposte sono:\n"
"> > 1. Intero, dal momento che il numero di giorni sarà compreso tra 1 e 365. \n"
"> > 2. A virgola mobile, dal momento che serviranno frazioni di giorni.\n"
"> > 3. Una stringa di caratteri se il numero di serie contiene numeri e lettere, altrimenti un intero se il numero di serie consiste di sole cifre.\n"
"> > 4. Dipende! Come è definita l'età del campione? in giorni completi a partire dalla raccolta (intero)? una data e un'ora (stringa)?\n"
"> > 5. Scegli un numero a virgola mobile per rappresentare la popolazione in grandi quantità (p. es. milioni), o un intero per rappresentare la popolazione in unità di individui.\n"
"> > 6. Un float, dal momento che una media probabilmente avrà valori frazionari.\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:276
msgid "> ## Division Types"
msgstr "> ## Tipi di divisioni"

#: python-novice-gapminder/_episodes/03-types-conversion.md:277
msgid ""
">\n"
"> In Python 3, the `//` operator performs integer (whole-number) floor division, the `/` operator performs floating-point\n"
"> division, and the '%' (or *modulo*) operator calculates and returns the remainder from integer division:\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 5//3)\n"
"> print('5 / 3:', 5/3)\n"
"> print('5 % 3:', 5%3)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 5 // 3: 1\n"
"> 5 / 3: 1.6666666666666667\n"
"> 5 % 3: 2\n"
"> ~~~"
msgstr ""
">\n"
"> In Python 3, l'operatore `//` esegue la divisione intera (con quoziente intero senza resto, \n"
"> approssimando per difetto), l'operatore `/` effettua la divisione con la virgola,\n"
"> e l'operatore '%' (detto *modulo*) calcola e restituisce il resto della divisione intera:\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 5//3)\n"
"> print('5 / 3:', 5/3)\n"
"> print('5 % 3:', 5%3)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 5 // 3: 1\n"
"> 5 / 3: 1.6666666666666667\n"
"> 5 % 3: 2\n"
"> ~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/03-types-conversion.md:293
#: python-novice-gapminder/_episodes/03-types-conversion.md:345
#: python-novice-gapminder/_episodes/03-types-conversion.md:445
#: python-novice-gapminder/_episodes/07-reading-tabular.md:352
#: python-novice-gapminder/_episodes/11-lists.md:222
#: python-novice-gapminder/_episodes/11-lists.md:264
#: python-novice-gapminder/_episodes/13-conditionals.md:297
#: python-novice-gapminder/_episodes/13-conditionals.md:409
#: python-novice-gapminder/_episodes/16-writing-functions.md:217
msgid "> {: .output}"
msgstr "> {: .output}"

#: python-novice-gapminder/_episodes/03-types-conversion.md:294
msgid ""
">\n"
"> However in Python2 (and other languages), the `/` operator between two integer types perform a floor (`//`) division. To perform a float division, we have to convert one of the integers to float.\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 1)\n"
"> print('5 / 3:', 1 )\n"
"> print('5 / float(3):', 1.6666667 )\n"
"> print('float(5) / 3:', 1.6666667 )\n"
"> print('float(5 / 3):', 1.0 )\n"
"> print('5 % 3:', 2)\n"
"> ~~~\n"
">\n"
"> If `num_subjects` is the number of subjects taking part in a study,\n"
"> and `num_per_survey` is the number that can take part in a single survey,\n"
"> write an expression that calculates the number of surveys needed\n"
"> to reach everyone once.\n"
">\n"
"> > ## Solution\n"
"> > We want the minimum number of surveys that reaches everyone once, which is\n"
"> > the rounded up value of `num_subjects / num_per_survey`. This is \n"
"> > equivalent to performing an integer division with `//` and adding 1.\n"
"> > ~~~\n"
"> > num_subjects = 600\n"
"> > num_per_survey = 42\n"
"> > num_surveys = num_subjects // num_per_survey + 1\n"
"> >\n"
"> > print(num_subjects, 'subjects,', num_per_survey, 'per survey:', num_surveys)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 600 subjects, 42 per survey: 15\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Tuttavia, in Python2 (e altri linguaggi), l'operatore `/` tra due tipi interi esegue la divisione intera (`//`) division. Per fare una divisione con la virgola, siamo costretti a convertire uno degli interi in float.\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 1)\n"
"> print('5 / 3:', 1 )\n"
"> print('5 / float(3):', 1.6666667 )\n"
"> print('float(5) / 3:', 1.6666667 )\n"
"> print('float(5 / 3):', 1.0 )\n"
"> print('5 % 3:', 2)\n"
"> ~~~\n"
">\n"
"> Se `n_soggetti` è il numero di soggetti che partecipano a uno studio,\n"
"> e `n_per_sondaggio` è il numero che partecipa a un singolo sondaggio,\n"
"> scrivi un'espressione che calcola il numero di sondaggi necessari\n"
"> a raggiungere tutti i partecipanti una volta.\n"
">\n"
"> > ## Soluzione\n"
"> > Vogliamo sapere il numero di sondaggi che raggiungono tutti una volta, che è\n"
"> > il valore approssimato per eccesso di `n_soggetti / n_per_sondaggio`. Ciò è lo stesso che \n"
"> > eseguire una divisione intera con `//` e aggiungere 1.\n"
"> > ~~~\n"
"> > n_soggetti = 600\n"
"> > n_per_sondaggio = 42\n"
"> > n_sondaggi = n_soggetti // n_per_sondaggio + 1\n"
"> >\n"
"> > print(n_soggetti, 'soggetti,', n_per_sondaggio, 'per sondaggio:', n_sondaggi)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 600 soggetti, 42 per sondaggio: 15\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:330
msgid "> ## Strings to Numbers"
msgstr "> ## Da stringhe a numer"

#: python-novice-gapminder/_episodes/03-types-conversion.md:331
msgid ""
">\n"
"> Where reasonable, `float()` will convert a string to a floating point number,\n"
"> and `int()` will convert a floating point number to an integer:\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"3.4\"))\n"
"> print(\"float to int:\", int(3.4))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> string to float: 3.4\n"
"> float to int: 3\n"
"> ~~~"
msgstr ""
">\n"
"> Ogniqualvolta sia ragionevolmente possibile, `float()` è in grado di convertire una stringa in un float,\n"
"> e `int()` converte un float in un intero:\n"
">\n"
"> ~~~\n"
"> print(\"da stringa a float:\", float(\"3.4\"))\n"
"> print(\"da float a int:\", int(3.4))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> da stringa a float: 3.4\n"
"> da float a int: 3\n"
"> ~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:346
msgid ""
">\n"
"> If the conversion doesn't make sense, however, an error message will occur\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"Hello world!\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> ValueError                                Traceback (most recent call last)\n"
"> <ipython-input-5-df3b790bf0a2> in <module>()\n"
"> ----> 1 print(\"string to float:\", float(\"Hello world!\"))\n"
">\n"
"> ValueError: could not convert string to float: 'Hello world!'\n"
"> ~~~"
msgstr ""
">\n"
"> Se la conversione non ha senso, però, appare un messaggio di errore>\n"
"> ~~~\n"
"> print(\"da stringa a float:\", float(\"Hello world!\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> ValueError                                Traceback (most recent call last)\n"
"> <ipython-input-5-df3b790bf0a2> in <module>()\n"
"> ----> 1 print(\"da string a float:\", float(\"Hello world!\"))\n"
">\n"
"> ValueError: could not convert string to float: 'Hello world!'\n"
"> ~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/03-types-conversion.md:362
#: python-novice-gapminder/_episodes/06-libraries.md:248
#: python-novice-gapminder/_episodes/07-reading-tabular.md:71
#: python-novice-gapminder/_episodes/17-scope.md:108
msgid "> {: .error}"
msgstr "> {: .error}"

#: python-novice-gapminder/_episodes/03-types-conversion.md:363
msgid ""
">\n"
"> Given this information, what do you expect the following program to do?\n"
">\n"
"> What does it actually do?\n"
">\n"
"> Why do you think it does that?\n"
">\n"
"> ~~~\n"
"> print(\"fractional string to int:\", int(\"3.4\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Solution\n"
"> > What do you expect this program to do? It would not be so unreasonable to expect the Python 3 `int` command to\n"
"> > convert the string \"3.4\" to 3.4 and an additional type conversion to 3. After all, Python 3 performs a lot of other\n"
"> > magic - isn't that part of its charm?\n"
"> > \n"
"> > However, Python 3 throws an error. Why? To be consistent, possibly. If you ask Python to perform two consecutive\n"
"> > typecasts, you must convert it explicitly in code.\n"
"> >\n"
"> > ~~~\n"
"> > int(\"3.4\")\n"
"> > int(float(\"3.4\"))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > In [2]: int(\"3.4\")\n"
"> > ---------------------------------------------------------------------------\n"
"> > ValueError                                Traceback (most recent call last)\n"
"> > <ipython-input-2-ec6729dfccdc> in <module>()\n"
"> > ----> 1 int(\"3.4\")\n"
"> > ValueError: invalid literal for int() with base 10: '3.4'\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Date queste informazioni, cosa ti aspetti che faccia questo programma?\n"
">\n"
"> Che cosa fa in realtà?\n"
">\n"
"> Perche, secondo te, fa così?\n"
">\n"
"> ~~~\n"
"> print(\"stringa frazionaria a intero:\", int(\"3.4\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Solution\n"
"> > Non sarebbe irragionevole aspettarsi che il comando `int` in Python 3 converta la stringa\n"
"> > \"3.4\" in 3.4 e poi faccia un'ulteriore conversione di tipo arrivando a 3. Dopo tutto Python 3\n"
"> > fa un sacco di altre magie: il bello è quello.\n"
"> > \n"
"> > Eppure, Python 3 ci dà un errore. Perché? Forse, per essere coerente. Se si chiede a Python di fare\n"
"> > due \"typecasts\" (conversioni di tipo), bisogna farle esplicitamente nel codice.\n"
"> >\n"
"> > ~~~\n"
"> > int(\"3.4\")\n"
"> > int(float(\"3.4\"))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > In [2]: int(\"3.4\")\n"
"> > ---------------------------------------------------------------------------\n"
"> > ValueError                                Traceback (most recent call last)\n"
"> > <ipython-input-2-ec6729dfccdc> in <module>()\n"
"> > ----> 1 int(\"3.4\")\n"
"> > ValueError: invalid literal for int() with base 10: '3.4'\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:401
msgid "> ## Arithmetic with Different Types"
msgstr "> ## Aritmetica con tipi diversi"

#: python-novice-gapminder/_episodes/03-types-conversion.md:402
msgid ""
">\n"
"> Which of the following will return the floating point number `2.0`?\n"
"> Note: there may be more than one right answer.\n"
">\n"
"> ~~~\n"
"> first = 1.0\n"
"> second = \"1\"\n"
"> third = \"1.1\"\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. `first + float(second)`\n"
"> 2. `float(second) + float(third)`\n"
"> 3. `first + int(third)`\n"
"> 4. `first + int(float(third))`\n"
"> 5. `int(first) + int(float(third))`\n"
"> 6. `2.0 * second`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Answer: 1 and 4"
msgstr ""
">\n"
"> Quali delle opzioni seguenti ci restituiranno il numero `2.0` in virgola mobile?\n"
"> Nota: può esserci più di una risposta esatta.\n"
">\n"
"> ~~~\n"
"> prima = 1.0\n"
"> seconda = \"1\"\n"
"> terza = \"1.1\"\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. `prima + float(seconda)`\n"
"> 2. `float(seconda) + float(terza)`\n"
"> 3. `first + int(terza)`\n"
"> 4. `first + int(float(terza))`\n"
"> 5. `int(prima) + int(float(terza))`\n"
"> 6. `2.0 * seconda`\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > Risposta: 1 e 4"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:426
msgid "> ## Complex Numbers"
msgstr "> ## Numeri complessi"

#: python-novice-gapminder/_episodes/03-types-conversion.md:427
msgid ""
">\n"
"> Python provides complex numbers,\n"
"> which are written as `1.0+2.0j`.\n"
"> If `val` is an imaginary number,\n"
"> its real and imaginary parts can be accessed using *dot notation*\n"
"> as `val.real` and `val.imag`.\n"
">\n"
"> ~~~\n"
"> complex = 6 + 2j\n"
"> print(complex.real)\n"
"> print(complex.imag)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 6.0\n"
"> 2.0\n"
"> ~~~"
msgstr ""
">\n"
"> Python offre l'uso dei numeri complessi,\n"
"> che si scrivono `1.0+2.0j`.\n"
"> Se `val` è un numero immaginario,\n"
"> si può accedere alle sua parti reale e immaginaria usando la *notazione punto*\n"
"> cioè `val.real` e `val.imag`.\n"
">\n"
"> ~~~\n"
"> complesso = 6 + 2j\n"
"> print(complesso.real)\n"
"> print(complesso.imag)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 6.0\n"
"> 2.0\n"
"> ~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:446
msgid ""
">\n"
">\n"
"> 1.  Why do you think Python uses `j` instead of `i` for the imaginary part?\n"
"> 2.  What do you expect `1+2j + 3` to produce?\n"
"> 3.  What do you expect `4j` to be?  What about `4 j` or `4 + j`?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > 1. Standard mathematics treatments typically use `i` to denote an imaginary number. However, from media reports it\n"
"> > was an early convention established from electrical engineering that now presents a technically expensive area to\n"
"> > change. [Stack Overflow provides additional explanation and\n"
"> > discussion.](http://stackoverflow.com/questions/24812444/why-are-complex-numbers-in-python-denoted-with-j-instead-of-i)\n"
"> > 2. `(4+2j)`\n"
"> > 3. `4j`, `Syntax Error: invalid syntax`, in this case _j_ is considered a variable and this depends on if _j_ is defined and if so, its assigned value"
msgstr ""
">\n"
">\n"
"> 1.  Perché, secondo te, Python usa `j` instead of `i` per la parte immaginaria?\n"
"> 2.  Cosa ti aspetti che sia il risultato di `1+2j + 3`?\n"
"> 3.  Cosa ti aspetti che sia `4j`?  E invece `4 j` oppure `4 + j`?\n"
"> \n"
"> > ## Soluzione\n"
"> >\n"
"> > 1. L'uso matematico standard è tipicamente quello di indicare un numero immaginario con `i`. Tuttavia, da quanto dicono i media,\n"
"> > l'uso di `j` è una vecchia convenzione usata in ingegneria elettrica che sarebbe ora difficile cambiare. [Stack Overflow contiene spiegazioni e discussioni\n"
"> > ulteriori.](http://stackoverflow.com/questions/24812444/why-are-complex-numbers-in-python-denoted-with-j-instead-of-i)\n"
"> > 2. `(4+2j)`\n"
"> > 3. `4j`, `Syntax Error: invalid syntax`, in questo caso _j_ è considerata una variabile, e il risultato dipende da se _j_ è definita e, se lo è, dal suo valore assegnato."

# Front Matter
#: python-novice-gapminder/_episodes/04-built-in.md:1
msgid ""
"---\n"
"title: \"Built-in Functions and Help\"\n"
"teaching: 15\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use built-in functions?\"\n"
"- \"How can I find out what they do?\"\n"
"- \"What kind of errors can occur in programs?\"\n"
"objectives:\n"
"- \"Explain the purpose of functions.\"\n"
"- \"Correctly call built-in Python functions.\"\n"
"- \"Correctly nest calls to built-in functions.\"\n"
"- \"Use help to display documentation for built-in functions.\"\n"
"- \"Correctly describe situations in which SyntaxError and NameError occur.\"\n"
"keypoints:\n"
"- \"Use comments to add documentation to programs.\"\n"
"- \"A function may take zero or more arguments.\"\n"
"- \"Commonly-used built-in functions include `max`, `min`, and `round`.\"\n"
"- \"Functions may only work for certain (combinations of) arguments.\"\n"
"- \"Functions may have default values for some arguments.\"\n"
"- \"Use the built-in function `help` to get help for a function.\"\n"
"- \"The Jupyter Notebook has two ways to get help.\"\n"
"- \"Every function returns something.\"\n"
"- \"Python reports a syntax error when it can't understand the source of a program.\"\n"
"- \"Python reports a runtime error when something goes wrong while a program is executing.\"\n"
"- \"Fix syntax errors by reading the source code, and runtime errors by tracing the program's execution.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Funzioni predefinite e aiuto\"\n"
"teaching: 15\n"
"exercises: 10\n"
"questions:\n"
"- \"Come si usano le funzioni predefinite?\"\n"
"- \"Come si fa a sapere cosa fanno?\"\n"
"- \"Quali sono i tipi di errori che possono presentarsi in un programma?\"\n"
"objectives:\n"
"- \"Spiegare a cosa servono le funzioni.\"\n"
"- \"Chiamare correttamente le funzioni predefinite di Python.\"\n"
"- \"Usare correttamente funzioni predefinite nidificate una dentro l'altra.\"\n"
"- \"Usare l'aiuto per visualizzare la documentazione di funzioni predefinite.\"\n"
"- \"Descrivere correttamente i casi in cui possono presentarsi SyntaxError e NameError.\"\n"
"keypoints:\n"
"- \"Usare i commenti per aggiungere documentazione ai programmi.\"\n"
"- \"Una funzione può ricevere zero o più argomenti.\"\n"
"- \"Tra le funzioni predefinite più comuni ci sono `max`, `min` e `round`.\"\n"
"- \"Le funzioni possono funzionare solo con certe combinazioni di argomenti.\"\n"
"- \"Le funzioni possono avere valori predefiniti per alcuni argomenti.\"\n"
"- \"Usare la funzione predefinita `help` per ottenere aiuto relativamente a una funzione.\"\n"
"- \"Il Jupyter Notebook ha due modi di mostrare l'aiuto.\"\n"
"- \"Tutte le funzioni restituiscono qualcosa.\"\n"
"- \"Python mostra un errore di sintassi quando non riesce a capire il codice sorgente di un programma.\"\n"
"- \"Python mostra un errore runtime quanto qualcosa non funziona mentre il programma viene eseguito.\"\n"
"- \"Gli errori di sintassi si risolvono rileggendo il codice sorgente, gli errori runtime tracciando l'esecuzione del programma.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:28
msgid "## Use comments to add documentation to programs."
msgstr "## Usare i commenti per aggiungere documentazione ai programmi."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:30
msgid ""
"~~~\n"
"# This sentence isn't executed by Python.\n"
"adjustment = 0.5   # Neither is this - anything after '#' is ignored.\n"
"~~~"
msgstr ""
"~~~\n"
"# Questa frase non verrà eseguita da Python.\n"
"adjustment = 0.5   # Nemmeno questa: tutto ciò che si trova dopo un '#' viene ignorato.\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:36
msgid "## A function may take zero or more arguments."
msgstr "## Una funzione può ricevere zero o più argomenti."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:38
msgid ""
"*   We have seen some functions already --- now let's take a closer look."
msgstr ""
"*   Abbiamo già visto alcuni esempi di funzioni. Ora, diamo un'occhiata più "
"da vicino."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:39
msgid "*   An *argument* is a value passed into a function."
msgstr "*   Una *argomento* è un valore passato a una funzione."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:40
msgid "*   `len` takes exactly one."
msgstr "*   `len` ne richiede esattamente uno."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:41
msgid "*   `int`, `str`, and `float` create a new value from an existing one."
msgstr ""
"*   `int`, `str`, e `float` creano un nuovo valore a partire da uno "
"esistente."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:42
msgid "*   `print` takes zero or more."
msgstr "*   `print` ne richiede zero o più."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:43
msgid "*   `print` with no arguments prints a blank line."
msgstr "*   `print` senza argomenti stampa una riga di testo vuota."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:44
msgid "    *   Must always use parentheses, even if they're empty,"
msgstr "    *   Le parentesi vanno sempre usate, anche quando sono vuote,"

#: python-novice-gapminder/_episodes/04-built-in.md:45
msgid "        so that Python knows a function is being called."
msgstr "        così che Python sappia che stiamo chiamando una funzione."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:47
msgid ""
"~~~\n"
"print('before')\n"
"print()\n"
"print('after')\n"
"~~~"
msgstr ""
"~~~\n"
"print('prima')\n"
"print()\n"
"print('dopo')\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:52
msgid ""
"{: .language-python}\n"
"~~~\n"
"before"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"prima"

#: python-novice-gapminder/_episodes/04-built-in.md:56
msgid ""
"after\n"
"~~~"
msgstr ""
"dopo\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:60
msgid "## Commonly-used built-in functions include `max`, `min`, and `round`."
msgstr ""
"## Tra le funzioni predefinite più comuni ci sono `max`, `min` e `round`."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:62
msgid "*   Use `max` to find the largest value of one or more values."
msgstr "*   Si usa `max` per trovare il massimo tra uno o più valori."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:63
msgid "*   Use `min` to find the smallest."
msgstr "*   Si usa `min` per trovare il minimo."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:64
msgid "*   Both work on character strings as well as numbers."
msgstr ""
"*   Entrambi funzionano sia sui numeri che sulle stringhe di caratteri."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:65
msgid "    *   \"Larger\" and \"smaller\" use (0-9, A-Z, a-z) to compare letters."
msgstr ""
"    *   Il concetto di \"maggiore\" e \"minore\" usa l'ordinamento (0-9, "
"A-Z, a-z) per i caratteri."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:67
msgid ""
"~~~\n"
"print(max(1, 2, 3))\n"
"print(min('a', 'A', '0'))\n"
"~~~"
msgstr ""
"~~~\n"
"print(max(1, 2, 3))\n"
"print(min('a', 'A', '0'))\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:71
msgid ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:78
msgid "## Functions may only work for certain (combinations of) arguments."
msgstr ""
"## Le funzioni possono funzionare solo con certe combinazioni di argomenti."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:80
msgid "*   `max` and `min` must be given at least one argument."
msgstr "*   `max` e `min` richiedono almeno un argomento."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:81
msgid "    *   \"Largest of the empty set\" is a meaningless question."
msgstr ""
"    *   \"Qual è valore massimo di un insieme vuoto\" è una domanda priva di"
" senso."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:82
msgid "*   And they must be given things that can meaningfully be compared."
msgstr ""
"*   Inoltre, devono ricevere input che possono essere confrontati tra loro "
"in modo sensato."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:84
msgid ""
"~~~\n"
"print(max(1, 'a'))\n"
"~~~"
msgstr ""
"~~~\n"
"print(max(1, 'a'))\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:87
msgid ""
"{: .language-python}\n"
"~~~\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-52-3f049acf3762> in <module>\n"
"----> 1 print(max(1, 'a'))"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-52-3f049acf3762> in <module>\n"
"----> 1 print(max(1, 'a'))"

#: python-novice-gapminder/_episodes/04-built-in.md:93
msgid ""
"TypeError: '>' not supported between instances of 'str' and 'int'\n"
"~~~"
msgstr ""
"TypeError: '>' not supported between instances of 'str' and 'int'\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:97
msgid "## Functions may have default values for some arguments."
msgstr "## Le funzioni possono avere valori predefiniti per alcuni argomenti."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:99
msgid "*   `round` will round off a floating-point number."
msgstr "*   `round` arrotonda i numeri a virgola mobile."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:100
msgid "*   By default, rounds to zero decimal places."
msgstr "*   Di default, arrotonda a zero cifre decimali."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:102
msgid ""
"~~~\n"
"round(3.712)\n"
"~~~"
msgstr ""
"~~~\n"
"round(3.712)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:105
msgid ""
"{: .language-python}\n"
"~~~\n"
"4\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"4\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:111
msgid "*   We can specify the number of decimal places we want."
msgstr "*   Si può specificare il numero di cifre decimali desiderato."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:113
msgid ""
"~~~\n"
"round(3.712, 1)\n"
"~~~"
msgstr ""
"~~~\n"
"round(3.712, 1)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:116
msgid ""
"{: .language-python}\n"
"~~~\n"
"3.7\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3.7\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:122
msgid "## Use the built-in function `help` to get help for a function."
msgstr ""
"## Usare la funzione predefinita `help` per ottenere aiuto relativamente a "
"una funzione."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:124
msgid "*   Every built-in function has online documentation."
msgstr "*   Tutte le funzioni predefinite hanno una documentazione in linea."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:126
msgid ""
"~~~\n"
"help(round)\n"
"~~~"
msgstr ""
"~~~\n"
"help(round)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:129
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on built-in function round in module builtins:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Help on built-in function round in module builtins:"

#: python-novice-gapminder/_episodes/04-built-in.md:133
msgid ""
"round(number, ndigits=None)\n"
"    Round a number to a given precision in decimal digits."
msgstr ""
"round(number, ndigits=None)\n"
"    Round a number to a given precision in decimal digits."

#: python-novice-gapminder/_episodes/04-built-in.md:136
msgid ""
"    The return value is an integer if ndigits is omitted or None.  Otherwise\n"
"    the return value has the same type as the number.  ndigits may be negative.\n"
"~~~"
msgstr ""
"    The return value is an integer if ndigits is omitted or None.  Otherwise\n"
"    the return value has the same type as the number.  ndigits may be negative.\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:141
msgid ""
"## Python reports a syntax error when it can't understand the source of a "
"program."
msgstr ""
"## Python mostra un errore di sintassi quando non riesce a capire il codice "
"sorgente di un programma."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:143
msgid "*   Won't even try to run the program if it can't be parsed."
msgstr ""
"*   Non prova nemmeno a eseguire il programma, se la sua sintassi non può "
"essere analizzata."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:145
msgid ""
"~~~\n"
"# Forgot to close the quote marks around the string.\n"
"name = 'Feng\n"
"~~~"
msgstr ""
"~~~\n"
"# Qui abbiamo dimenticato di chiudere le virgolette attorno alla stringa.\n"
"nome = 'Feng\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:149
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-56-f42768451d55>\", line 2\n"
"    name = 'Feng\n"
"                ^\n"
"SyntaxError: EOL while scanning string literal\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-56-f42768451d55>\", line 2\n"
"    nome = 'Feng\n"
"                ^\n"
"SyntaxError: EOL while scanning string literal\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:158
msgid ""
"~~~\n"
"# An extra '=' in the assignment.\n"
"age = = 52\n"
"~~~"
msgstr ""
"~~~\n"
"# Un '=' di troppo nella definizione.\n"
"anni = = 52\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:162
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-57-ccc3df3cf902>\", line 2\n"
"    age = = 52\n"
"          ^\n"
"SyntaxError: invalid syntax\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-57-ccc3df3cf902>\", line 2\n"
"    anni = = 52\n"
"          ^\n"
"SyntaxError: invalid syntax\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:171
msgid "*   Look more closely at the error message:"
msgstr "*   Osserva il messaggio di errore con attenzione:"

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:173
msgid ""
"~~~\n"
"print(\"hello world\"\n"
"~~~"
msgstr ""
"~~~\n"
"print(\"hello world\"\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:176
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-6-d1cc229bf815>\", line 1\n"
"    print (\"hello world\"\n"
"                        ^\n"
"SyntaxError: unexpected EOF while parsing\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-6-d1cc229bf815>\", line 1\n"
"    print (\"hello world\"\n"
"                        ^\n"
"SyntaxError: unexpected EOF while parsing\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:185
msgid ""
"*   The message indicates a problem on first line of the input (\"line 1\")."
msgstr ""
"*   Il messaggio segnala un problema alla prima riga dell'input (\"line "
"1\")."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:186
msgid ""
"    *   In this case the \"ipython-input\" section of the file name tells us"
" that"
msgstr "    *   In questo caso, il nome del file \"ipython-input\" indica che"

#: python-novice-gapminder/_episodes/04-built-in.md:187
msgid ""
"        we are working with input into IPython,\n"
"        the Python interpreter used by the Jupyter Notebook.\n"
"*   The `-6-` part of the filename indicates that\n"
"    the error occurred in cell 6 of our Notebook.\n"
"*   Next is the problematic line of code,\n"
"    indicating the problem with a `^` pointer."
msgstr ""
"        stiamo lavorando con un input dato a IPython,\n"
"        l'interprete Python usato dal Jupyter Notebook.\n"
"*   La parte `-6-` del nome del file indica che\n"
"    l'errore si è verificato nella cella 6 del nostro Notebook.\n"
"*   Dopo, è indicata la riga di codice problematica,\n"
"    con il problema indicato da un puntatore `^`."

# header
#: python-novice-gapminder/_episodes/04-built-in.md:194
msgid ""
"## <a name='runtime-error'></a> Python reports a runtime error when "
"something goes wrong while a program is executing."
msgstr ""
"## <a name='runtime-error'></a> Python mostra un errore runtime quando "
"qualcosa non funziona mentre il programma viene eseguito."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:196
msgid ""
"~~~\n"
"age = 53\n"
"remaining = 100 - aege # mis-spelled 'age'\n"
"~~~"
msgstr ""
"~~~\n"
"anni = 53\n"
"rimanenti = 100 - annni # 'anni' è scritto sbagliato\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:200
msgid ""
"{: .language-python}\n"
"~~~\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-59-1214fb6c55fc> in <module>\n"
"      1 age = 53\n"
"----> 2 remaining = 100 - aege # mis-spelled 'age'"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-59-1214fb6c55fc> in <module>\n"
"      1 anni = 53\n"
"----> 2 rimanenti = 100 - annni # 'anni' è scritto sbagliato"

#: python-novice-gapminder/_episodes/04-built-in.md:207
msgid ""
"NameError: name 'aege' is not defined\n"
"~~~"
msgstr ""
"NameError: name 'annni' is not defined\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:211
msgid ""
"*   Fix syntax errors by reading the source and runtime errors by tracing "
"execution."
msgstr ""
"*   Gli errori di sintassi si risolvono rileggendo il codice sorgente, gli "
"errori runtime tracciando l'esecuzione del programma."

# header
#: python-novice-gapminder/_episodes/04-built-in.md:213
msgid "## The Jupyter Notebook has two ways to get help."
msgstr "## Il Jupyter Notebook ha due modi per ottenere aiuto."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:215
msgid "*   Place the cursor anywhere in the function invocation "
msgstr "*   Muovi il cursore ovunque in una chiamata a una funzione"

#: python-novice-gapminder/_episodes/04-built-in.md:216
msgid ""
"    (i.e., the function name or its parameters),\n"
"    hold down `shift`,\n"
"    and press `tab`.\n"
"*   Or type a function name with a question mark after it."
msgstr ""
"    (cioè, nel nome della funzione o tra i suoi parametri),\n"
"    tieni premuto `shift`,\n"
"    e premi `tab`.\n"
"*   Oppure scrivi il nome di una funzione seguito da un punto di domanda."

# header
#: python-novice-gapminder/_episodes/04-built-in.md:221
msgid "## Every function returns something."
msgstr "## Tutte le funzioni restituiscono qualcosa."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:223
msgid "*   Every function call produces some result."
msgstr "*   Ogni chiamata a funzione produce un risultato."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:224
msgid "*   If the function doesn't have a useful result to return,"
msgstr "*   Se la funzione non ha un risultato utile da restituire,"

#: python-novice-gapminder/_episodes/04-built-in.md:225
msgid "    it usually returns the special value `None`."
msgstr "    normalmente restituisce il valore speciale `None` (\"Nulla\")."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:227
msgid ""
"~~~\n"
"result = print('example')\n"
"print('result of print is', result)\n"
"~~~"
msgstr ""
"~~~\n"
"risultato = print('esempio')\n"
"print('il risultato di print è', risultato)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:231
msgid ""
"{: .language-python}\n"
"~~~\n"
"example\n"
"result of print is None\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"esempio\n"
"il risultato di print è None\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:238
msgid "> ## What Happens When"
msgstr "> ## L'ordine di esecuzione"

#: python-novice-gapminder/_episodes/04-built-in.md:239
msgid ""
">\n"
"> 1. Explain in simple terms the order of operations in the following program:\n"
">    when does the addition happen, when does the subtraction happen,\n"
">    when is each function called, etc.\n"
"> 2. What is the final value of `radiance`?\n"
">\n"
"> ~~~\n"
"> radiance = 1.0\n"
"> radiance = max(2.1, 2.0 + min(radiance, 1.1 * radiance - 0.5))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > 1.\n"
"> >    1. `1.1 * radiance = 1.1`\n"
"> >    2. `1.1 - 0.5 = 0.6`\n"
"> >    3. `min(radiance, 0.6) = 0.6`\n"
"> >    4. `2.0 + 0.6 = 2.6`\n"
"> >    5. `max(2.1, 2.6) = 2.6`\n"
"> > 2. At the end, `radiance = 2.6`"
msgstr ""
">\n"
"> 1. Spiega in modo semplice l'ordine delle operazioni nel seguente programma:\n"
">    quando si verifica l'addizione, quando la sottrazione,\n"
">    quando avviene la chiamata ad ognuna delle funzioni, ecc.\n"
"> 2. Qual è il valore finale di `radianza`?\n"
">\n"
"> ~~~\n"
"> radianza = 1.0\n"
"> radianza = max(2.1, 2.0 + min(radianza, 1.1 * radianza - 0.5))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Soluzione\n"
"> > 1.\n"
"> >    1. `1.1 * radianza = 1.1`\n"
"> >    2. `1.1 - 0.5 = 0.6`\n"
"> >    3. `min(radianza, 0.6) = 0.6`\n"
"> >    4. `2.0 + 0.6 = 2.6`\n"
"> >    5. `max(2.1, 2.6) = 2.6`\n"
"> > 2. Alla fine, `radianza = 2.6`"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:261
msgid "> ## Spot the Difference"
msgstr "> ## Trova le differenze"

#: python-novice-gapminder/_episodes/04-built-in.md:262
msgid ""
">\n"
"> 1. Predict what each of the `print` statements in the program below will print.\n"
"> 2. Does `max(len(rich), poor)` run or produce an error message?\n"
">    If it runs, does its result make any sense?\n"
">\n"
"> ~~~\n"
"> easy_string = \"abc\"\n"
"> print(max(easy_string))\n"
"> rich = \"gold\"\n"
"> poor = \"tin\"\n"
"> print(max(rich, poor))\n"
"> print(max(len(rich), len(poor)))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > print(max(easy_string))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > c\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(rich, poor))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > tin\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(len(rich), len(poor)))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 4\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > `max(len(rich), poor)` throws a TypeError. This turns into `max(4, 'tin')` and \n"
"> > as we discussed earlier a string and integer cannot meaningfully be compared.\n"
"> > ~~~\n"
"> > TypeError                                 Traceback (most recent call last)\n"
"> > <ipython-input-65-bc82ad05177a> in <module>\n"
"> > ----> 1 max(len(rich), poor)\n"
"> > \n"
"> > TypeError: '>' not supported between instances of 'str' and 'int'\n"
"> > ~~~\n"
"> > {: .error }"
msgstr ""
">\n"
"> 1. Cerca di prevedere che cosa sarà stampato da ognuna delle chiamate a `print` seguenti.\n"
"> 2. `max(len(rich), poor)` funziona o produce un messaggio di errore?\n"
">    Se funziona, pensi che il risultato abbia senso?\n"
">\n"
"> ~~~\n"
"> stringa_facile = \"abc\"\n"
"> print(max(stringa_facile))\n"
"> ricco = \"argento\"\n"
"> povero = \"stagno\"\n"
"> print(max(ricco, povero))\n"
"> print(max(len(ricco), len(povero)))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Soluzione\n"
"> > ~~~\n"
"> > print(max(stringa_facile))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > c\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(ricco, povero))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > stagno\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(len(ricco), len(povero)))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 7\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > `max(len(ricco), povero)` restituisce un TypeError (errore di tipo). L'operazione si traduce in `max(7, 'stagno')` e \n"
"> > come abbiamo detto in precedenza, non c'è un modo sensato di confrontare una stringa e un intero.\n"
"> > ~~~\n"
"> > TypeError                                 Traceback (most recent call last)\n"
"> > <ipython-input-65-bc82ad05177a> in <module>\n"
"> > ----> 1 max(len(ricco), povero)\n"
"> > \n"
"> > TypeError: '>' not supported between instances of 'str' and 'int'\n"
"> > ~~~\n"
"> > {: .error }"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:314
msgid "> ## Why Not?"
msgstr "> ## Perché no?"

#: python-novice-gapminder/_episodes/04-built-in.md:315
msgid ""
">\n"
"> Why don't `max` and `min` return `None` when they are given no arguments?\n"
">\n"
"> > ## Solution\n"
"> > `max` and `min` return TypeErrors in this case because the correct number of parameters\n"
"> > was not supplied. If it just returned `None`, the error would be much harder to trace as it\n"
"> > would likely be stored into a variable and used later in the program, only to likely throw\n"
"> > a runtime error."
msgstr ""
">\n"
"> Perché `max` e `min` non ritornano `None` quando non ricevono argomenti?\n"
">\n"
"> > ## Soluzione\n"
"> > `max` e `min` restituiscono dei TypeError in questo caso, perché non gli abbiamo dato il numero\n"
"> > giusto di parametri. Se restituisse `None`, l'errore sarebbe molto più difficile da trovare, perché\n"
"> > verrebbe probabilmente registrato in una variabile e usato più avanti nel programma,\n"
"> > probabilmente causando un runtime error."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:326
msgid "> ## Last Character of a String"
msgstr "> ## L'ultimo carattere in una stringa"

#: python-novice-gapminder/_episodes/04-built-in.md:327
msgid ""
">\n"
"> If Python starts counting from zero,\n"
"> and `len` returns the number of characters in a string,\n"
"> what index expression will get the last character in the string `name`?\n"
"> (Note: we will see a simpler way to do this in a later episode.)\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > `name[len(name) - 1]`"
msgstr ""
">\n"
"> Se Python inizia a contare da zero,\n"
"> e `len` restituisce il numero di caratteri in una stringa,\n"
"> qual è l'espressione con gli indici che restituirà l'ultimo carattere della stringa `nome`?\n"
"> (N.B.: studieremo un modo più semplice di fare lo stesso in una lezione successiva.)\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > `nome[len(nome) - 1]`"

# Front Matter
#: python-novice-gapminder/_episodes/05-coffee.md:1
msgid ""
"---\n"
"layout: break\n"
"title: \"Morning Coffee\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"
msgstr ""
"---\n"
"layout: break\n"
"title: \"Pausa di metà mattina\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"

# header
#: python-novice-gapminder/_episodes/05-coffee.md:8
#: python-novice-gapminder/_episodes/15-coffee.md:8
msgid "# Reflection exercise"
msgstr "# Esercizio su cui riflettere"

#: python-novice-gapminder/_episodes/05-coffee.md:10
msgid ""
"Over coffee, reflect on and discuss the following:\n"
"* What are the different kinds of errors Python will report?\n"
"* Did the code always produce the results you expected? If not, why?\n"
"* Is there something we can do to prevent errors when we write code?"
msgstr ""
"Mentre bevi il caffè, rifletti e discuti i punti seguenti:\n"
"* Quali sono i tipi di errore che Python può dare?\n"
"* Hai sempre ottenuto i risultati che ti aspettavi dal codice? Se no, perché?\n"
"* Quando scriviamo codice, cosa possiamo fare per prevenire gli errori?"

# Front Matter
#: python-novice-gapminder/_episodes/06-libraries.md:1
msgid ""
"---\n"
"title: \"Libraries\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use software that other people have written?\"\n"
"- \"How can I find out what that software does?\"\n"
"objectives:\n"
"- \"Explain what software libraries are and why programmers create and use them.\"\n"
"- \"Write programs that import and use libraries from Python's standard library.\"\n"
"- \"Find and read documentation for standard libraries interactively (in the interpreter) and online.\"\n"
"keypoints:\n"
"- \"Most of the power of a programming language is in its libraries.\"\n"
"- \"A program must import a library module in order to use it.\"\n"
"- \"Use `help` to learn about the contents of a library module.\"\n"
"- \"Import specific items from a library to shorten programs.\"\n"
"- \"Create an alias for a library when importing it to shorten programs.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Librerie\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Come si fa a usare software scritto da altri?\"\n"
"- \"Come si fa a sapere a cosa serve un certo software?\"\n"
"objectives:\n"
"- \"Spiegare cosa sono le librerie di software e perché i programmatori le creano e le usano.\"\n"
"- \"Scrivere programmi che importano e usano software della libreria standard di Python.\"\n"
"- \"Trovare e leggere la documentazione delle librerie standard in modo interattivo (nell'interprete) e online.\"\n"
"keypoints:\n"
"- \"Gran parte della forza di un linguaggio di programmazione consiste nelle sue librerie.\"\n"
"- \"Un modulo di una libreria deve essere importato per essere usato.\"\n"
"- \"Si usa `help` per scoprire il contenuto di un modulo di una libreria.\"\n"
"- \"Per accorciare i programmi, si possono importare solo specifici elementi di una libreria.\"\n"
"- \"Per accorciare i programmi, si può dare un alias a una libreria quando la si importa.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:19
msgid "## Most of the power of a programming language is in its libraries."
msgstr ""
"## Gran parte della forza di un linguaggio di programmazione consiste nelle "
"sue librerie."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:21
msgid ""
"*   A *library* is a collection of files (called *modules*) that contains"
msgstr ""
"*   Una *libreria* è una collezione di file (chiamati *moduli*) che contiene"

#: python-novice-gapminder/_episodes/06-libraries.md:22
msgid ""
"    functions for use by other programs.\n"
"    *   May also contain data values (e.g., numerical constants) and other things.\n"
"    *   Library's contents are supposed to be related, but there's no way to enforce that.\n"
"*   The Python [standard library][stdlib] is an extensive suite of modules that comes\n"
"    with Python itself.\n"
"*   Many additional libraries are available from [PyPI][pypi] (the Python Package Index).\n"
"*   We will see later how to write new libraries."
msgstr ""
"    funzioni scritte per essere usate da altri programmi.\n"
"    *   Può anche contenere dati (per esempio costanti numeriche) o altro.\n"
"    *   I contenuti di una libreria dovrebbero essere relativi a uno stesso tema, ma non c'è modo di garantirlo.\n"
"*   La [libreria standard][stdlib] di Python è un'estesa collezione di moduli che è sempre inclusa in Python stesso.\n"
"*   Moltissime librerie aggiuntive sono disponibili su [PyPI][pypi] (l'indice dei pacchetti di Python).\n"
"*   Vedremo come scrivere nuove librerie più avanti."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:30
msgid "> ## Libraries and modules"
msgstr "> ## Librerie e moduli"

#: python-novice-gapminder/_episodes/06-libraries.md:31
msgid ""
">\n"
"> A library is a collection of modules, but the terms are often used\n"
"> interchangeably, especially since many libraries only consist of a single\n"
"> module, so don't worry if you mix them."
msgstr ""
">\n"
"> Una libreria è una collezione di moduli, ma i due termini sono spesso usati come sinonimi,\n"
"> soprattutto perché molte librerie contengono un solo modulo; perciò, non preoccuparti se confondi le due cose."

# header
#: python-novice-gapminder/_episodes/06-libraries.md:38
msgid "## A program must import a library module before using it."
msgstr "## Un modulo di una libreria deve essere importato per essere usato."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:40
msgid "*   Use `import` to load a library module into a program's memory."
msgstr ""
"*   Si usa `import` per caricare un modulo di una libreria nella memoria di "
"un programma."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:41
msgid "*   Then refer to things from the module as `module_name.thing_name`."
msgstr ""
"*   Poi, ci si riferisce a un contenuto del modulo con "
"`nome_modulo.nome_contenuto`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:42
msgid "    *   Python uses `.` to mean \"part of\"."
msgstr "    *   Python usa `.` per significare \"parte di\"."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:43
msgid "*   Using `math`, one of the modules in the standard library:"
msgstr "*   Usando `math`, uno dei moduli della libreria standard:"

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:45
msgid ""
"~~~\n"
"import math\n"
"\n"
"print('pi is', math.pi)\n"
"print('cos(pi) is', math.cos(math.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math\n"
"\n"
"print('pi greco è', math.pi)\n"
"print('cos(pigreco) è', math.cos(math.pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:51
msgid ""
"{: .language-python}\n"
"~~~\n"
"pi is 3.141592653589793\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"pi greco è 3.141592653589793\n"
"cos(pigreco) è -1.0\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:58
msgid "*   Have to refer to each item with the module's name."
msgstr ""
"*   È necessario chiamare tutti gli elementi contenuti con il nome del "
"modulo."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:59
msgid "    *   `math.cos(pi)` won't work: the reference to `pi`"
msgstr "    *   `math.cos(pi)` non funziona, perché il riferimento a `pi`"

#: python-novice-gapminder/_episodes/06-libraries.md:60
msgid "        doesn't somehow \"inherit\" the function's reference to `math`."
msgstr ""
"        non ha modo di \"ereditare\" il riferimento a `math` della funzione."

# header
#: python-novice-gapminder/_episodes/06-libraries.md:62
msgid "## Use `help` to learn about the contents of a library module."
msgstr ""
"## Si usa `help` per scoprire il contenuto di un modulo di una libreria."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:64
msgid "*   Works just like help for a function."
msgstr "*   Funziona esattamente come help per una funzione."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:66
msgid ""
"~~~\n"
"help(math)\n"
"~~~"
msgstr ""
"~~~\n"
"help(math)\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:69
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"

#: python-novice-gapminder/_episodes/06-libraries.md:73
msgid ""
"NAME\n"
"    math"
msgstr ""
"NAME\n"
"    math"

#: python-novice-gapminder/_episodes/06-libraries.md:76
msgid ""
"MODULE REFERENCE\n"
"    http://docs.python.org/3/library/math"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:79
msgid ""
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above."
msgstr ""
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above."

#: python-novice-gapminder/_episodes/06-libraries.md:85
msgid ""
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard."
msgstr ""
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard."

#: python-novice-gapminder/_episodes/06-libraries.md:89
msgid ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"
msgstr ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:96
msgid "## Import specific items from a library module to shorten programs."
msgstr ""
"## Per accorciare i programmi, si possono importare solo specifici elementi "
"di una libreria."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:98
msgid ""
"*   Use `from ... import ...` to load only specific items from a library "
"module."
msgstr ""
"*   Si usa `from ... import ...` per caricare solo certi elementi specifici "
"da un modulo di una libreria"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:99
msgid "*   Then refer to them directly without library name as prefix."
msgstr ""
"*   Poi, ci si può riferire direttamente a questi senza usare il nome della "
"libreria come prefisso."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:101
msgid ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) is', cos(pi))\n"
"~~~"
msgstr ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pigreco) è', cos(pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:106
#: python-novice-gapminder/_episodes/06-libraries.md:122
msgid ""
"{: .language-python}\n"
"~~~\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"cos(pigreco) è -1.0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:112
msgid ""
"## Create an alias for a library module when importing it to shorten "
"programs."
msgstr ""
"## Per accorciare i programmi, si può dare un alias a una libreria quando la"
" si importa."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:114
msgid ""
"*   Use `import ... as ...` to give a library a short *alias* while "
"importing it."
msgstr ""
"*   Si usa `import ... as ...` per dare a una libreria un \"soprannome\" "
"(*alias*) quando la si importa."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:115
msgid "*   Then refer to items in the library using that shortened name."
msgstr ""
"*   Poi, ci si riferisce ai membri della libreria usando il nome abbreviato."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:117
msgid ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) is', m.cos(m.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pigreco) è', m.cos(m.pi))\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:128
msgid ""
"*   Commonly used for libraries that are frequently used or have long names."
msgstr ""
"*   Questo si fa normalmente per librerie che sono usate di frequente o "
"hanno nomi lunghi."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:129
msgid "    *   E.g., `matplotlib` plotting library is often aliased as `mpl`."
msgstr ""
"    *   Ad esempio, la libreria per i grafici `matplotlib` è spesso "
"abbreviata in `mpl`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:130
msgid "*   But can make programs harder to understand,"
msgstr "*   Tuttavia, questo può rendere i programmi più difficili da capire,"

#: python-novice-gapminder/_episodes/06-libraries.md:131
msgid "    since readers must learn your program's aliases."
msgstr "    poiché il lettore deve ricordarsi gli alias usati nel programma."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:133
msgid "> ## Exploring the Math Module"
msgstr "> ## Esplorare il modulo Math"

#: python-novice-gapminder/_episodes/06-libraries.md:134
msgid ""
">\n"
"> 1. What function from the `math` module can you use to calculate a square root\n"
">    *without* using `sqrt`?\n"
"> 2. Since the library contains this function, why does `sqrt` exist?\n"
">\n"
"> > ## Solution\n"
"> > 1. Using `help(math)` we see that we've got `pow(x,y)` in addition to `sqrt(x)`,\n"
"> >    so we could use `pow(x, 0.5)` to find a square root.\n"
"> > 2. The `sqrt(x)` function is arguably more readable than `pow(x, 0.5)` when\n"
"> >    implementing equations. Readability is a cornerstone of good programming, so it\n"
"> >    makes sense to provide a special function for this specific common case.\n"
"> >\n"
"> >    Also, the design of Python's `math` library has its origin in the C standard,\n"
"> >    which includes both `sqrt(x)` and `pow(x,y)`, so a little bit of the history\n"
"> >    of programming is showing in Python's function names."
msgstr ""
">\n"
"> 1. Quale funzione del modulo `math` si potrebbe usare per calcolare una radice quadrata\n"
">    *senza* usare `sqrt`?\n"
"> 2. Se questa funzione è presente nella libreria, perché esiste anche `sqrt`?\n"
">\n"
"> > ## Soluzione\n"
"> > 1. Usando `help(math)` notiamo che c'è anche `pow(x,y)` oltre a `sqrt(x)`,\n"
"> >    pertanto possiamo usare `pow(x, 0.5)` per calcolare una radice quadrata.\n"
"> > 2. Si può dire che la funzione `sqrt(x)` sia più leggibile di `pow(x, 0.5)`\n"
"> >    scrivendo un'equzione. La leggibilità è una pietra angolare della buona programmazione,\n"
"> >    per cui ha senso avere una funzione specialmente per questo caso specifico comune.\n"
"> >\n"
"> >    Inoltre, la struttura della libreria `math` di Python ha le sue radici nello standard del C,\n"
"> >    che include sia `sqrt(x)` che `pow(x,y)`, pertanto un indizio della storia\n"
"> >    della programmazione emerge dai nomi delle funzioni di Python."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:152
msgid "> ## Locating the Right Module"
msgstr "> ## Trovare il modulo giusto"

#: python-novice-gapminder/_episodes/06-libraries.md:153
msgid ""
">\n"
"> You want to select a random character from a string:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Which [standard library][stdlib] module could help you?\n"
"> 2. Which function would you select from that module? Are there alternatives?\n"
"> 3. Try to write a program that uses the function.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The [random module][randommod] seems like it could help you.\n"
"> >\n"
"> > The string has 11 characters, each having a positional index from 0 to 10.\n"
"> > You could use `random.randrange` function (or the alias `random.randint`\n"
"> > if you find that easier to remember) to get a random integer between 0 and\n"
"> > 10, and then pick out the character at that position:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > or more compactly:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Perhaps you found the `random.sample` function? It allows for slightly\n"
"> > less typing:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Note that this function returns a list of values. We will learn about\n"
"> > lists in [episode 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > There's also other functions you could use, but with more convoluted\n"
"> > code as a result."
msgstr ""
">\n"
"> Immagina di voler scegliere un carattere a caso all'interno di una stringa:\n"
">\n"
"> ~~~\n"
"> basi = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Quale modulo della [libreria standard][stdlib] può aiutarti?\n"
"> 2. Che funzione sceglieresti all'interno di questo modulo? Ci sono diverse alternative?\n"
"> 3. Prova a scrivere un programma usando quella funzione.\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > Il [modulo random][randommod] (funzioni casuali) sembra essere d'aiuto.\n"
"> >\n"
"> > La stringa ha 11 caratteri, ognuno dei quali ha un indice posizionale tra 0 e 10.\n"
"> > Puoi usare la funzione `random.randrange` (o il suo sinonimo `random.randint`\n"
"> > se lo trovi più facile da ricordare) per ottenere un intero casuale tra 0 e\n"
"> > 10, e poi scegliere il carattere corrispondente a quella posizione:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > indice_casuale = randrange(len(basi))\n"
"> > print(basi[indice_casuale])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > o anche, in maniera più compatta:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(basi[randrange(len(basi))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Forse avrai notato anche la funzione `random.sample`. Ci permette di essere\n"
"> > più sintetici:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(basi, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Nota che questa funzione restituisce una lista di valori. Impareremo a usare le liste\n"
"> > nell'[episodio 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > Ci sono anche altre funzioni che si potrebbero usare, ma ci costringerebbero a scrivere\n"
"> > codice più contorto."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:210
msgid "> ## Jigsaw Puzzle (Parson's Problem) Programming Example"
msgstr "> ## Esempio di programmazione: un puzzle (problema di Parson)"

#: python-novice-gapminder/_episodes/06-libraries.md:211
msgid ""
">\n"
"> Rearrange the following statements so that a random\n"
"> DNA base is printed and its index in the string.  Not all statements may be needed.  Feel free to use/add\n"
"> intermediate variables.\n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"random base \", bases[___], \"base index\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"random base\", bases[idx], \"base index\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Riordina le istruzioni seguenti in modo che una base di DNA casuale sia stampata\n"
"> insieme al valore del suo indice all'interno della stringa.  Non tutte le istruzioni sono\n"
"> necessariamente da usare. Aggiungi liberamente variabili intermedie se vuoi.\n"
">\n"
"> ~~~\n"
"> basi = \"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_basi)\n"
"> ___ = len(basi)\n"
"> print(\"base casuale \", basi[___], \"indice della base\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > basi = \"ACTTGCTTGAC\" \n"
"> > n_basi = len(basi)\n"
"> > idx = random.randrange(n_basi)\n"
"> > print(\"base casuale\", bases[idx], \"indice della base\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:240
msgid "> ## When Is Help Available?"
msgstr "> ## Quando è disponibile aiuto?"

#: python-novice-gapminder/_episodes/06-libraries.md:241
msgid ""
">\n"
"> When a colleague of yours types `help(math)`,\n"
"> Python reports an error:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"
msgstr ""
">\n"
"> Quando un tuo collega scrive `help(math)`,\n"
"> Python dà un errore:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:249
msgid ""
">\n"
"> What has your colleague forgotten to do?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Importing the math module (`import math`)"
msgstr ""
">\n"
"> Che cosa ha dimenticato di fare il tuo collega?\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > Ha dimenticato di importare il modulo math (`import math`)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:258
msgid "> ## Importing With Aliases"
msgstr "> ## Importare con gli alias"

#: python-novice-gapminder/_episodes/06-libraries.md:259
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Rewrite the program so that it uses `import` *without* `as`.\n"
"> 3. Which form do you find easier to read?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > can be written as\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Since you just wrote the code and are familiar with it, you might actually\n"
"> > find the first version easier to read. But when trying to read a huge piece\n"
"> > of code written by someone else, or when getting back to your own huge piece\n"
"> > of code after several months, non-abbreviated names are often easier, except\n"
"> > where there are clear abbreviation conventions."
msgstr ""
">\n"
"> 1. Riempi gli spazi vuoti in modo che il programma seguente stampi `90.0`.\n"
"> 2. Riscrivi il programma in modo che usi `import` *senza* `as`.\n"
"> 3. Quale delle due formi trovi sia più facile da leggere?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angolo = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angolo = m.degrees(m.pi / 2)\n"
"> > print(angolo)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > può essere scritto anche\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angolo = math.degrees(math.pi / 2)\n"
"> > print(angolo)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Poiché hai appena scritto questo codice e lo conosci bene, potresti\n"
"> > trovare la prima versione più facile da leggere. Ma se leggessi un enorme programma\n"
"> > scritto da qualcun altro, o tornassi a leggere un enorme programma scritto da te\n"
"> > parecchi mesi più tardi, troveresti i nomi non abbreviati spesso più semplici, eccetto\n"
"> > laddove ci sono chiare convenzioni su come abbreviare."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:297
msgid "> ## There Are Many Ways To Import Libraries!"
msgstr "> ## Ci sono molti modi di importare le librerie!"

#: python-novice-gapminder/_episodes/06-libraries.md:298
msgid ""
">\n"
"> Match the following print statements with the appropriate library calls.\n"
">\n"
"> Print commands:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Library calls:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Library calls 1 and 4. In order to directly refer to `sin` and `pi` without\n"
"> >    the library name as prefix, you need to use the `from ... import ...`\n"
"> >    statement. Whereas library call 1 specifically imports the two functions\n"
"> >    `sin` and `pi`, library call 4 imports all functions in the `math` module.\n"
"> > 2. Library call 3. Here `sin` and `pi` are referred to with a shortened library\n"
"> >    name `m` instead of `math`. Library call 3 does exactly that using the\n"
"> >    `import ... as ...` syntax - it creates an alias for `math` in the form of\n"
"> >    the shortened name `m`.\n"
"> > 3. Library call 2. Here `sin` and `pi` are referred to with the regular library\n"
"> >    name `math`, so the regular `import ...` call suffices."
msgstr ""
">\n"
"> Abbina le seguenti istruzioni `print` con il modo appropriato di importare la libreria.\n"
">\n"
"> Istruzioni print:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Importazioni:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > 1. La libreria può essere importata nei modi 1 e 4. Per poter chiamare `sin` e `pi` senza\n"
"> >    il nome della libreria come prefisso, bisogna usare l'istruzione `from ... import ...`.\n"
"> >    L'importazione 1 importa specificamente le due funzioni\n"
"> >    `sin` and `pi`, l'importazione 4 importa tutte le funzioni del modulo `math`.\n"
"> > 2. L'importazione 3. Qui `sin` e `pi` sono chiamati con il nome abbreviato\n"
"> >    `m` anziché `math`. L'importazione 3 permette esattamente questo con la sintassi\n"
"> >    `import ... as ...`: crea l'alias `m` come forma abbreviata di `math`.\n"
"> > 3. L'importazione 2. Qui `sin` e `pi` sono chiamati attraverso il normale nome\n"
"> >    della libreria `math`, quindi basta la semplice chiamata `import ...`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:329
msgid "> ## Importing Specific Items"
msgstr "> ## Importare elementi specifici"

#: python-novice-gapminder/_episodes/06-libraries.md:330
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Do you find this version easier to read than preceding ones?\n"
"> 3. Why *wouldn't* programmers always use this form of `import`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Most likely you find this version easier to read since it's less dense.\n"
"> > The main reason not to use this form of import is to avoid name clashes.\n"
"> > For instance, you wouldn't import `degrees` this way if you also wanted to\n"
"> > use the name `degrees` for a variable or function of your own. Or if you\n"
"> > were to also import a function named `degrees` from another library."
msgstr ""
">\n"
"> 1. Riempi gli spazi vuoti in modo che il programma seguente stampi `90.0`.\n"
"> 2. Trovi che questa versione sia più facile da leggere rispetto alle precedenti?\n"
"> 3. Qual è una possibile ragione per *non* usare sempre questa forma di `import`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angolo = degrees(pi / 2)\n"
"> print(angolo)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angolo = degrees(pi / 2)\n"
"> > print(angolo)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Probabilmente troverai questa versione più facile da leggere, visto che è meno disordinata.\n"
"> > La ragione principale per non usare questo modo di importare è quando si vogliono evitare conflitti di nomi.\n"
"> > Per esempio, non puoi importare `degrees` in questo modo quando vuoi anche\n"
"> > usare il nome `degrees` per una variabile o una funzione scritta da te, o se\n"
"> > ti serve anche importare una funzione chiamata `degrees` da un'altra libreria."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:359
#: python-novice-gapminder/_episodes/17-scope.md:76
msgid "> ## Reading Error Messages"
msgstr "> ## Leggere i messaggi di errore"

#: python-novice-gapminder/_episodes/06-libraries.md:360
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are without running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. The logarithm of `x` is only defined for `x > 0`, so 0 is outside the\n"
"> >    domain of the function.\n"
"> > 2. You get an error of type \"ValueError\", indicating that the function\n"
"> >    received an inappropriate argument value. The additional message\n"
"> >    \"math domain error\" makes it clearer what the problem is."
msgstr ""
">\n"
"> 1. Leggi il codice seguente e cerca di identificare gli errori senza eseguirlo.\n"
"> 2. Esegui il codice, e leggi il messaggio di errore. Che tipo di errore è?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Soluzione\n"
"> >\n"
"> > 1. Il logaritmo di `x` è definito solo per `x > 0`, pertanto 0 è al di fuori del\n"
"> >    dominio della funzione.\n"
"> > 2. Si ottiene un errore di tipo \"ValueError\", che indica che la funzione\n"
"> >    ha ricevuto un valore inadatto in uno dei suoi argomenti. Il messaggio aggiuntivo\n"
"> >    \"math domain error\" chiarifica qual è il problema."

#: python-novice-gapminder/_episodes/06-libraries.md:380
msgid ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"
msgstr ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"

# Front Matter
#: python-novice-gapminder/_episodes/07-reading-tabular.md:1
msgid ""
"---\n"
"title: \"Reading Tabular Data into DataFrames\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I read tabular data?\"\n"
"objectives:\n"
"- \"Import the Pandas library.\"\n"
"- \"Use Pandas to load a simple CSV data set.\"\n"
"- \"Get some basic information about a Pandas DataFrame.\"\n"
"keypoints:\n"
"- \"Use the Pandas library to get basic statistics out of tabular data.\"\n"
"- \"Use `index_col` to specify that a column's values should be used as row headings.\"\n"
"- \"Use `DataFrame.info` to find out more about a dataframe.\"\n"
"- \"The `DataFrame.columns` variable stores information about the dataframe's columns.\"\n"
"- \"Use `DataFrame.T` to transpose a dataframe.\"\n"
"- \"Use `DataFrame.describe` to get summary statistics about data.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Leggere tabelle sottoforma di DataFrame\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Come si possono leggere i dati di una tabella?\"\n"
"objectives:\n"
"- \"Importare la libreria Pandas.\"\n"
"- \"Usare Pandas per caricare un semplice dataset in formato CSV.\"\n"
"- \"Leggere le informazioni di base relative a un DataFrame di Pandas.\"\n"
"keypoints:\n"
"- \"Usare la libreria Pandas per studiare le statistiche di base di una tabella di dati.\"\n"
"- \"Usre `index_col` per specificare che i valori di una colonna devono essere usati come titoli delle righe.\"\n"
"- \"Usare `DataFrame.info` per saperne di più su un dataframe.\"\n"
"- \"La variabile `DataFrame.columns` contiene le informazioni relative alle colonne del dataframe.\"\n"
"- \"Usare `DataFrame.T` per trasporre un dataframe.\"\n"
"- \"Usare `DataFrame.describe` per calcolare le statistiche riassuntive di un insieme di dati.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:19
msgid "## Use the Pandas library to do statistics on tabular data."
msgstr ""
"## Usare la libreria Pandas per studiare le statistiche di base di una "
"tabella di dati."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:21
msgid ""
"*   Pandas is a widely-used Python library for statistics, particularly on "
"tabular data."
msgstr ""
"*   Pandas è una libreria di Python, diffusamente usata per la statistica, "
"in particolare su dati tabulari."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:22
msgid "*   Borrows many features from R's dataframes."
msgstr ""
"*   Prende in prestito molte caratteristiche dei dataframe del linguaggio di"
" programmazione R."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:23
msgid "    *   A 2-dimensional table whose columns have names"
msgstr ""
"    *   Una tabella bidimensionale le cui colonne hanno nomi assegnati"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:24
msgid ""
"        and potentially have different data types.\n"
"*   Load it with `import pandas as pd`. The alias pd is commonly used for Pandas.\n"
"*   Read a Comma Separate Values (CSV) data file with `pd.read_csv`.\n"
"    *   Argument is the name of the file to be read.\n"
"    *   Assign result to a variable to store the data that was read."
msgstr ""
"        e, potenzialmente, tipi di dati diversi.\n"
"*   La libreria si importa usando `import pandas as pd`. L'alias `pd` è quello usato più comunemente per Pandas.\n"
"*   Si può leggere un file di dati CSV (Comma-Separated Values, valori separati da virgole) usando `pd.read_csv`.\n"
"    *   L'argomento della funzione è il nome del file da leggere.\n"
"    *   Per tenere in memoria i dati letti dal file, si assegna il risultato a una variabile."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:30
msgid ""
"~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv')\n"
"print(data)\n"
"~~~"
msgstr ""
"~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv')\n"
"print(data)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:36
msgid ""
"{: .language-python}\n"
"~~~\n"
"       country  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"0    Australia     10039.59564     10949.64959     12217.22686\n"
"1  New Zealand     10556.57566     12247.39532     13175.67800"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"       country  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"0    Australia     10039.59564     10949.64959     12217.22686\n"
"1  New Zealand     10556.57566     12247.39532     13175.67800"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:42
msgid ""
"   gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"0     14526.12465     16788.62948     18334.19751     19477.00928\n"
"1     14463.91893     16046.03728     16233.71770     17632.41040"
msgstr ""
"   gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"0     14526.12465     16788.62948     18334.19751     19477.00928\n"
"1     14463.91893     16046.03728     16233.71770     17632.41040"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:46
msgid ""
"   gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"0     21888.88903     23424.76683     26997.93657     30687.75473\n"
"1     19007.19129     18363.32494     21050.41377     23189.80135"
msgstr ""
"   gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"0     21888.88903     23424.76683     26997.93657     30687.75473\n"
"1     19007.19129     18363.32494     21050.41377     23189.80135"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:50
msgid ""
"   gdpPercap_2007\n"
"0     34435.36744\n"
"1     25185.00911\n"
"~~~"
msgstr ""
"   gdpPercap_2007\n"
"0     34435.36744\n"
"1     25185.00911\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:56
msgid ""
"*   The columns in a dataframe are the observed variables, and the rows are "
"the observations."
msgstr ""
"*   Le colonne di un dataframe sono le variabili misurate, mentre le righe "
"sono le singole misurazioni."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:57
msgid ""
"*   Pandas uses backslash `\\` to show wrapped lines when output is too wide"
" to fit the screen."
msgstr ""
"*   Pandas usa la barra rovesciata `\\` per indicare le linee di testo che "
"sono state mandate a capo perché troppo larghe per lo schermo."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:59
msgid "> ## File Not Found"
msgstr "> ## File non trovato"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:60
msgid ""
">\n"
"> Our lessons store their data files in a `data` sub-directory,\n"
"> which is why the path to the file is `data/gapminder_gdp_oceania.csv`.\n"
"> If you forget to include `data/`,\n"
"> or if you include it but your copy of the file is somewhere else,\n"
"> you will get a [runtime error]({{ page.root }}/04-built-in/#runtime-error)\n"
"> that ends with a line like this:\n"
">\n"
"> ~~~\n"
"> OSError: File b'gapminder_gdp_oceania.csv' does not exist\n"
"> ~~~"
msgstr ""
">\n"
"> Le nostre lezioni hanno i file di dati salvati in una sottocartella `data`,\n"
"> ragion per cui il percorso del file è `data/gapminder_gdp_oceania.csv`.\n"
"> Se ti dimentichi di mettere `data/`, o se lo metti, ma la tua copia\n"
"> del file è stata salvata altrove, otterrai un\n"
"> [runtime error]({{ page.root }}/04-built-in/#runtime-error)\n"
"> che finisce con una frase come questa:\n"
">\n"
"> ~~~\n"
"> OSError: File b'gapminder_gdp_oceania.csv' does not exist\n"
"> ~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:74
msgid ""
"## Use `index_col` to specify that a column's values should be used as row "
"headings."
msgstr ""
"## Usare `index_col` per specificare che i valori di una colonna devono "
"essere usati come titoli delle righe."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:76
msgid "*   Row headings are numbers (0 and 1 in this case)."
msgstr "*   I titoli  delle righe sono numeri (0 e 1, in questo caso)."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:77
msgid "*   Really want to index by country."
msgstr "*   Vogliamo però indicizzare in base al paese."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:78
msgid ""
"*   Pass the name of the column to `read_csv` as its `index_col` parameter "
"to do this."
msgstr ""
"*   Per fare ciò, passa il nome della colonna alla funzione `read_csv` "
"attraverso il suo parametro `index_col`."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:80
msgid ""
"~~~\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"print(data)\n"
"~~~"
msgstr ""
"~~~\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"print(data)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:84
msgid ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"country\n"
"Australia       10039.59564     10949.64959     12217.22686     14526.12465\n"
"New Zealand     10556.57566     12247.39532     13175.67800     14463.91893"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"country\n"
"Australia       10039.59564     10949.64959     12217.22686     14526.12465\n"
"New Zealand     10556.57566     12247.39532     13175.67800     14463.91893"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:91
msgid ""
"             gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"country\n"
"Australia       16788.62948     18334.19751     19477.00928     21888.88903\n"
"New Zealand     16046.03728     16233.71770     17632.41040     19007.19129"
msgstr ""
"             gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"country\n"
"Australia       16788.62948     18334.19751     19477.00928     21888.88903\n"
"New Zealand     16046.03728     16233.71770     17632.41040     19007.19129"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:96
msgid ""
"             gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"country\n"
"Australia       23424.76683     26997.93657     30687.75473     34435.36744\n"
"New Zealand     18363.32494     21050.41377     23189.80135     25185.00911\n"
"~~~"
msgstr ""
"             gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"country\n"
"Australia       23424.76683     26997.93657     30687.75473     34435.36744\n"
"New Zealand     18363.32494     21050.41377     23189.80135     25185.00911\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:103
msgid "## Use `DataFrame.info` to find out more about a dataframe."
msgstr "## Usare `DataFrame.info` per saperne di più su un dataframe."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:105
msgid ""
"~~~\n"
"data.info()\n"
"~~~"
msgstr ""
"~~~\n"
"data.info()\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:108
msgid ""
"{: .language-python}\n"
"~~~\n"
"<class 'pandas.core.frame.DataFrame'>\n"
"Index: 2 entries, Australia to New Zealand\n"
"Data columns (total 12 columns):\n"
"gdpPercap_1952    2 non-null float64\n"
"gdpPercap_1957    2 non-null float64\n"
"gdpPercap_1962    2 non-null float64\n"
"gdpPercap_1967    2 non-null float64\n"
"gdpPercap_1972    2 non-null float64\n"
"gdpPercap_1977    2 non-null float64\n"
"gdpPercap_1982    2 non-null float64\n"
"gdpPercap_1987    2 non-null float64\n"
"gdpPercap_1992    2 non-null float64\n"
"gdpPercap_1997    2 non-null float64\n"
"gdpPercap_2002    2 non-null float64\n"
"gdpPercap_2007    2 non-null float64\n"
"dtypes: float64(12)\n"
"memory usage: 208.0+ bytes\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"<class 'pandas.core.frame.DataFrame'>\n"
"Index: 2 entries, Australia to New Zealand\n"
"Data columns (total 12 columns):\n"
"gdpPercap_1952    2 non-null float64\n"
"gdpPercap_1957    2 non-null float64\n"
"gdpPercap_1962    2 non-null float64\n"
"gdpPercap_1967    2 non-null float64\n"
"gdpPercap_1972    2 non-null float64\n"
"gdpPercap_1977    2 non-null float64\n"
"gdpPercap_1982    2 non-null float64\n"
"gdpPercap_1987    2 non-null float64\n"
"gdpPercap_1992    2 non-null float64\n"
"gdpPercap_1997    2 non-null float64\n"
"gdpPercap_2002    2 non-null float64\n"
"gdpPercap_2007    2 non-null float64\n"
"dtypes: float64(12)\n"
"memory usage: 208.0+ bytes\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:130
msgid "*   This is a `DataFrame`"
msgstr "*   Questo è un `DataFrame`"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:131
msgid "*   Two rows named `'Australia'` and `'New Zealand'`"
msgstr "*   Due righe, chiamate `'Australia'` e `'New Zealand'`"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:132
msgid ""
"*   Twelve columns, each of which has two actual 64-bit floating point "
"values."
msgstr ""
"*   Dodici colonne, ognuna delle quali contiene due valori in virgola mobile"
" a 64 bit."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:133
msgid ""
"    *   We will talk later about null values, which are used to represent "
"missing observations."
msgstr ""
"    *   Più avanti parleremo anche dei valori \"nulli\", che sono usati per "
"indicare misurazioni mancanti."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:134
msgid "*   Uses 208 bytes of memory."
msgstr "*   Usa 208 byte di memoria."

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:136
msgid ""
"## The `DataFrame.columns` variable stores information about the dataframe's"
" columns."
msgstr ""
"## La variabile `DataFrame.columns` contiene le informazioni relative alle "
"colonne del dataframe."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:138
msgid "*   Note that this is data, *not* a method."
msgstr ""
"*   Nota bene, questa è una variabile che contiene dati, *non* un metodo."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:139
msgid "    *   Like `math.pi`."
msgstr "    *   Allo stesso modo di `math.pi`."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:140
msgid "    *   So do not use `()` to try to call it."
msgstr "    *   Per cui, non si usa `()` per chiamarlo."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:141
msgid "*   Called a *member variable*, or just *member*."
msgstr "*   Queste variabili vengono chiamate *membri*."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:143
msgid ""
"~~~\n"
"print(data.columns)\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.columns)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:146
msgid ""
"{: .language-python}\n"
"~~~\n"
"Index(['gdpPercap_1952', 'gdpPercap_1957', 'gdpPercap_1962', 'gdpPercap_1967',\n"
"       'gdpPercap_1972', 'gdpPercap_1977', 'gdpPercap_1982', 'gdpPercap_1987',\n"
"       'gdpPercap_1992', 'gdpPercap_1997', 'gdpPercap_2002', 'gdpPercap_2007'],\n"
"      dtype='object')\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Index(['gdpPercap_1952', 'gdpPercap_1957', 'gdpPercap_1962', 'gdpPercap_1967',\n"
"       'gdpPercap_1972', 'gdpPercap_1977', 'gdpPercap_1982', 'gdpPercap_1987',\n"
"       'gdpPercap_1992', 'gdpPercap_1997', 'gdpPercap_2002', 'gdpPercap_2007'],\n"
"      dtype='object')\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:155
msgid "## Use `DataFrame.T` to transpose a dataframe."
msgstr "## Usare `DataFrame.T` per trasporre un dataframe."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:157
msgid "*   Sometimes want to treat columns as rows and vice versa."
msgstr ""
"*   A volte, capita di voler trattare le righe come colonne, o viceversa."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:158
msgid ""
"*   Transpose (written `.T`) doesn't copy the data, just changes the "
"program's view of it."
msgstr ""
"*   La trasposta (che si scrive `.T`) non copia i dati in un nuovo "
"dataframe, ma cambia la 'vista' che il programma ha dei dati."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:159
msgid "*   Like `columns`, it is a member variable."
msgstr "*   Come `columns`, è una variabile membro."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:161
msgid ""
"~~~\n"
"print(data.T)\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.T)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:164
msgid ""
"{: .language-python}\n"
"~~~\n"
"country           Australia  New Zealand\n"
"gdpPercap_1952  10039.59564  10556.57566\n"
"gdpPercap_1957  10949.64959  12247.39532\n"
"gdpPercap_1962  12217.22686  13175.67800\n"
"gdpPercap_1967  14526.12465  14463.91893\n"
"gdpPercap_1972  16788.62948  16046.03728\n"
"gdpPercap_1977  18334.19751  16233.71770\n"
"gdpPercap_1982  19477.00928  17632.41040\n"
"gdpPercap_1987  21888.88903  19007.19129\n"
"gdpPercap_1992  23424.76683  18363.32494\n"
"gdpPercap_1997  26997.93657  21050.41377\n"
"gdpPercap_2002  30687.75473  23189.80135\n"
"gdpPercap_2007  34435.36744  25185.00911\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"country           Australia  New Zealand\n"
"gdpPercap_1952  10039.59564  10556.57566\n"
"gdpPercap_1957  10949.64959  12247.39532\n"
"gdpPercap_1962  12217.22686  13175.67800\n"
"gdpPercap_1967  14526.12465  14463.91893\n"
"gdpPercap_1972  16788.62948  16046.03728\n"
"gdpPercap_1977  18334.19751  16233.71770\n"
"gdpPercap_1982  19477.00928  17632.41040\n"
"gdpPercap_1987  21888.88903  19007.19129\n"
"gdpPercap_1992  23424.76683  18363.32494\n"
"gdpPercap_1997  26997.93657  21050.41377\n"
"gdpPercap_2002  30687.75473  23189.80135\n"
"gdpPercap_2007  34435.36744  25185.00911\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:182
msgid "## Use `DataFrame.describe` to get summary statistics about data."
msgstr ""
"## Usare `DataFrame.describe` per calcolare le statistiche riassuntive di un"
" insieme di dati."

#: python-novice-gapminder/_episodes/07-reading-tabular.md:184
msgid ""
"DataFrame.describe() gets the summary statistics of only the columns that have numerical data. \n"
"All other columns are ignored, unless you use the argument `include='all'`.\n"
"~~~\n"
"print(data.describe())\n"
"~~~\n"
"{: .language-python}\n"
"~~~\n"
"       gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     10298.085650    11598.522455    12696.452430    14495.021790\n"
"std        365.560078      917.644806      677.727301       43.986086\n"
"min      10039.595640    10949.649590    12217.226860    14463.918930\n"
"25%      10168.840645    11274.086022    12456.839645    14479.470360\n"
"50%      10298.085650    11598.522455    12696.452430    14495.021790\n"
"75%      10427.330655    11922.958888    12936.065215    14510.573220\n"
"max      10556.575660    12247.395320    13175.678000    14526.124650"
msgstr ""
"DataFrame.describe() calcola le statistiche riassuntive delle sole colonne che contengono dati numerici. \n"
"Tutte le altre colonne vengono ignorate, a meno di usare l'argomento `include='all'`.\n"
"~~~\n"
"print(data.describe())\n"
"~~~\n"
"{: .language-python}\n"
"~~~\n"
"       gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     10298.085650    11598.522455    12696.452430    14495.021790\n"
"std        365.560078      917.644806      677.727301       43.986086\n"
"min      10039.595640    10949.649590    12217.226860    14463.918930\n"
"25%      10168.840645    11274.086022    12456.839645    14479.470360\n"
"50%      10298.085650    11598.522455    12696.452430    14495.021790\n"
"75%      10427.330655    11922.958888    12936.065215    14510.573220\n"
"max      10556.575660    12247.395320    13175.678000    14526.124650"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:201
msgid ""
"       gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"count         2.00000        2.000000        2.000000        2.000000\n"
"mean      16417.33338    17283.957605    18554.709840    20448.040160\n"
"std         525.09198     1485.263517     1304.328377     2037.668013\n"
"min       16046.03728    16233.717700    17632.410400    19007.191290\n"
"25%       16231.68533    16758.837652    18093.560120    19727.615725\n"
"50%       16417.33338    17283.957605    18554.709840    20448.040160\n"
"75%       16602.98143    17809.077557    19015.859560    21168.464595\n"
"max       16788.62948    18334.197510    19477.009280    21888.889030"
msgstr ""
"       gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"count         2.00000        2.000000        2.000000        2.000000\n"
"mean      16417.33338    17283.957605    18554.709840    20448.040160\n"
"std         525.09198     1485.263517     1304.328377     2037.668013\n"
"min       16046.03728    16233.717700    17632.410400    19007.191290\n"
"25%       16231.68533    16758.837652    18093.560120    19727.615725\n"
"50%       16417.33338    17283.957605    18554.709840    20448.040160\n"
"75%       16602.98143    17809.077557    19015.859560    21168.464595\n"
"max       16788.62948    18334.197510    19477.009280    21888.889030"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:211
msgid ""
"       gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     20894.045885    24024.175170    26938.778040    29810.188275\n"
"std       3578.979883     4205.533703     5301.853680     6540.991104\n"
"min      18363.324940    21050.413770    23189.801350    25185.009110\n"
"25%      19628.685413    22537.294470    25064.289695    27497.598692\n"
"50%      20894.045885    24024.175170    26938.778040    29810.188275\n"
"75%      22159.406358    25511.055870    28813.266385    32122.777857\n"
"max      23424.766830    26997.936570    30687.754730    34435.367440\n"
"~~~"
msgstr ""
"       gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     20894.045885    24024.175170    26938.778040    29810.188275\n"
"std       3578.979883     4205.533703     5301.853680     6540.991104\n"
"min      18363.324940    21050.413770    23189.801350    25185.009110\n"
"25%      19628.685413    22537.294470    25064.289695    27497.598692\n"
"50%      20894.045885    24024.175170    26938.778040    29810.188275\n"
"75%      22159.406358    25511.055870    28813.266385    32122.777857\n"
"max      23424.766830    26997.936570    30687.754730    34435.367440\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:223
msgid "*   Not particularly useful with just two records,"
msgstr ""
"*   Non è un'operazione particolarmente utile quando abbiamo solo due righe,"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:224
msgid "    but very helpful when there are thousands."
msgstr "    ma può essere molto utile quando ne abbiamo migliaia."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:226
msgid "> ## Reading Other Data"
msgstr "> ## Leggere altri dati"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:227
msgid ""
">\n"
"> Read the data in `gapminder_gdp_americas.csv`\n"
"> (which should be in the same directory as `gapminder_gdp_oceania.csv`)\n"
"> into a variable called `americas`\n"
"> and display its summary statistics.\n"
">\n"
"> > ## Solution\n"
"> > To read in a CSV, we use `pd.read_csv` and pass the filename 'data/gapminder_gdp_americas.csv' to it. We also once again pass the\n"
"> > column name 'country' to the parameter `index_col` in order to index by country:\n"
"> > ~~~\n"
"> > americas = pd.read_csv('data/gapminder_gdp_americas.csv', index_col='country')\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""
">\n"
"> Carica i dati contenuti nel file `gapminder_gdp_americas.csv`\n"
"> (che dovrebbe essere nella stessa cartella di `gapminder_gdp_oceania.csv`)\n"
"> in una variabile chiamata `americas`\n"
"> e mostra le sue statistiche riassuntive.\n"
">\n"
"> > ## Soluzione\n"
"> > Per leggere da un CSV, usiamo `pd.read_csv` passando il nome del file 'data/gapminder_gdp_americas.csv' alla funzione. Inoltre, passiamo\n"
"> > ancora una volta il nome della colonna 'country' al parametro\n"
"> >  `index_col` in modo da indicizzare per paese:\n"
"> > ~~~\n"
"> > americas = pd.read_csv('data/gapminder_gdp_americas.csv', index_col='country')\n"
"> > ~~~\n"
"> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:245
msgid "> ## Inspecting Data."
msgstr "> ## Esaminare i dati."

#: python-novice-gapminder/_episodes/07-reading-tabular.md:246
msgid ""
">\n"
"> After reading the data for the Americas,\n"
"> use `help(americas.head)` and `help(americas.tail)`\n"
"> to find out what `DataFrame.head` and `DataFrame.tail` do.\n"
">\n"
"> 1.  What method call will display the first three rows of this data?\n"
"> 2.  What method call will display the last three columns of this data?\n"
">     (Hint: you may need to change your view of the data.)\n"
">\n"
"> > ## Solution\n"
"> > 1. We can check out the first five rows of `americas` by executing `americas.head()` (allowing us to view the head\n"
"> > of the DataFrame). We can specify the number of rows we wish to see by specifying the parameter `n` in our call\n"
"> > to `americas.head()`. To view the first three rows, execute:\n"
"> >\n"
"> > ~~~\n"
"> > americas.head(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > \n"
"> > The output is then\n"
"> > ~~~\n"
"> >          continent  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"> >country                                                               \n"
"> >Argentina  Americas     5911.315053     6856.856212     7133.166023   \n"
"> >Bolivia    Americas     2677.326347     2127.686326     2180.972546   \n"
"> >Brazil     Americas     2108.944355     2487.365989     3336.585802   \n"
"> >\n"
"> >           gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"> >country                                                                     \n"
"> >Argentina     8052.953021     9443.038526    10079.026740     8997.897412   \n"
"> >Bolivia       2586.886053     2980.331339     3548.097832     3156.510452   \n"
"> >Brazil        3429.864357     4985.711467     6660.118654     7030.835878   \n"
"> >\n"
"> >           gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"> >country                                                                     \n"
"> >Argentina     9139.671389     9308.418710    10967.281950     8797.640716   \n"
"> >Bolivia       2753.691490     2961.699694     3326.143191     3413.262690   \n"
"> >Brazil        7807.095818     6950.283021     7957.980824     8131.212843   \n"
"> >\n"
"> >           gdpPercap_2007  \n"
"> >country                    \n"
"> >Argentina    12779.379640  \n"
"> >Bolivia       3822.137084  \n"
"> >Brazil        9065.800825 \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > 2. To check out the last three rows of `americas`, we would use the command, `americas.tail(n=3)`,\n"
"> > analogous to `head()` used above. However, here we want to look at the last three columns so we need\n"
"> > to change our view and then use `tail()`. To do so, we create a new DataFrame in which rows and \n"
"> > columns are switched\n"
"> > \n"
"> > ~~~\n"
"> > americas_flipped = americas.T\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> >\n"
"> > We can then view the last three columns of `americas` by viewing the last three rows of `americas_flipped`:\n"
"> > ~~~\n"
"> > americas_flipped.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > The output is then\n"
"> > ~~~\n"
"> > country        Argentina  Bolivia   Brazil   Canada    Chile Colombia  \\\n"
"> > gdpPercap_1997   10967.3  3326.14  7957.98  28954.9  10118.1  6117.36   \n"
"> > gdpPercap_2002   8797.64  3413.26  8131.21    33329  10778.8  5755.26   \n"
"> > gdpPercap_2007   12779.4  3822.14   9065.8  36319.2  13171.6  7006.58   \n"
"> > \n"
"> > country        Costa Rica     Cuba Dominican Republic  Ecuador    ...     \\\n"
"> > gdpPercap_1997    6677.05  5431.99             3614.1  7429.46    ...      \n"
"> > gdpPercap_2002    7723.45  6340.65            4563.81  5773.04    ...      \n"
"> > gdpPercap_2007    9645.06   8948.1            6025.37  6873.26    ...      \n"
"> > \n"
"> > country          Mexico Nicaragua   Panama Paraguay     Peru Puerto Rico  \\\n"
"> > gdpPercap_1997   9767.3   2253.02  7113.69   4247.4  5838.35     16999.4   \n"
"> > gdpPercap_2002  10742.4   2474.55  7356.03  3783.67  5909.02     18855.6   \n"
"> > gdpPercap_2007  11977.6   2749.32  9809.19  4172.84  7408.91     19328.7   \n"
"> > \n"
"> > country        Trinidad and Tobago United States  Uruguay Venezuela  \n"
"> > gdpPercap_1997             8792.57       35767.4  9230.24   10165.5  \n"
"> > gdpPercap_2002             11460.6       39097.1     7727   8605.05  \n"
"> > gdpPercap_2007             18008.5       42951.7  10611.5   11415.8  \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > Note: we could have done the above in a single line of code by 'chaining' the commands:\n"
"> > ~~~\n"
"> > americas.T.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""
">\n"
"> Dopo aver letto dal file i dati relativi alle Americhe,\n"
"> usa `help(americas.head)` e `help(americas.tail)`\n"
"> per scoprire a cosa servono `DataFrame.head` e `DataFrame.tail`.\n"
">\n"
"> 1.  Con quale chiamata si possono visualizzare le prime tre righe di questa tabella?\n"
"> 2.  Con quale chiamata si possono visualizzare le ultime tre colonne di questa tabella?\n"
">     (Suggerimento: può essere utile invertire la 'vista' sul dataset.)\n"
">\n"
"> > ## Soluzione\n"
"> > 1. Possiamo dare un'occhiata alle prime cinque righe di `americas` eseguendo `americas.head()` (che ci permette di vedere la 'testa'\n"
"> > del DataFrame). Possiamo specificare il numero di righe che desideriamo visualizzare, specificando il parametro `n` nella nostra chiamata\n"
"> > a `americas.head()`. Per visualizzare le prime tre righe, esegui:\n"
"> >\n"
"> > ~~~\n"
"> > americas.head(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > \n"
"> > In questo caso il risultato è\n"
"> > ~~~\n"
"> >          continent  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"> >country                                                               \n"
"> >Argentina  Americas     5911.315053     6856.856212     7133.166023   \n"
"> >Bolivia    Americas     2677.326347     2127.686326     2180.972546   \n"
"> >Brazil     Americas     2108.944355     2487.365989     3336.585802   \n"
"> >\n"
"> >           gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"> >country                                                                     \n"
"> >Argentina     8052.953021     9443.038526    10079.026740     8997.897412   \n"
"> >Bolivia       2586.886053     2980.331339     3548.097832     3156.510452   \n"
"> >Brazil        3429.864357     4985.711467     6660.118654     7030.835878   \n"
"> >\n"
"> >           gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"> >country                                                                     \n"
"> >Argentina     9139.671389     9308.418710    10967.281950     8797.640716   \n"
"> >Bolivia       2753.691490     2961.699694     3326.143191     3413.262690   \n"
"> >Brazil        7807.095818     6950.283021     7957.980824     8131.212843   \n"
"> >\n"
"> >           gdpPercap_2007  \n"
"> >country                    \n"
"> >Argentina    12779.379640  \n"
"> >Bolivia       3822.137084  \n"
"> >Brazil        9065.800825 \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > 2. Per dare un'occhiata alle ultime tre righe di `americas`, usiamo il comando `americas.tail(n=3)`,\n"
"> > che è analogo a `head()`. Però, in questo caso vogliamo le ultime tre *colonne*, per cui dobbiamo\n"
"> > cambiare la 'vista' e usare `tail()`. A questo scopo, creiamo un nuovo \n"
"> > DataFrame in cui righe e colonne sono scambiate.\n"
"> > \n"
"> > ~~~\n"
"> > americas_invertito = americas.T\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> >\n"
"> > Poi, possiamo visualizzare le ultime tre colonne di `americas` guardando le ultime tre righe di `americas_invertito`:\n"
"> > ~~~\n"
"> > americas_invertito.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > E allora il risultato è\n"
"> > ~~~\n"
"> > country        Argentina  Bolivia   Brazil   Canada    Chile Colombia  \\\n"
"> > gdpPercap_1997   10967.3  3326.14  7957.98  28954.9  10118.1  6117.36   \n"
"> > gdpPercap_2002   8797.64  3413.26  8131.21    33329  10778.8  5755.26   \n"
"> > gdpPercap_2007   12779.4  3822.14   9065.8  36319.2  13171.6  7006.58   \n"
"> > \n"
"> > country        Costa Rica     Cuba Dominican Republic  Ecuador    ...     \\\n"
"> > gdpPercap_1997    6677.05  5431.99             3614.1  7429.46    ...      \n"
"> > gdpPercap_2002    7723.45  6340.65            4563.81  5773.04    ...      \n"
"> > gdpPercap_2007    9645.06   8948.1            6025.37  6873.26    ...      \n"
"> > \n"
"> > country          Mexico Nicaragua   Panama Paraguay     Peru Puerto Rico  \\\n"
"> > gdpPercap_1997   9767.3   2253.02  7113.69   4247.4  5838.35     16999.4   \n"
"> > gdpPercap_2002  10742.4   2474.55  7356.03  3783.67  5909.02     18855.6   \n"
"> > gdpPercap_2007  11977.6   2749.32  9809.19  4172.84  7408.91     19328.7   \n"
"> > \n"
"> > country        Trinidad and Tobago United States  Uruguay Venezuela  \n"
"> > gdpPercap_1997             8792.57       35767.4  9230.24   10165.5  \n"
"> > gdpPercap_2002             11460.6       39097.1     7727   8605.05  \n"
"> > gdpPercap_2007             18008.5       42951.7  10611.5   11415.8  \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > Nota: avremmo potuto fare lo stesso in una sola riga di codice, mettendo i comandi in fila:\n"
"> > ~~~\n"
"> > americas.T.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:338
msgid "> ## Reading Files in Other Directories"
msgstr "> ## Leggere file in altre cartelle"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:339
msgid ""
">\n"
"> The data for your current project is stored in a file called `microbes.csv`,\n"
"> which is located in a folder called `field_data`.\n"
"> You are doing analysis in a notebook called `analysis.ipynb`\n"
"> in a sibling folder called `thesis`:\n"
">\n"
"> ~~~\n"
"> your_home_directory\n"
"> +-- field_data/\n"
"> |   +-- microbes.csv\n"
"> +-- thesis/\n"
">     +-- analysis.ipynb\n"
"> ~~~"
msgstr ""
">\n"
"> I dati usati nel progetto a cui stai lavorando sono salvati in un file chiamato `microbi.csv`,\n"
"> che si trova in una cartella chiamata `dati_sperimentali`.\n"
"> Stai facendo le tue analisi in un notebook chiamato `analisi.ipynb`\n"
"> in una cartella di fianco, chiamata `tesi`:\n"
">\n"
"> ~~~\n"
"> cartella_principale\n"
"> +-- dati_sperimentali/\n"
"> |   +-- microbi.csv\n"
"> +-- tesi/\n"
">     +-- analisi.ipynb\n"
"> ~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:353
msgid ""
">\n"
"> What value(s) should you pass to `read_csv` to read `microbes.csv` in `analysis.ipynb`?\n"
"> \n"
"> > ## Solution\n"
"> > We need to specify the path to the file of interest in the call to `pd.read_csv`. We first need to 'jump' out of\n"
"> > the folder `thesis` using '../' and then into the folder `field_data` using 'field_data/'. Then we can specify the filename `microbes.csv.\n"
"> > The result is as follows:\n"
"> > ~~~\n"
"> > data_microbes = pd.read_csv('../field_data/microbes.csv')\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""
">\n"
"> Che valore o valori bisogna passare a `read_csv` per leggere `microbi.csv` dal notebook `analisi.ipynb`?\n"
"> \n"
"> > ## Soluzione\n"
"> > Nella chiamata a `pd.read_csv`, dobbiamo specificare il percorso per arrivare al file che ci interessa. Prima di tutto, dobbiamo 'uscire' dalla cartella\n"
"> > `tesi` usando '../', e poi entrare nella cartella `dati_sperimentali` usando 'dati_sperimentali/'. Solo allora possiamo specificare il nome del file `microbi.csv.\n"
"> > Il risultato è il seguente:\n"
"> > ~~~\n"
"> > data_microbi = pd.read_csv('../dati_sperimentali/microbi.csv')\n"
"> > ~~~\n"
"> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:367
msgid "> ## Writing Data"
msgstr "> ## Salvare dati su disco"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:369
msgid "> As well as the `read_csv` function for reading data from a file,"
msgstr ""
"> Cosò come esiste una funzione `read_csv` per leggere dati da un file,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:370
msgid "> Pandas provides a `to_csv` function to write dataframes to files."
msgstr ""
"> Pandas contiene una funzione `to_csv` per salvare i dataframe su file."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:371
msgid "> Applying what you've learned about reading from files,"
msgstr "> Usando ciò che hai imparato riguardo alla lettura dei file,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:372
msgid "> write one of your dataframes to a file called `processed.csv`."
msgstr ""
"> salva uno dei tuoi dataframe in un file chiamato `dati_lavorati.csv`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:373
msgid "> You can use `help` to get information on how to use `to_csv`."
msgstr "> Per sapere come usare la funzione `to_csv`, puoi usare `help`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:374
#: python-novice-gapminder/_episodes/08-data-frames.md:371
#: python-novice-gapminder/_episodes/13-conditionals.md:298
msgid "> > ## Solution"
msgstr "> > ## Soluzione"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:375
msgid ""
"> > In order to write the DataFrame `americas` to a file called "
"`processed.csv`, execute the following command:"
msgstr ""
"> > Per salvare il DataFrame `americas` in un file chiamato "
"`dati_lavorati.csv`, esegui il comando seguente:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:376
#: python-novice-gapminder/_episodes/07-reading-tabular.md:378
#: python-novice-gapminder/_episodes/07-reading-tabular.md:381
#: python-novice-gapminder/_episodes/07-reading-tabular.md:383
#: python-novice-gapminder/_episodes/08-data-frames.md:373
#: python-novice-gapminder/_episodes/08-data-frames.md:378
#: python-novice-gapminder/_episodes/08-data-frames.md:381
#: python-novice-gapminder/_episodes/08-data-frames.md:387
#: python-novice-gapminder/_episodes/13-conditionals.md:300
#: python-novice-gapminder/_episodes/13-conditionals.md:309
msgid "> > ~~~"
msgstr "> > ~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:377
msgid "> > americas.to_csv('processed.csv')"
msgstr "> > americas.to_csv('dati_lavorati.csv')"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:379
#: python-novice-gapminder/_episodes/07-reading-tabular.md:384
msgid "> >{: .language-python}"
msgstr "> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:380
msgid "> > For help on `to_csv`, you could execute, for example,"
msgstr ""
"> > Per leggere l'aiuto relativo a `to_csv`, puoi, ad esempio, eseguire,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:382
msgid "> > help(americas.to_csv)"
msgstr "> > help(americas.to_csv)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:385
msgid ""
"> > Note that `help(to_csv)` throws an error! This is a subtlety and is due "
"to the fact that `to_csv` is NOT a function in "
msgstr ""
"> > Osserva che `help(to_csv)` dà un errore! Questa è una sottigliezza, "
"dovuta al fatto che `to_csv` NON è una funzione indipendente, ma un metodo,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:386
msgid "> > and of itself and the actual call is `americas.to_csv`. "
msgstr "> > e la chiamata corretta è `americas.to_csv`. "

# Front Matter
#: python-novice-gapminder/_episodes/09-plotting.md:1
msgid ""
"---\n"
"title: \"Plotting\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I plot my data?\"\n"
"- \"How can I save my plot for publishing?\"\n"
"objectives:\n"
"- \"Create a time series plot showing a single data set.\"\n"
"- \"Create a scatter plot showing relationship between two data sets.\"\n"
"keypoints:\n"
"- \"[`matplotlib`](https://matplotlib.org/) is the most widely used scientific plotting library in Python.\"\n"
"- \"Plot data directly from a Pandas dataframe.\"\n"
"- \"Select and transform data, then plot it.\"\n"
"- \"Many styles of plot are available: see the [Python Graph Gallery](https://python-graph-gallery.com/matplotlib/) for more options.\"\n"
"- \"Can plot many sets of data together.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Grafici\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"Come si mostrano i dati in un grafico?\"\n"
"- \"Come si salvano i grafici per pubblicarli?\"\n"
"objectives:\n"
"- \"Creare un grafico di una serie temporale con un singolo dataset.\"\n"
"- \"Creare un grafico a dispersione che mostra la relazione tra due dataset.\"\n"
"keypoints:\n"
"- \"[`matplotlib`](https://matplotlib.org/) è la libreria più usata per i grafici scientifici in Python.\"\n"
"- \"Si possono creare grafici direttamente da dataframe di Pandas.\"\n"
"- \"Selezionare e trasformare dati prima di creare un grafico.\"\n"
"- \"Sono disponibili molti tipi di grafico: vedi la [Python Graph Gallery](https://python-graph-gallery.com/matplotlib/) per tutte le altre possibilità.\"\n"
"- \"Si possono rappresentare molti dataset nello stesso grafico.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/09-plotting.md:18
msgid ""
"## [`matplotlib`](https://matplotlib.org/) is the most widely used "
"scientific plotting library in Python."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:20
msgid ""
"*   Commonly use a sub-library called "
"[`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:21
msgid ""
"*   The Jupyter Notebook will render plots inline if we ask it to using a "
"\"magic\" command."
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:23
msgid ""
"~~~\n"
"%matplotlib inline\n"
"import matplotlib.pyplot as plt\n"
"~~~"
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:29
msgid "*   Simple plots are then (fairly) simple to create."
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:31
msgid ""
"~~~\n"
"time = [0, 1, 2, 3]\n"
"position = [0, 100, 200, 300]\n"
"\n"
"plt.plot(time, position)\n"
"plt.xlabel('Time (hr)')\n"
"plt.ylabel('Position (km)')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:41
msgid ""
"![Simple Position-Time Plot](../fig/9_simple_position_time_plot.svg)\n"
"## Plot data directly from a [`Pandas dataframe`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:44
msgid ""
"*   We can also plot [Pandas dataframes](https://pandas.pydata.org/pandas-"
"docs/stable/generated/pandas.DataFrame.html)."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:45
msgid ""
"*   This implicitly uses "
"[`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:46
msgid ""
"*   Before plotting, we convert the column headings from a `string` to "
"`integer` data type, since they represent numerical values"
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:48
msgid ""
"~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"\n"
"# Extract year from last 4 characters of each column name\n"
"# The current column names are structured as 'gdpPercap_(year)', \n"
"# so we want to keep the (year) part only for clarity when plotting GDP vs. years\n"
"# To do this we use strip(), which removes from the string the characters stated in the argument\n"
"# This method works on strings, so we call str before strip()\n"
"\n"
"years = data.columns.str.strip('gdpPercap_')\n"
"\n"
"# Convert year values to integers, saving results back to dataframe\n"
"\n"
"data.columns = years.astype(int)\n"
"\n"
"data.loc['Australia'].plot()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:69
msgid ""
"![GDP plot for Australia](../fig/9_gdp_australia.svg)\n"
"## Select and transform data, then plot it."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:72
msgid ""
"*   By default, [`DataFrame.plot`](https://pandas.pydata.org/pandas-"
"docs/stable/generated/pandas.DataFrame.plot.html#pandas.DataFrame.plot) "
"plots with the rows as the X axis."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:73
msgid "*   We can transpose the data in order to plot multiple series."
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:75
msgid ""
"~~~\n"
"data.T.plot()\n"
"plt.ylabel('GDP per capita')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:81
msgid ""
"![GDP plot for Australia and New Zealand](../fig/9_gdp_australia_nz.svg)\n"
"## Many styles of plot are available."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:84
msgid "*   For example, do a bar plot using a fancier style."
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:86
msgid ""
"~~~\n"
"plt.style.use('ggplot')\n"
"data.T.plot(kind='bar')\n"
"plt.ylabel('GDP per capita')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:93
msgid "![GDP barplot for Australia](../fig/9_gdp_bar.svg)"
msgstr ""

# header
#: python-novice-gapminder/_episodes/09-plotting.md:95
msgid ""
"## Data can also be plotted by calling the `matplotlib` `plot` function "
"directly."
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:96
msgid "*   The command is `plt.plot(x, y)`"
msgstr ""

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:97
msgid ""
"*   The color / format of markers can also be specified as an optical "
"argument: e.g. 'b-' is a blue line, 'g--' is a green dashed line."
msgstr ""

# header
#: python-novice-gapminder/_episodes/09-plotting.md:99
msgid "## Get Australia data from dataframe"
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:101
msgid ""
"~~~\n"
"years = data.columns\n"
"gdp_australia = data.loc['Australia']\n"
"\n"
"plt.plot(years, gdp_australia, 'g--')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:109
msgid ""
"![GDP formatted plot for Australia](../fig/9_gdp_australia_formatted.svg)"
msgstr ""

# header
#: python-novice-gapminder/_episodes/09-plotting.md:111
msgid "## Can plot many sets of data together."
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:113
msgid ""
"~~~\n"
"# Select two countries' worth of data.\n"
"gdp_australia = data.loc['Australia']\n"
"gdp_nz = data.loc['New Zealand']\n"
"\n"
"# Plot with differently-colored markers.\n"
"plt.plot(years, gdp_australia, 'b-', label='Australia')\n"
"plt.plot(years, gdp_nz, 'g-', label='New Zealand')\n"
"\n"
"# Create legend.\n"
"plt.legend(loc='upper left')\n"
"plt.xlabel('Year')\n"
"plt.ylabel('GDP per capita ($)')\n"
"~~~"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:129
msgid "> ## Adding a Legend"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:131
msgid ""
"> Often when plotting multiple datasets on the same figure it is desirable "
"to have "
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:132
msgid "> a legend describing the data."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:133
msgid ""
">\n"
"> This can be done in `matplotlib` in two stages:\n"
"> \n"
"> * Provide a label for each dataset in the figure:\n"
">\n"
"> ~~~\n"
"> plt.plot(years, gdp_australia, label='Australia')\n"
"> plt.plot(years, gdp_nz, label='New Zealand')\n"
"> ~~~\n"
">\n"
"> * Instruct `matplotlib` to create the legend.\n"
">\n"
"> ~~~\n"
"> plt.legend()\n"
"> ~~~\n"
">\n"
"> By default matplotlib will attempt to place the legend in a suitable position. If you\n"
"> would rather specify a position this can be done with the `loc=` argument, e.g to place\n"
"> the legend in the upper left corner of the plot, specify `loc='upper left'`\n"
"> {: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:156
msgid ""
"![GDP formatted plot for Australia and New Zealand](../fig/9_gdp_australia_nz_formatted.svg)\n"
"*   Plot a scatter plot correlating the GDP of Australia and New Zealand\n"
"*   Use either `plt.scatter` or `DataFrame.plot.scatter`"
msgstr ""

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:160
msgid ""
"~~~\n"
"plt.scatter(gdp_australia, gdp_nz)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:165
msgid ""
"![GDP correlation using plt.scatter](../fig/9_gdp_correlation_plt.svg)\n"
"~~~\n"
"data.T.plot.scatter(x = 'Australia', y = 'New Zealand')\n"
"~~~\n"
"{: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:171
msgid ""
"![GDP correlation using "
"data.T.plot.scatter](../fig/9_gdp_correlation_data.svg)"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:173
msgid "> ## Minima and Maxima"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:174
msgid ""
">\n"
"> Fill in the blanks below to plot the minimum GDP per capita over time\n"
"> for all the countries in Europe.\n"
"> Modify it again to plot the maximum GDP per capita over time for Europe.\n"
">\n"
"> ~~~\n"
"> data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> data_europe.____.plot(label='min')\n"
"> data_europe.____\n"
"> plt.legend(loc='best')\n"
"> plt.xticks(rotation=90)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> > data_europe.min().plot(label='min')\n"
"> > data_europe.max().plot(label='max')\n"
"> > plt.legend(loc='best')\n"
"> > plt.xticks(rotation=90)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ![Minima Maxima Solution](../fig/9_minima_maxima_solution.png)"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:202
msgid "> ## Correlations"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:203
msgid ""
">\n"
"> Modify the example in the notes to create a scatter plot showing\n"
"> the relationship between the minimum and maximum GDP per capita\n"
"> among the countries in Asia for each year in the data set.\n"
"> What relationship do you see (if any)?\n"
">\n"
"> ~~~\n"
"> data_asia = pd.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.describe().T.plot(kind='scatter', x='min', y='max')\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ![Correlations Solution 1](../fig/9_correlations_solution1.svg)\n"
"> >\n"
"> > No particular correlations can be seen between the minimum and maximum gdp values\n"
"> > year on year. It seems the fortunes of asian countries do not rise and fall together."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:222
msgid ""
">\n"
"> You might note that the variability in the maximum is much higher than\n"
"> that of the minimum.  Take a look at the maximum and the max indexes:\n"
">\n"
"> ~~~\n"
"> data_asia = pd.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.max().plot()\n"
"> print(data_asia.idxmax())\n"
"> print(data_asia.idxmin())\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ![Correlations Solution 2](../fig/9_correlations_solution2.png)\n"
"> >\n"
"> > Seems the variability in this value is due to a sharp drop after 1972.\n"
"> > Some geopolitics at play perhaps? Given the dominance of oil producing countries,\n"
"> > maybe the Brent crude index would make an interesting comparison?\n"
"> > Whilst Myanmar consistently has the lowest gdp, the highest gdb nation has varied\n"
"> > more notably."
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:244
msgid "> ## More Correlations"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:245
msgid ""
">\n"
"> This short program creates a plot showing\n"
"> the correlation between GDP and life expectancy for 2007,\n"
"> normalizing marker size by population:\n"
">\n"
"> ~~~\n"
"> data_all = pd.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> data_all.plot(kind='scatter', x='gdpPercap_2007', y='lifeExp_2007',\n"
">               s=data_all['pop_2007']/1e6)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Using online help and other resources,\n"
"> explain what each argument to `plot` does.\n"
">\n"
"> > ## Solution\n"
"> > ![More Correlations Solution](../fig/9_more_correlations_solution.svg)\n"
"> >\n"
"> > A good place to look is the documentation for the plot function -\n"
"> > help(data_all.plot).\n"
"> >\n"
"> > kind - As seen already this determines the kind of plot to be drawn.\n"
"> >\n"
"> > x and y - A column name or index that determines what data will be\n"
"> > placed on the x and y axes of the plot\n"
"> >\n"
"> > s - Details for this can be found in the documentation of plt.scatter.\n"
"> > A single number or one value for each data point. Determines the size\n"
"> > of the plotted points."
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:277
msgid "> ## Saving your plot to a file"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:279
msgid ""
"> If you are satisfied with the plot you see you may want to save it to a "
"file,"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:280
msgid "> perhaps to include it in a publication. There is a function in the"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:281
msgid "> matplotlib.pyplot module that accomplishes this:"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:282
msgid ""
"> "
"[savefig](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)."
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:283
msgid "> Calling this function, e.g. with"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:284
#: python-novice-gapminder/_episodes/09-plotting.md:286
msgid "> ~~~"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:285
msgid "> plt.savefig('my_figure.png')"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:287
msgid "> {: .language-python}"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:289
msgid ""
"> will save the current figure to the file `my_figure.png`. The file format"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:290
msgid ""
"> will automatically be deduced from the file name extension (other formats"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:291
msgid "> are pdf, ps, eps and svg)."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:292
msgid ""
">\n"
"> Note that functions in `plt` refer to a global figure variable\n"
"> and after a figure has been displayed to the screen (e.g. with `plt.show`) \n"
"> matplotlib will make this  variable refer to a new empty figure.\n"
"> Therefore, make sure you call `plt.savefig` before the plot is displayed to\n"
"> the screen, otherwise you may find a file with an empty plot.\n"
">\n"
"> When using dataframes, data is often generated and plotted to screen in one line,\n"
"> and `plt.savefig` seems not to be a possible approach.\n"
"> One possibility to save the figure to file is then to\n"
">\n"
"> * save a reference to the current figure in a local variable (with `plt.gcf`) \n"
"> * call the `savefig` class method from that variable.\n"
">\n"
"> ~~~\n"
"> fig = plt.gcf() # get current figure\n"
"> data.plot(kind='bar')\n"
"> fig.savefig('my_figure.png')\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:314
msgid "> ## Making your plots accessible"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:315
msgid ""
">\n"
"> Whenever you are generating plots to go into a paper or a presentation, there are a few things you can do to make sure that everyone can understand your plots.\n"
"> * Always make sure your text is large enough to read. Use the `fontsize` parameter in `xlabel`, `ylabel`, `title`, and `legend`, and [`tick_params` with `labelsize`](https://matplotlib.org/2.1.1/api/_as_gen/matplotlib.pyplot.tick_params.html) to increase the text size of the numbers on your axes.\n"
"> * Similarly, you should make your graph elements easy to see. Use `s` to increase the size of your scatterplot markers and `linewidth` to increase the sizes of your plot lines.\n"
"> * Using color (and nothing else) to distinguish between different plot elements will make your plots unreadable to anyone who is colorblind, or who happens to have a black-and-white office printer. For lines, the `linestyle` parameter lets you use different types of lines. For scatterplots, `marker` lets you change the shape of your points. If you're unsure about your colors, you can use [Coblis](https://www.color-blindness.com/coblis-color-blindness-simulator/) or [Color Oracle](https://colororacle.org/) to simulate what your plots would look like to those with colorblindness."
msgstr ""

# Front Matter
#: python-novice-gapminder/_episodes/10-lunch.md:1
msgid ""
"---\n"
"layout: break\n"
"title: \"Lunch\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 45\n"
"---"
msgstr ""
"---\n"
"layout: break\n"
"title: \"Pranzo\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 45\n"
"---"

#: python-novice-gapminder/_episodes/10-lunch.md:8
msgid ""
"Over lunch, reflect on and discuss the following:\n"
"* What sort of packages might you use in Python and why would you use them?\n"
"* How would data need to be formatted to be used in Pandas data frames? Would the data you have meet these requirements?\n"
"* What limitations or problems might you run into when thinking about how to apply what we've learned to your own projects or data?"
msgstr ""
"Durante il pranzo, rifletti e discuti i punti seguenti:\n"
"* Che tipo di pacchetti in Python potrebbero esserti utili, e perché?\n"
"* Come devono essere strutturati i dati, per poter essere usati nei dataframe di Pandas? I dati che possiedi soddisfano questi requisiti?\n"
"* Pensando a come applicare ai tuoi progetti o ai tuoi dati ciò che abbiamo imparato, quali limitazioni o problemi potresti incontrare?"

# Front Matter
#: python-novice-gapminder/_episodes/15-coffee.md:1
msgid ""
"---\n"
"layout: break\n"
"title: \"Afternoon Coffee\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"
msgstr ""
"---\n"
"layout: break\n"
"title: \"Pausa pomeridiana\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"

#: python-novice-gapminder/_episodes/15-coffee.md:10
msgid ""
"Over break, reflect on and discuss the following:\n"
"* A common refrain in software engineering is \"Don't Repeat Yourself\". How do the techniques we've learned in the last\n"
"lessons help us avoid repeating ourselves? _note that in practice there is some nuance to this and should be balanced\n"
"with doing the simplest thing that could possibly work_\n"
"* What are the pros / cons of making a variable global or local to a function? \n"
"* When would you consider turning a block of code into a function definition?"
msgstr ""
"Nel corso della pausa, rifletti e discuti su quanto segue:\n"
"* Un detto comune nell'ingegneria del software è \"non ripeterti\". In che modo ciò che abbiamo \n"
"appreso nelle ultime lezioni può aiutarci a non ripeterci? _considera che, nella pratica, non tutto è\n"
"così netto, e deve esserci un equilibrio con la soluzione più semplice che funzioni_\n"
"* Quali sono i pro e i contro di definire una variabile globale o locale all'interno di una funzione?\n"
"* In quali casi decideresti di prendere un blocco di codice e farlo diventare la definizione di una funzione?"

# Front Matter
#: python-novice-gapminder/_episodes/19-wrap.md:1
msgid ""
"---\n"
"title: \"Wrap-Up\"\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"What have we learned?\"\n"
"- \"What else is out there and where do I find it?\"\n"
"objectives:\n"
"- \"Name and locate scientific Python community sites for software, workshops, and help.\"\n"
"keypoints:\n"
"- \"Python supports a large and diverse community across academia and industry.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Conclusione\"\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"Che cosa abbiamo imparato?\"\n"
"- \"Quali altre risorse esistono e dove posso trovarle?\"\n"
"objectives:\n"
"- \"Citare e trovare i siti della comunità scientifica Python, per software, laboratori e aiuto.\"\n"
"keypoints:\n"
"- \"Python offre una comunità estesa e varia, sia nel mondo dell'università che in quello delle aziende.\"\n"
"---"

#: python-novice-gapminder/_episodes/19-wrap.md:14
msgid ""
"Leslie Lamport once said, \"Writing is nature's way of showing you how sloppy your thinking is.\"\n"
"The same is true of programming:\n"
"many things that seem obvious when we're thinking about them\n"
"turn out to be anything but when we have to explain them precisely."
msgstr ""
"Leslie Lamport ha detto: \"La scrittura è il modo che ha la natura di farti vedere com'è impreciso il tuo pensiero.\"\n"
"Lo stesso vale per la programmazione:\n"
"molte cose che sembrano ovvie quando ci pensiamo\n"
"risultano essere tutt'altro che ovvie quando ci troviamo a doverle spiegare con precisione."

# header
#: python-novice-gapminder/_episodes/19-wrap.md:19
msgid ""
"## Python supports a large and diverse community across academia and "
"industry."
msgstr ""
"## Python offre una comunità estesa e varia, sia nel mondo dell'università "
"che in quello delle aziende."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:21
msgid ""
"*   The [Python 3 documentation](https://docs.python.org/3/) covers the core"
" language"
msgstr ""
"*   La [documentazione di Python 3](https://docs.python.org/3/) (in inglese)"
" copre il nucleo principale del linguaggio"

#: python-novice-gapminder/_episodes/19-wrap.md:22
msgid "    and the standard library."
msgstr "    e la standard library (la libreria di funzioni predefinite)."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:24
msgid ""
"*   [PyCon](https://pycon.org/) is the largest annual conference for the "
"Python community."
msgstr ""
"*   [PyCon](https://pycon.org/) è il maggior congresso annuale per la "
"comunità Python."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:26
msgid ""
"*   [SciPy](https://scipy.org) is a rich collection of scientific utilities."
msgstr ""
"*   [SciPy](https://scipy.org) è una ricca collezione di utilità "
"scientifiche."

#: python-novice-gapminder/_episodes/19-wrap.md:27
msgid ""
"    It is also the name of [a series of annual "
"conferences](https://conference.scipy.org/)."
msgstr ""
"    È anche il nome di [una serie di congressi "
"annuali](https://conference.scipy.org/)."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:29
msgid "*   [Jupyter](https://jupyter.org) is the home of Project Jupyter."
msgstr "*   [Jupyter](https://jupyter.org) è il sito del progetto Jupyter."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:31
msgid ""
"*   [Pandas](https://pandas.pydata.org) is the home of the Pandas data "
"library."
msgstr ""
"*   [Pandas](https://pandas.pydata.org) è il sito di Pandas, la libreria per"
" la gestione dei dati."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:33
msgid ""
"*   Stack Overflow's [general Python "
"section](https://stackoverflow.com/questions/tagged/python?tab=Votes)"
msgstr ""
"*   La [sezione generica di "
"Python](https://stackoverflow.com/questions/tagged/python?tab=Votes) su "
"Stack Overflow"

#: python-novice-gapminder/_episodes/19-wrap.md:34
msgid ""
"    can be helpful,\n"
"    as well as the sections on [NumPy](https://stackoverflow.com/questions/tagged/numpy?tab=Votes),\n"
"    [SciPy](https://stackoverflow.com/questions/tagged/scipy?tab=Votes), and\n"
"    [Pandas](https://stackoverflow.com/questions/tagged/pandas?tab=Votes)."
msgstr ""
"    può essere utile,\n"
"    e lo stesso vale per le sezioni relative a [NumPy](https://stackoverflow.com/questions/tagged/numpy?tab=Votes),\n"
"    [SciPy](https://stackoverflow.com/questions/tagged/scipy?tab=Votes), and\n"
"    [Pandas](https://stackoverflow.com/questions/tagged/pandas?tab=Votes)."

# Front Matter
#: python-novice-gapminder/_episodes/20-feedback.md:1
msgid ""
"---\n"
"title: \"Feedback\"\n"
"teaching: 0\n"
"exercises: 15\n"
"questions:\n"
"- \"How did the class go?\"\n"
"objectives:\n"
"- \"Gather feedback on the class\"\n"
"keypoints:\n"
"- \"We are constantly seeking to improve this course.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Feedback\"\n"
"teaching: 0\n"
"exercises: 15\n"
"questions:\n"
"- \"Come è andato il corso?\"\n"
"objectives:\n"
"- \"Raccogliere feedback sul corso\"\n"
"keypoints:\n"
"- \"Cerchiamo di migliorare continuamente questo corso.\"\n"
"---"

#: python-novice-gapminder/_episodes/20-feedback.md:13
msgid "Gather feedback from participants."
msgstr "Raccogliere il feedback dei partecipanti."

# Front Matter
#: python-novice-gapminder/_extras/about.md:1
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Informazioni\n"
"permalink: /about/\n"
"---"

#: python-novice-gapminder/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr "{% include carpentries.html %}"

# Front Matter
#: python-novice-gapminder/_extras/discuss.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Discussion\"\n"
"permalink: /discuss/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Discussione\"\n"
"permalink: /discuss/\n"
"---"

#: python-novice-gapminder/_extras/discuss.md:6
msgid "FIXME: general discussion and further reading for learners."
msgstr ""
"FIXME: discussione generale e indicazione di altre risorse da leggere per i "
"partecipanti."

# Front Matter
#: python-novice-gapminder/_extras/exercises.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Further Exercises\"\n"
"permalink: /exercises/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Ulteriori esercizi\"\n"
"permalink: /exercises/\n"
"---"

#: python-novice-gapminder/_extras/exercises.md:6
msgid "FIXME: exercises that don't fit into the regular schedule."
msgstr "FIXME: esercizi che non ci stanno nel programma regolare."

# Front Matter
#: python-novice-gapminder/_extras/figures.md:1
msgid ""
"---\n"
"title: Figures\n"
"---"
msgstr ""
"---\n"
"title: Figure\n"
"---"

#: python-novice-gapminder/_extras/figures.md:5
#: python-novice-gapminder/aio.md:13
msgid "{% include base_path.html %}"
msgstr "{% include base_path.html %}"

# inline html
#: python-novice-gapminder/_extras/figures.md:7
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url }}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var images = htmlDocArticle.getElementsByTagName(\"img\");\n"
"\n"
"          if (images.length > 0) {\n"
"            var h1text = htmlDocArticle.getElementsByTagName(\"h1\")[0].innerHTML;\n"
"\n"
"            var htitle = document.createElement('h2');\n"
"            htitle.innerHTML = h1text;\n"
"            article_here.appendChild(htitle);\n"
"\n"
"            var image_num = 0;\n"
"            for (let image of images) {\n"
"              image_num++;\n"
"\n"
"              var title = document.createElement('p');\n"
"              title.innerHTML = \"<strong>Figure \" + image_num + \".</strong> \" + image.alt;\n"
"              article_here.appendChild(title);\n"
"\n"
"              article_here.appendChild(image.cloneNode(false));\n"
"\n"
"              if (image_num < images.length) {\n"
"                var hr = document.createElement('hr');\n"
"                article_here.appendChild(hr);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ relative_root_path }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url }}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var images = htmlDocArticle.getElementsByTagName(\"img\");\n"
"\n"
"          if (images.length > 0) {\n"
"            var h1text = htmlDocArticle.getElementsByTagName(\"h1\")[0].innerHTML;\n"
"\n"
"            var htitle = document.createElement('h2');\n"
"            htitle.innerHTML = h1text;\n"
"            article_here.appendChild(htitle);\n"
"\n"
"            var image_num = 0;\n"
"            for (let image of images) {\n"
"              image_num++;\n"
"\n"
"              var title = document.createElement('p');\n"
"              title.innerHTML = \"<strong>Figure \" + image_num + \".</strong> \" + image.alt;\n"
"              article_here.appendChild(title);\n"
"\n"
"              article_here.appendChild(image.cloneNode(false));\n"
"\n"
"              if (image_num < images.length) {\n"
"                var hr = document.createElement('hr');\n"
"                article_here.appendChild(hr);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ relative_root_path }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"

#: python-novice-gapminder/_extras/figures.md:61
msgid ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\" class=\"figures\"></article>\n"
"{% endfor %}"
msgstr ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\" class=\"figures\"></article>\n"
"{% endfor %}"

# Front Matter
#: python-novice-gapminder/_extras/guide.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructors' Guide\"\n"
"permalink: /guide/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Guida per gli istruttori\"\n"
"permalink: /guide/\n"
"---"

# header
#: python-novice-gapminder/_extras/guide.md:7
msgid "## General Notes"
msgstr "## Considerazioni generali"

#: python-novice-gapminder/_extras/guide.md:9
msgid ""
"It's all right not to get through the whole lesson.\n"
":   This lesson is designed for people who have never programmed before,\n"
"    but any given class may include people with a wide range of prior experience.\n"
"    We have therefore included enough material to fill a full day if need be,\n"
"    but expect that many offerings will only get as far as the introduction to Pandas."
msgstr ""
"Non è un problema se non riuscite a completare l'intera lezione.\n"
":   Questa lezione è progettata per chi non ha mai programmato prima,\n"
"    ma una classe comprenderà sempre persone con livelli di esperienza anche molto diversi.\n"
"    Pertanto, abbiamo incluso abbastanza materiale da riempire una giornata intera se necessario,\n"
"    ma ci aspettiamo che in molti casi, l'offerta formativa si fermerà all'Introduzione a Pandas."

#: python-novice-gapminder/_extras/guide.md:15
msgid ""
"Don't tell people to Google things.\n"
":   One of the goals of this lesson is\n"
"    to help novices build a workable mental model of how programming works.\n"
"    Until they have that model,\n"
"    they will not know what to search for or how to recognize a helpful answer.\n"
"    Telling them to Google can also give the impression that we think their problem is trivial.\n"
"    (That said, if learners have done enough programming before to be past these issues,\n"
"    having them search for solutions online can help them solidify their understanding.)\n"
"    It's also worth quoting\n"
"    [Trevor King](https://github.com/swcarpentry/python-novice-\n"
"    gapminder/issues/22#issuecomment-182573516)'s\n"
"    comment about online search:\n"
"    \"If you find anything,\n"
"    other folks were confused enough to bother with a blog or Stack Overflow post,\n"
"    so it's probably not trivial.\""
msgstr ""
"Non dite ai partecipanti di cercare risposte su Google.\n"
":   Uno degli obiettivi di questa lezione è quello di\n"
"    aiutare i principianti a costruirsi un modello mentale di come funziona la programmazione.\n"
"    Finché non possiedono questo modello,\n"
"    non sapranno che cosa cercare, o come riconoscere una risposta utile.\n"
"    Dir loro di cercare su Google può inoltre dare l'impressione che il problema che stanno cercando di risolvere sia banale.\n"
"    (Detto questo, se i partecipanti hanno sufficiente esperienza nella programmazione da essersi\n"
"    lasciati alle spalle questo tipo di problemi, chiedere loro di cercare soluzioni può aiutarli a\n"
"    consolidare la loro comprensione.)\n"
"    Vale anche la pena di citare un commento di\n"
"    [Trevor King](https://github.com/swcarpentry/python-novice-\n"
"    gapminder/issues/22#issuecomment-182573516)'s\n"
"    sulla ricerca online:\n"
"    \"Se trovi qualcosa sul web,\n"
"    vuol dire che qualcun altro era confuso a sufficienza da disturbarsi a scrivere un post su un blog o su\n"
"    StackOverflow, e quindi è probabile che non sia un problema banale.\""

# Front Matter
#: python-novice-gapminder/aio.md:1
msgid ""
"---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"

#: python-novice-gapminder/aio.md:7
msgid ""
"{% comment %}\n"
"As a maintainer, you don't need to edit this file.\n"
"If you notice that something doesn't work, please \n"
"open an issue: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"
msgstr ""
"{% comment %}\n"
"As a maintainer, you don't need to edit this file.\n"
"If you notice that something doesn't work, please \n"
"open an issue: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"

#: python-novice-gapminder/aio.md:15
msgid "{% include aio-script.md %}"
msgstr "{% include aio-script.md %}"

# Front Matter
#: python-novice-gapminder/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"permalink: index.html  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"---"
msgstr ""
"---\n"
"layout: lesson\n"
"root: .  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"permalink: index.html  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"---"

#: python-novice-gapminder/index.md:7
msgid ""
"This lesson is an introduction to programming in Python for people with little or no previous \n"
"programming experience. It uses plotting as its motivating example, and is designed to be used in \n"
"both [Data Carpentry][dc-lessons] and [Software Carpentry][swc-lessons] workshops. \n"
"This lesson references [JupyterLab][jupyterlab], but can be taught using a regular Python interpreter \n"
"as well. Please note that this lesson uses Python 3 rather than Python 2."
msgstr ""
"Questa lezione è un'introduzione alla programmazione in Python destinata a chi ha poca o nessuna\n"
"esperienza di programmazione. Usa la produzione di grafici come motivazione ed è progettata per\n"
"essere usata sia in laboratori di [Data Carpentry][dc-lessons] sia di [Software Carpentry][swc-lessons].\n"
"Questa lezione fa riferimento all'ambiente [JupyterLab][jupyterlab], ma può essere usata anche con un\n"
"normale interprete Python. Notare che questa lezione usa Python 3 e non Python 2."

# blockquote, which can be cascaded
#: python-novice-gapminder/index.md:13
msgid "> ## Under Design"
msgstr "> ## In via di progettazione"

#: python-novice-gapminder/index.md:14
msgid ""
">\n"
"> **This lesson is currently in its early design stage;\n"
"> please check [the design notes]({{ page.root }}/design/)\n"
"> to see what we have so far.\n"
"> Contributions are very welcome:\n"
"> we would be particularly grateful for exercises\n"
"> and for commentary on the ones already there.**"
msgstr ""
">\n"
"> **Questa lezione è ancora nelle fasi iniziali della sua progettazione;\n"
"> fate riferimento alle [note di progettazione]({{ page.root }}/design/)\n"
"> per sapere a che punto siamo.\n"
"> I vostri contributi sono i benvenuti:\n"
"> saremmo particolarmente grati per l'aggiunta di esercizi\n"
"> e per i vostri commenti su quelli già presenti.**"

# blockquote, which can be cascaded
#: python-novice-gapminder/index.md:23
msgid "> ## Prerequisites"
msgstr "> ## Prerequisiti"

#: python-novice-gapminder/index.md:24
msgid ""
">\n"
"> 1.  Learners need to understand what files and directories are,\n"
">     what a working directory is,\n"
">     and how to start a Python interpreter.\n"
">\n"
"> 2. Learners must install Python before the class starts.\n"
">\n"
"> 3. Learners must get the gapminder data before class starts:\n"
">    please download and unzip the file \n"
">    [python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
">\n"
">    Please see [the setup instructions][lesson-setup]\n"
">    for details."
msgstr ""
">\n"
"> 1.  I partecipanti devono sapere cosa sono i file e le cartelle,\n"
">     che cos'è la cartella di lavoro corrente,\n"
">     e come lanciare l'interprete di Python.\n"
">\n"
"> 2. I partecipanti devono installare Python prima che inizi la lezione.\n"
">\n"
"> 3. I partecipanti devono scaricare i dati Gapminder prima dell'inizio della lezione:\n"
">    vi preghiamo di scaricare e decomprimere il file \n"
">    [python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
">\n"
">    Vedi [le istruzioni preparatorie][lesson-setup]\n"
">    per maggiori dettagli."

# SC/DC Template label
#: python-novice-gapminder/index.md:37
msgid "{: .prereq}"
msgstr "{: .prereq}"
